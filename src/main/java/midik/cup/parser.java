
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package midik.cup;

import java_cup.runtime.Symbol;
import midik.arbol.NodoAST;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\244\000\002\002\004\000\002\002\003\000\002\100" +
    "\006\000\002\101\004\000\002\101\005\000\002\102\005" +
    "\000\002\103\005\000\002\103\002\000\002\003\004\000" +
    "\002\003\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\025\005\000\002\025\004\000\002\035\006" +
    "\000\002\035\007\000\002\037\005\000\002\037\006\000" +
    "\002\005\010\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\004\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\004\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\033\004\000\002\006\007\000\002\023\005" +
    "\000\002\023\003\000\002\007\007\000\002\010\006\000" +
    "\002\034\011\000\002\034\011\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\041\007\000\002\041\007\000\002\043\006" +
    "\000\002\043\006\000\002\011\007\000\002\012\007\000" +
    "\002\013\007\000\002\013\007\000\002\013\007\000\002" +
    "\042\006\000\002\042\006\000\002\042\006\000\002\014" +
    "\007\000\002\024\003\000\002\026\003\000\002\044\013" +
    "\000\002\045\011\000\002\046\014\000\002\046\014\000" +
    "\002\050\004\000\002\050\003\000\002\062\005\000\002" +
    "\062\006\000\002\015\004\000\002\016\004\000\002\016" +
    "\004\000\002\017\006\000\002\017\005\000\002\021\003" +
    "\000\002\021\002\000\002\020\003\000\002\020\005\000" +
    "\002\031\007\000\002\031\005\000\002\032\003\000\002" +
    "\032\003\000\002\032\002\000\002\063\004\000\002\064" +
    "\005\000\002\064\004\000\002\064\003\000\002\051\007" +
    "\000\002\051\006\000\002\052\004\000\002\052\005\000" +
    "\002\053\005\000\002\054\005\000\002\054\003\000\002" +
    "\055\004\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\061\003" +
    "\000\002\065\003\000\002\065\004\000\002\065\004\000" +
    "\002\047\005\000\002\047\004\000\002\047\004\000\002" +
    "\030\006\000\002\030\005\000\002\066\006\000\002\066" +
    "\007\000\002\066\005\000\002\066\005\000\002\067\011" +
    "\000\002\070\004\000\002\070\003\000\002\070\003\000" +
    "\002\070\004\000\002\071\006\000\002\072\005\000\002" +
    "\073\003\000\002\073\004\000\002\073\004\000\002\073" +
    "\005\000\002\074\011\000\002\075\006\000\002\076\012" +
    "\000\002\077\004\000\002\077\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0167\000\004\102\006\001\002\000\004\002\u0169\001" +
    "\002\000\004\002\000\001\002\000\004\071\u0162\001\002" +
    "\000\004\043\010\001\002\000\060\005\016\006\047\007" +
    "\040\010\024\011\043\012\034\013\067\015\020\017\050" +
    "\021\037\023\063\024\027\025\060\026\032\027\045\030" +
    "\041\031\062\032\015\033\053\034\052\035\014\036\023" +
    "\071\036\001\002\000\066\005\uffed\006\uffed\007\uffed\010" +
    "\uffed\011\uffed\012\uffed\013\uffed\015\uffed\017\uffed\020\uffed" +
    "\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027" +
    "\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed" +
    "\036\uffed\044\uffed\071\uffed\001\002\000\066\005\ufff1\006" +
    "\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\015\ufff1" +
    "\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025" +
    "\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1" +
    "\034\ufff1\035\ufff1\036\ufff1\044\ufff1\071\ufff1\001\002\000" +
    "\066\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6" +
    "\013\ufff6\015\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023" +
    "\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6" +
    "\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\044\ufff6\071" +
    "\ufff6\001\002\000\004\045\u015e\001\002\000\004\045\u014e" +
    "\001\002\000\006\014\uff7f\071\uff7f\001\002\000\066\005" +
    "\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2" +
    "\015\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024" +
    "\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2" +
    "\033\ufff2\034\ufff2\035\ufff2\036\ufff2\044\ufff2\071\ufff2\001" +
    "\002\000\004\045\u0148\001\002\000\062\005\016\006\047" +
    "\007\040\010\024\011\043\012\034\013\067\015\020\017" +
    "\050\021\037\023\063\024\027\025\060\026\032\027\045" +
    "\030\041\031\062\032\015\033\053\034\052\035\014\036" +
    "\023\044\u0147\071\036\001\002\000\066\005\uffe9\006\uffe9" +
    "\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\015\uffe9\017" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\036\uffe9\044\uffe9\071\uffe9\001\002\000\004" +
    "\045\u0142\001\002\000\006\014\uff7d\071\uff7d\001\002\000" +
    "\066\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb" +
    "\013\uffeb\015\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023" +
    "\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb" +
    "\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\044\uffeb\071" +
    "\uffeb\001\002\000\070\005\uff66\006\uff66\007\uff66\010\uff66" +
    "\011\uff66\012\uff66\013\uff66\015\uff66\016\u0135\017\uff66\020" +
    "\uff66\021\uff66\022\uff66\023\uff66\024\uff66\025\uff66\026\uff66" +
    "\027\uff66\030\uff66\031\uff66\032\uff66\033\uff66\034\uff66\035" +
    "\uff66\036\uff66\044\uff66\071\uff66\001\002\000\004\045\u012c" +
    "\001\002\000\066\005\uffef\006\uffef\007\uffef\010\uffef\011" +
    "\uffef\012\uffef\013\uffef\015\uffef\017\uffef\020\uffef\021\uffef" +
    "\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030" +
    "\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef" +
    "\044\uffef\071\uffef\001\002\000\066\005\uffe5\006\uffe5\007" +
    "\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\015\uffe5\017\uffe5" +
    "\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\044\uffe5\071\uffe5\001\002\000\066\005" +
    "\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3" +
    "\015\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024" +
    "\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3" +
    "\033\uffa3\034\uffa3\035\uffa3\036\uffa3\044\uffa3\071\uffa3\001" +
    "\002\000\066\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\013\ufff5\015\ufff5\017\ufff5\020\ufff5\021\ufff5\022" +
    "\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5" +
    "\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\044" +
    "\ufff5\071\ufff5\001\002\000\016\005\016\006\047\007\040" +
    "\010\024\011\043\013\067\001\002\000\066\005\ufff8\006" +
    "\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\015\ufff8" +
    "\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025" +
    "\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8" +
    "\034\ufff8\035\ufff8\036\ufff8\044\ufff8\071\ufff8\001\002\000" +
    "\020\045\u0122\052\322\067\345\070\342\075\230\110\323" +
    "\111\324\001\002\000\066\005\uffa2\006\uffa2\007\uffa2\010" +
    "\uffa2\011\uffa2\012\uffa2\013\uffa2\015\uffa2\017\uffa2\020\uffa2" +
    "\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027" +
    "\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2" +
    "\036\uffa2\044\uffa2\071\uffa2\001\002\000\006\014\uff7b\071" +
    "\uff7b\001\002\000\004\045\u011e\001\002\000\066\005\ufff0" +
    "\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\015" +
    "\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0" +
    "\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033" +
    "\ufff0\034\ufff0\035\ufff0\036\ufff0\044\ufff0\071\ufff0\001\002" +
    "\000\006\014\uff7c\071\uff7c\001\002\000\066\005\uffea\006" +
    "\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\015\uffea" +
    "\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025" +
    "\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea" +
    "\034\uffea\035\uffea\036\uffea\044\uffea\071\uffea\001\002\000" +
    "\036\030\117\033\121\034\124\037\u011c\045\120\056\122" +
    "\061\105\071\112\072\104\073\111\074\114\077\106\100" +
    "\115\101\116\001\002\000\066\005\ufff3\006\ufff3\007\ufff3" +
    "\010\ufff3\011\ufff3\012\ufff3\013\ufff3\015\ufff3\017\ufff3\020" +
    "\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3" +
    "\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035" +
    "\ufff3\036\ufff3\044\ufff3\071\ufff3\001\002\000\006\014\uff7e" +
    "\071\uff7e\001\002\000\004\045\u010a\001\002\000\110\005" +
    "\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c" +
    "\015\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024" +
    "\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c" +
    "\033\uff9c\034\uff9c\035\uff9c\036\uff9c\044\uff9c\045\uff9c\056" +
    "\uff9c\061\uff9c\071\uff9c\072\uff9c\073\uff9c\074\uff9c\077\uff9c" +
    "\100\uff9c\101\uff9c\001\002\000\004\045\u0100\001\002\000" +
    "\004\045\371\001\002\000\066\005\uffe8\006\uffe8\007\uffe8" +
    "\010\uffe8\011\uffe8\012\uffe8\013\uffe8\015\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035" +
    "\uffe8\036\uffe8\044\uffe8\071\uffe8\001\002\000\066\005\uffec" +
    "\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\015" +
    "\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec" +
    "\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033" +
    "\uffec\034\uffec\035\uffec\036\uffec\044\uffec\071\uffec\001\002" +
    "\000\066\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012" +
    "\uffee\013\uffee\015\uffee\017\uffee\020\uffee\021\uffee\022\uffee" +
    "\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031" +
    "\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\044\uffee" +
    "\071\uffee\001\002\000\066\005\ufff7\006\ufff7\007\ufff7\010" +
    "\ufff7\011\ufff7\012\ufff7\013\ufff7\015\ufff7\017\ufff7\020\ufff7" +
    "\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027" +
    "\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7" +
    "\036\ufff7\044\ufff7\071\ufff7\001\002\000\004\043\361\001" +
    "\002\000\066\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\012\uffe6\013\uffe6\015\uffe6\017\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\044" +
    "\uffe6\071\uffe6\001\002\000\004\045\355\001\002\000\004" +
    "\045\304\001\002\000\066\005\ufff4\006\ufff4\007\ufff4\010" +
    "\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4\017\ufff4\020\ufff4" +
    "\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027" +
    "\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4" +
    "\036\ufff4\044\ufff4\071\ufff4\001\002\000\066\005\uffe7\006" +
    "\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\015\uffe7" +
    "\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\036\uffe7\044\uffe7\071\uffe7\001\002\000" +
    "\004\071\263\001\002\000\014\005\016\006\047\007\040" +
    "\010\024\011\043\001\002\000\006\014\073\071\071\001" +
    "\002\000\010\037\257\041\254\052\255\001\002\000\110" +
    "\005\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013" +
    "\uff9b\015\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b" +
    "\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032" +
    "\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\044\uff9b\045\uff9b" +
    "\056\uff9b\061\uff9b\071\uff9b\072\uff9b\073\uff9b\074\uff9b\077" +
    "\uff9b\100\uff9b\101\uff9b\001\002\000\004\071\074\001\002" +
    "\000\006\041\076\075\101\001\002\000\110\005\uff9a\006" +
    "\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a\015\uff9a" +
    "\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025" +
    "\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a" +
    "\034\uff9a\035\uff9a\036\uff9a\044\uff9a\045\uff9a\056\uff9a\061" +
    "\uff9a\071\uff9a\072\uff9a\073\uff9a\074\uff9a\077\uff9a\100\uff9a" +
    "\101\uff9a\001\002\000\004\071\074\001\002\000\110\005" +
    "\uff99\006\uff99\007\uff99\010\uff99\011\uff99\012\uff99\013\uff99" +
    "\015\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024" +
    "\uff99\025\uff99\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99" +
    "\033\uff99\034\uff99\035\uff99\036\uff99\044\uff99\045\uff99\056" +
    "\uff99\061\uff99\071\uff99\072\uff99\073\uff99\074\uff99\077\uff99" +
    "\100\uff99\101\uff99\001\002\000\010\037\245\052\243\075" +
    "\246\001\002\000\036\030\117\033\121\034\124\045\120" +
    "\056\122\061\105\071\112\072\104\073\111\074\114\076" +
    "\uff93\077\106\100\115\101\116\001\002\000\004\076\242" +
    "\001\002\000\060\037\uffc1\041\uffc1\042\uffc1\044\uffc1\046" +
    "\uffc1\047\uffc1\050\uffc1\051\uffc1\053\uffc1\054\uffc1\055\uffc1" +
    "\057\uffc1\060\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066" +
    "\uffc1\076\uffc1\110\uffc1\111\uffc1\112\uffc1\113\uffc1\001\002" +
    "\000\060\037\uffc9\041\uffc9\042\uffc9\044\uffc9\046\uffc9\047" +
    "\uffc9\050\uffc9\051\uffc9\053\uffc9\054\uffc9\055\uffc9\057\uffc9" +
    "\060\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\076" +
    "\uffc9\110\uffc9\111\uffc9\112\uffc9\113\uffc9\001\002\000\034" +
    "\030\117\033\121\034\124\045\120\056\122\061\105\071" +
    "\112\072\104\073\111\074\114\077\106\100\115\101\116" +
    "\001\002\000\060\037\uffc7\041\uffc7\042\uffc7\044\uffc7\046" +
    "\uffc7\047\uffc7\050\uffc7\051\uffc7\053\uffc7\054\uffc7\055\uffc7" +
    "\057\uffc7\060\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066" +
    "\uffc7\076\uffc7\110\uffc7\111\uffc7\112\uffc7\113\uffc7\001\002" +
    "\000\060\037\uffbf\041\uffbf\042\uffbf\044\uffbf\046\uffbf\047" +
    "\uffbf\050\uffbf\051\uffbf\053\uffbf\054\uffbf\055\uffbf\057\uffbf" +
    "\060\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\076" +
    "\uffbf\110\uffbf\111\uffbf\112\uffbf\113\uffbf\001\002\000\046" +
    "\047\156\050\151\051\164\053\147\054\155\055\161\057" +
    "\144\060\163\062\157\063\162\064\145\065\152\066\150" +
    "\076\uff94\110\154\111\146\112\153\113\160\001\002\000" +
    "\060\037\uffc8\041\uffc8\042\uffc8\044\uffc8\046\uffc8\047\uffc8" +
    "\050\uffc8\051\uffc8\053\uffc8\054\uffc8\055\uffc8\057\uffc8\060" +
    "\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\076\uffc8" +
    "\110\uffc8\111\uffc8\112\uffc8\113\uffc8\001\002\000\064\037" +
    "\uffc2\041\uffc2\042\uffc2\044\uffc2\045\227\046\uffc2\047\uffc2" +
    "\050\uffc2\051\uffc2\053\uffc2\054\uffc2\055\uffc2\057\uffc2\060" +
    "\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\075\230" +
    "\076\uffc2\110\uffc2\111\uffc2\112\uffc2\113\uffc2\001\002\000" +
    "\060\037\uffbe\041\uffbe\042\uffbe\044\uffbe\046\uffbe\047\uffbe" +
    "\050\uffbe\051\uffbe\053\uffbe\054\uffbe\055\uffbe\057\uffbe\060" +
    "\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\076\uffbe" +
    "\110\uffbe\111\uffbe\112\uffbe\113\uffbe\001\002\000\060\037" +
    "\uffc5\041\uffc5\042\uffc5\044\uffc5\046\uffc5\047\uffc5\050\uffc5" +
    "\051\uffc5\053\uffc5\054\uffc5\055\uffc5\057\uffc5\060\uffc5\062" +
    "\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\076\uffc5\110\uffc5" +
    "\111\uffc5\112\uffc5\113\uffc5\001\002\000\060\037\uffc6\041" +
    "\uffc6\042\uffc6\044\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6" +
    "\053\uffc6\054\uffc6\055\uffc6\057\uffc6\060\uffc6\062\uffc6\063" +
    "\uffc6\064\uffc6\065\uffc6\066\uffc6\076\uffc6\110\uffc6\111\uffc6" +
    "\112\uffc6\113\uffc6\001\002\000\060\037\uffc4\041\uffc4\042" +
    "\uffc4\044\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\053\uffc4" +
    "\054\uffc4\055\uffc4\057\uffc4\060\uffc4\062\uffc4\063\uffc4\064" +
    "\uffc4\065\uffc4\066\uffc4\076\uffc4\110\uffc4\111\uffc4\112\uffc4" +
    "\113\uffc4\001\002\000\004\045\223\001\002\000\034\030" +
    "\117\033\121\034\124\045\120\056\122\061\105\071\112" +
    "\072\104\073\111\074\114\077\106\100\115\101\116\001" +
    "\002\000\004\045\214\001\002\000\034\030\117\033\121" +
    "\034\124\045\120\056\122\061\105\071\112\072\104\073" +
    "\111\074\114\077\106\100\115\101\116\001\002\000\060" +
    "\037\uffc0\041\uffc0\042\uffc0\044\uffc0\046\uffc0\047\uffc0\050" +
    "\uffc0\051\uffc0\053\uffc0\054\uffc0\055\uffc0\057\uffc0\060\uffc0" +
    "\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\076\uffc0\110" +
    "\uffc0\111\uffc0\112\uffc0\113\uffc0\001\002\000\004\045\126" +
    "\001\002\000\060\037\uffc3\041\uffc3\042\uffc3\044\uffc3\046" +
    "\uffc3\047\uffc3\050\uffc3\051\uffc3\053\uffc3\054\uffc3\055\uffc3" +
    "\057\uffc3\060\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3\066" +
    "\uffc3\076\uffc3\110\uffc3\111\uffc3\112\uffc3\113\uffc3\001\002" +
    "\000\010\043\132\071\127\074\131\001\002\000\004\046" +
    "\212\001\002\000\006\041\137\046\211\001\002\000\004" +
    "\046\210\001\002\000\040\030\117\033\121\034\124\043" +
    "\132\044\uff8c\045\120\056\122\061\105\071\112\072\104" +
    "\073\111\074\114\077\106\100\115\101\116\001\002\000" +
    "\006\041\206\044\uff8e\001\002\000\052\041\uffba\044\uffba" +
    "\046\uffba\047\156\050\151\051\164\053\147\054\155\055" +
    "\161\057\144\060\163\062\157\063\162\064\145\065\152" +
    "\066\150\110\154\111\146\112\153\113\160\001\002\000" +
    "\004\044\143\001\002\000\006\041\137\044\uff8d\001\002" +
    "\000\004\043\140\001\002\000\040\030\117\033\121\034" +
    "\124\043\132\044\uff8c\045\120\056\122\061\105\071\112" +
    "\072\104\073\111\074\114\077\106\100\115\101\116\001" +
    "\002\000\004\044\142\001\002\000\012\037\uff90\041\uff90" +
    "\044\uff90\046\uff90\001\002\000\012\037\uff8f\041\uff8f\044" +
    "\uff8f\046\uff8f\001\002\000\034\030\117\033\121\034\124" +
    "\045\120\056\122\061\105\071\112\072\104\073\111\074" +
    "\114\077\106\100\115\101\116\001\002\000\034\030\117" +
    "\033\121\034\124\045\120\056\122\061\105\071\112\072" +
    "\104\073\111\074\114\077\106\100\115\101\116\001\002" +
    "\000\034\030\117\033\121\034\124\045\120\056\122\061" +
    "\105\071\112\072\104\073\111\074\114\077\106\100\115" +
    "\101\116\001\002\000\034\030\117\033\121\034\124\045" +
    "\120\056\122\061\105\071\112\072\104\073\111\074\114" +
    "\077\106\100\115\101\116\001\002\000\034\030\117\033" +
    "\121\034\124\045\120\056\122\061\105\071\112\072\104" +
    "\073\111\074\114\077\106\100\115\101\116\001\002\000" +
    "\034\030\117\033\121\034\124\045\120\056\122\061\105" +
    "\071\112\072\104\073\111\074\114\077\106\100\115\101" +
    "\116\001\002\000\034\030\117\033\121\034\124\045\120" +
    "\056\122\061\105\071\112\072\104\073\111\074\114\077" +
    "\106\100\115\101\116\001\002\000\034\030\117\033\121" +
    "\034\124\045\120\056\122\061\105\071\112\072\104\073" +
    "\111\074\114\077\106\100\115\101\116\001\002\000\034" +
    "\030\117\033\121\034\124\045\120\056\122\061\105\071" +
    "\112\072\104\073\111\074\114\077\106\100\115\101\116" +
    "\001\002\000\034\030\117\033\121\034\124\045\120\056" +
    "\122\061\105\071\112\072\104\073\111\074\114\077\106" +
    "\100\115\101\116\001\002\000\034\030\117\033\121\034" +
    "\124\045\120\056\122\061\105\071\112\072\104\073\111" +
    "\074\114\077\106\100\115\101\116\001\002\000\034\030" +
    "\117\033\121\034\124\045\120\056\122\061\105\071\112" +
    "\072\104\073\111\074\114\077\106\100\115\101\116\001" +
    "\002\000\034\030\117\033\121\034\124\045\120\056\122" +
    "\061\105\071\112\072\104\073\111\074\114\077\106\100" +
    "\115\101\116\001\002\000\034\030\117\033\121\034\124" +
    "\045\120\056\122\061\105\071\112\072\104\073\111\074" +
    "\114\077\106\100\115\101\116\001\002\000\034\030\117" +
    "\033\121\034\124\045\120\056\122\061\105\071\112\072" +
    "\104\073\111\074\114\077\106\100\115\101\116\001\002" +
    "\000\034\030\117\033\121\034\124\045\120\056\122\061" +
    "\105\071\112\072\104\073\111\074\114\077\106\100\115" +
    "\101\116\001\002\000\034\030\117\033\121\034\124\045" +
    "\120\056\122\061\105\071\112\072\104\073\111\074\114" +
    "\077\106\100\115\101\116\001\002\000\060\037\uffd3\041" +
    "\uffd3\042\uffd3\044\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3" +
    "\053\uffd3\054\uffd3\055\uffd3\057\uffd3\060\uffd3\062\uffd3\063" +
    "\uffd3\064\uffd3\065\152\066\150\076\uffd3\110\154\111\146" +
    "\112\153\113\160\001\002\000\060\037\uffcd\041\uffcd\042" +
    "\uffcd\044\uffcd\046\uffcd\047\156\050\151\051\164\053\147" +
    "\054\155\055\161\057\uffcd\060\uffcd\062\uffcd\063\uffcd\064" +
    "\uffcd\065\152\066\150\076\uffcd\110\154\111\146\112\153" +
    "\113\160\001\002\000\060\037\uffcc\041\uffcc\042\uffcc\044" +
    "\uffcc\046\uffcc\047\156\050\151\051\164\053\147\054\155" +
    "\055\161\057\uffcc\060\uffcc\062\uffcc\063\uffcc\064\uffcc\065" +
    "\152\066\150\076\uffcc\110\154\111\146\112\153\113\160" +
    "\001\002\000\060\037\uffd1\041\uffd1\042\uffd1\044\uffd1\046" +
    "\uffd1\047\uffd1\050\151\051\164\053\147\054\155\055\uffd1" +
    "\057\uffd1\060\uffd1\062\uffd1\063\uffd1\064\uffd1\065\152\066" +
    "\150\076\uffd1\110\154\111\146\112\153\113\160\001\002" +
    "\000\060\037\uffda\041\uffda\042\uffda\044\uffda\046\uffda\047" +
    "\uffda\050\uffda\051\uffda\053\uffda\054\uffda\055\uffda\057\uffda" +
    "\060\uffda\062\uffda\063\uffda\064\uffda\065\uffda\066\150\076" +
    "\uffda\110\uffda\111\uffda\112\uffda\113\uffda\001\002\000\060" +
    "\037\uffce\041\uffce\042\uffce\044\uffce\046\uffce\047\156\050" +
    "\151\051\164\053\147\054\155\055\161\057\uffce\060\163" +
    "\062\uffce\063\162\064\145\065\152\066\150\076\uffce\110" +
    "\154\111\146\112\153\113\160\001\002\000\060\037\uffd2" +
    "\041\uffd2\042\uffd2\044\uffd2\046\uffd2\047\uffd2\050\151\051" +
    "\164\053\147\054\155\055\uffd2\057\uffd2\060\uffd2\062\uffd2" +
    "\063\uffd2\064\uffd2\065\152\066\150\076\uffd2\110\154\111" +
    "\146\112\153\113\160\001\002\000\060\037\uffd5\041\uffd5" +
    "\042\uffd5\044\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\053" +
    "\uffd5\054\uffd5\055\uffd5\057\uffd5\060\uffd5\062\uffd5\063\uffd5" +
    "\064\uffd5\065\152\066\150\076\uffd5\110\154\111\146\112" +
    "\153\113\160\001\002\000\060\037\uffdd\041\uffdd\042\uffdd" +
    "\044\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\053\uffdd\054" +
    "\uffdd\055\uffdd\057\uffdd\060\uffdd\062\uffdd\063\uffdd\064\uffdd" +
    "\065\152\066\150\076\uffdd\110\uffdd\111\uffdd\112\153\113" +
    "\160\001\002\000\060\037\uffdb\041\uffdb\042\uffdb\044\uffdb" +
    "\046\uffdb\047\uffdb\050\uffdb\051\uffdb\053\uffdb\054\uffdb\055" +
    "\uffdb\057\uffdb\060\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb" +
    "\066\150\076\uffdb\110\uffdb\111\uffdb\112\uffdb\113\uffdb\001" +
    "\002\000\060\037\uffd9\041\uffd9\042\uffd9\044\uffd9\046\uffd9" +
    "\047\uffd9\050\uffd9\051\uffd9\053\uffd9\054\uffd9\055\uffd9\057" +
    "\uffd9\060\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9\066\150" +
    "\076\uffd9\110\uffd9\111\uffd9\112\uffd9\113\uffd9\001\002\000" +
    "\060\037\uffd4\041\uffd4\042\uffd4\044\uffd4\046\uffd4\047\uffd4" +
    "\050\uffd4\051\uffd4\053\uffd4\054\uffd4\055\uffd4\057\uffd4\060" +
    "\uffd4\062\uffd4\063\uffd4\064\uffd4\065\152\066\150\076\uffd4" +
    "\110\154\111\146\112\153\113\160\001\002\000\060\037" +
    "\uffd8\041\uffd8\042\uffd8\044\uffd8\046\uffd8\047\uffd8\050\uffd8" +
    "\051\uffd8\053\uffd8\054\uffd8\055\uffd8\057\uffd8\060\uffd8\062" +
    "\uffd8\063\uffd8\064\uffd8\065\uffd8\066\150\076\uffd8\110\uffd8" +
    "\111\uffd8\112\uffd8\113\uffd8\001\002\000\060\037\uffd6\041" +
    "\uffd6\042\uffd6\044\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6" +
    "\053\uffd6\054\uffd6\055\uffd6\057\uffd6\060\uffd6\062\uffd6\063" +
    "\uffd6\064\uffd6\065\152\066\150\076\uffd6\110\154\111\146" +
    "\112\153\113\160\001\002\000\060\037\uffdc\041\uffdc\042" +
    "\uffdc\044\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\053\uffdc" +
    "\054\uffdc\055\uffdc\057\uffdc\060\uffdc\062\uffdc\063\uffdc\064" +
    "\uffdc\065\152\066\150\076\uffdc\110\uffdc\111\uffdc\112\153" +
    "\113\160\001\002\000\060\037\uffcb\041\uffcb\042\uffcb\044" +
    "\uffcb\046\uffcb\047\156\050\151\051\164\053\147\054\155" +
    "\055\161\057\uffcb\060\uffcb\062\uffcb\063\uffcb\064\uffcb\065" +
    "\152\066\150\076\uffcb\110\154\111\146\112\153\113\160" +
    "\001\002\000\060\037\uffcf\041\uffcf\042\uffcf\044\uffcf\046" +
    "\uffcf\047\156\050\151\051\164\053\147\054\155\055\161" +
    "\057\uffcf\060\163\062\uffcf\063\162\064\145\065\152\066" +
    "\150\076\uffcf\110\154\111\146\112\153\113\160\001\002" +
    "\000\034\030\117\033\121\034\124\045\120\056\122\061" +
    "\105\071\112\072\104\073\111\074\114\077\106\100\115" +
    "\101\116\001\002\000\052\041\uffbb\044\uffbb\046\uffbb\047" +
    "\156\050\151\051\164\053\147\054\155\055\161\057\144" +
    "\060\163\062\157\063\162\064\145\065\152\066\150\110" +
    "\154\111\146\112\153\113\160\001\002\000\060\037\uffa5" +
    "\041\uffa5\042\uffa5\044\uffa5\046\uffa5\047\uffa5\050\uffa5\051" +
    "\uffa5\053\uffa5\054\uffa5\055\uffa5\057\uffa5\060\uffa5\062\uffa5" +
    "\063\uffa5\064\uffa5\065\uffa5\066\uffa5\076\uffa5\110\uffa5\111" +
    "\uffa5\112\uffa5\113\uffa5\001\002\000\060\037\uffa6\041\uffa6" +
    "\042\uffa6\044\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\053" +
    "\uffa6\054\uffa6\055\uffa6\057\uffa6\060\uffa6\062\uffa6\063\uffa6" +
    "\064\uffa6\065\uffa6\066\uffa6\076\uffa6\110\uffa6\111\uffa6\112" +
    "\uffa6\113\uffa6\001\002\000\060\037\uffa7\041\uffa7\042\uffa7" +
    "\044\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\053\uffa7\054" +
    "\uffa7\055\uffa7\057\uffa7\060\uffa7\062\uffa7\063\uffa7\064\uffa7" +
    "\065\uffa7\066\uffa7\076\uffa7\110\uffa7\111\uffa7\112\uffa7\113" +
    "\uffa7\001\002\000\060\037\uffd0\041\uffd0\042\uffd0\044\uffd0" +
    "\046\uffd0\047\156\050\151\051\164\053\147\054\155\055" +
    "\161\057\144\060\163\062\157\063\162\064\145\065\152" +
    "\066\150\076\uffd0\110\154\111\146\112\153\113\160\001" +
    "\002\000\006\043\132\071\215\001\002\000\004\046\220" +
    "\001\002\000\006\041\137\046\217\001\002\000\060\037" +
    "\uffad\041\uffad\042\uffad\044\uffad\046\uffad\047\uffad\050\uffad" +
    "\051\uffad\053\uffad\054\uffad\055\uffad\057\uffad\060\uffad\062" +
    "\uffad\063\uffad\064\uffad\065\uffad\066\uffad\076\uffad\110\uffad" +
    "\111\uffad\112\uffad\113\uffad\001\002\000\060\037\uffae\041" +
    "\uffae\042\uffae\044\uffae\046\uffae\047\uffae\050\uffae\051\uffae" +
    "\053\uffae\054\uffae\055\uffae\057\uffae\060\uffae\062\uffae\063" +
    "\uffae\064\uffae\065\uffae\066\uffae\076\uffae\110\uffae\111\uffae" +
    "\112\uffae\113\uffae\001\002\000\046\046\222\047\156\050" +
    "\151\051\164\053\147\054\155\055\161\057\144\060\163" +
    "\062\157\063\162\064\145\065\152\066\150\110\154\111" +
    "\146\112\153\113\160\001\002\000\060\037\uffd7\041\uffd7" +
    "\042\uffd7\044\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\053" +
    "\uffd7\054\uffd7\055\uffd7\057\uffd7\060\uffd7\062\uffd7\063\uffd7" +
    "\064\uffd7\065\uffd7\066\uffd7\076\uffd7\110\uffd7\111\uffd7\112" +
    "\uffd7\113\uffd7\001\002\000\034\030\117\033\121\034\124" +
    "\045\120\056\122\061\105\071\112\072\104\073\111\074" +
    "\114\077\106\100\115\101\116\001\002\000\006\041\206" +
    "\046\225\001\002\000\060\037\uffb8\041\uffb8\042\uffb8\044" +
    "\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\053\uffb8\054\uffb8" +
    "\055\uffb8\057\uffb8\060\uffb8\062\uffb8\063\uffb8\064\uffb8\065" +
    "\uffb8\066\uffb8\076\uffb8\110\uffb8\111\uffb8\112\uffb8\113\uffb8" +
    "\001\002\000\062\037\uffbd\041\uffbd\042\uffbd\044\uffbd\046" +
    "\uffbd\047\uffbd\050\uffbd\051\uffbd\053\uffbd\054\uffbd\055\uffbd" +
    "\057\uffbd\060\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066" +
    "\uffbd\075\236\076\uffbd\110\uffbd\111\uffbd\112\uffbd\113\uffbd" +
    "\001\002\000\036\030\117\033\121\034\124\045\120\046" +
    "\234\056\122\061\105\071\112\072\104\073\111\074\114" +
    "\077\106\100\115\101\116\001\002\000\034\030\117\033" +
    "\121\034\124\045\120\056\122\061\105\071\112\072\104" +
    "\073\111\074\114\077\106\100\115\101\116\001\002\000" +
    "\046\047\156\050\151\051\164\053\147\054\155\055\161" +
    "\057\144\060\163\062\157\063\162\064\145\065\152\066" +
    "\150\076\232\110\154\111\146\112\153\113\160\001\002" +
    "\000\064\037\uff72\041\uff72\042\uff72\044\uff72\046\uff72\047" +
    "\uff72\050\uff72\051\uff72\052\uff72\053\uff72\054\uff72\055\uff72" +
    "\057\uff72\060\uff72\062\uff72\063\uff72\064\uff72\065\uff72\066" +
    "\uff72\075\uff72\076\uff72\110\uff72\111\uff72\112\uff72\113\uff72" +
    "\001\002\000\006\041\206\046\235\001\002\000\060\037" +
    "\uffe0\041\uffe0\042\uffe0\044\uffe0\046\uffe0\047\uffe0\050\uffe0" +
    "\051\uffe0\053\uffe0\054\uffe0\055\uffe0\057\uffe0\060\uffe0\062" +
    "\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\076\uffe0\110\uffe0" +
    "\111\uffe0\112\uffe0\113\uffe0\001\002\000\060\037\uffdf\041" +
    "\uffdf\042\uffdf\044\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf" +
    "\053\uffdf\054\uffdf\055\uffdf\057\uffdf\060\uffdf\062\uffdf\063" +
    "\uffdf\064\uffdf\065\uffdf\066\uffdf\076\uffdf\110\uffdf\111\uffdf" +
    "\112\uffdf\113\uffdf\001\002\000\034\030\117\033\121\034" +
    "\124\045\120\056\122\061\105\071\112\072\104\073\111" +
    "\074\114\077\106\100\115\101\116\001\002\000\046\047" +
    "\156\050\151\051\164\053\147\054\155\055\161\057\144" +
    "\060\163\062\157\063\162\064\145\065\152\066\150\076" +
    "\240\110\154\111\146\112\153\113\160\001\002\000\064" +
    "\037\uff73\041\uff73\042\uff73\044\uff73\046\uff73\047\uff73\050" +
    "\uff73\051\uff73\052\uff73\053\uff73\054\uff73\055\uff73\057\uff73" +
    "\060\uff73\062\uff73\063\uff73\064\uff73\065\uff73\066\uff73\075" +
    "\uff73\076\uff73\110\uff73\111\uff73\112\uff73\113\uff73\001\002" +
    "\000\060\037\uffca\041\uffca\042\uffca\044\uffca\046\uffca\047" +
    "\156\050\151\051\164\053\147\054\155\055\161\057\144" +
    "\060\163\062\157\063\162\064\145\065\152\066\150\076" +
    "\uffca\110\154\111\146\112\153\113\160\001\002\000\010" +
    "\037\uff95\052\uff95\075\uff95\001\002\000\004\043\132\001" +
    "\002\000\110\005\uff98\006\uff98\007\uff98\010\uff98\011\uff98" +
    "\012\uff98\013\uff98\015\uff98\017\uff98\020\uff98\021\uff98\022" +
    "\uff98\023\uff98\024\uff98\025\uff98\026\uff98\027\uff98\030\uff98" +
    "\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98\044" +
    "\uff98\045\uff98\056\uff98\061\uff98\071\uff98\072\uff98\073\uff98" +
    "\074\uff98\077\uff98\100\uff98\101\uff98\001\002\000\110\005" +
    "\uff92\006\uff92\007\uff92\010\uff92\011\uff92\012\uff92\013\uff92" +
    "\015\uff92\017\uff92\020\uff92\021\uff92\022\uff92\023\uff92\024" +
    "\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92" +
    "\033\uff92\034\uff92\035\uff92\036\uff92\044\uff92\045\uff92\056" +
    "\uff92\061\uff92\071\uff92\072\uff92\073\uff92\074\uff92\077\uff92" +
    "\100\uff92\101\uff92\001\002\000\036\030\117\033\121\034" +
    "\124\045\120\056\122\061\105\071\112\072\104\073\111" +
    "\074\114\076\uff93\077\106\100\115\101\116\001\002\000" +
    "\004\076\250\001\002\000\010\037\uff96\052\uff96\075\uff96" +
    "\001\002\000\006\037\252\041\137\001\002\000\110\005" +
    "\uff91\006\uff91\007\uff91\010\uff91\011\uff91\012\uff91\013\uff91" +
    "\015\uff91\017\uff91\020\uff91\021\uff91\022\uff91\023\uff91\024" +
    "\uff91\025\uff91\026\uff91\027\uff91\030\uff91\031\uff91\032\uff91" +
    "\033\uff91\034\uff91\035\uff91\036\uff91\044\uff91\045\uff91\056" +
    "\uff91\061\uff91\071\uff91\072\uff91\073\uff91\074\uff91\077\uff91" +
    "\100\uff91\101\uff91\001\002\000\110\005\uff97\006\uff97\007" +
    "\uff97\010\uff97\011\uff97\012\uff97\013\uff97\015\uff97\017\uff97" +
    "\020\uff97\021\uff97\022\uff97\023\uff97\024\uff97\025\uff97\026" +
    "\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033\uff97\034\uff97" +
    "\035\uff97\036\uff97\044\uff97\045\uff97\056\uff97\061\uff97\071" +
    "\uff97\072\uff97\073\uff97\074\uff97\077\uff97\100\uff97\101\uff97" +
    "\001\002\000\004\071\071\001\002\000\034\030\117\033" +
    "\121\034\124\045\120\056\122\061\105\071\112\072\104" +
    "\073\111\074\114\077\106\100\115\101\116\001\002\000" +
    "\110\005\uff8b\006\uff8b\007\uff8b\010\uff8b\011\uff8b\012\uff8b" +
    "\013\uff8b\015\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\023" +
    "\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b" +
    "\032\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b\044\uff8b\045" +
    "\uff8b\056\uff8b\061\uff8b\071\uff8b\072\uff8b\073\uff8b\074\uff8b" +
    "\077\uff8b\100\uff8b\101\uff8b\001\002\000\110\005\uff88\006" +
    "\uff88\007\uff88\010\uff88\011\uff88\012\uff88\013\uff88\015\uff88" +
    "\017\uff88\020\uff88\021\uff88\022\uff88\023\uff88\024\uff88\025" +
    "\uff88\026\uff88\027\uff88\030\uff88\031\uff88\032\uff88\033\uff88" +
    "\034\uff88\035\uff88\036\uff88\044\uff88\045\uff88\056\uff88\061" +
    "\uff88\071\uff88\072\uff88\073\uff88\074\uff88\077\uff88\100\uff88" +
    "\101\uff88\001\002\000\046\037\261\047\156\050\151\051" +
    "\164\053\147\054\155\055\161\057\144\060\163\062\157" +
    "\063\162\064\145\065\152\066\150\110\154\111\146\112" +
    "\153\113\160\001\002\000\110\005\uff8a\006\uff8a\007\uff8a" +
    "\010\uff8a\011\uff8a\012\uff8a\013\uff8a\015\uff8a\017\uff8a\020" +
    "\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a\025\uff8a\026\uff8a" +
    "\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a\035" +
    "\uff8a\036\uff8a\044\uff8a\045\uff8a\056\uff8a\061\uff8a\071\uff8a" +
    "\072\uff8a\073\uff8a\074\uff8a\077\uff8a\100\uff8a\101\uff8a\001" +
    "\002\000\110\005\uff89\006\uff89\007\uff89\010\uff89\011\uff89" +
    "\012\uff89\013\uff89\015\uff89\017\uff89\020\uff89\021\uff89\022" +
    "\uff89\023\uff89\024\uff89\025\uff89\026\uff89\027\uff89\030\uff89" +
    "\031\uff89\032\uff89\033\uff89\034\uff89\035\uff89\036\uff89\044" +
    "\uff89\045\uff89\056\uff89\061\uff89\071\uff89\072\uff89\073\uff89" +
    "\074\uff89\077\uff89\100\uff89\101\uff89\001\002\000\004\045" +
    "\264\001\002\000\016\005\016\006\047\007\040\010\024" +
    "\011\043\046\267\001\002\000\006\041\uff81\046\uff81\001" +
    "\002\000\004\071\303\001\002\000\004\043\275\001\002" +
    "\000\006\041\272\046\273\001\002\000\066\005\uff86\006" +
    "\uff86\007\uff86\010\uff86\011\uff86\012\uff86\013\uff86\015\uff86" +
    "\017\uff86\020\uff86\021\uff86\022\uff86\023\uff86\024\uff86\025" +
    "\uff86\026\uff86\027\uff86\030\uff86\031\uff86\032\uff86\033\uff86" +
    "\034\uff86\035\uff86\036\uff86\044\uff86\071\uff86\001\002\000" +
    "\014\005\016\006\047\007\040\010\024\011\043\001\002" +
    "\000\004\043\275\001\002\000\066\005\uff84\006\uff84\007" +
    "\uff84\010\uff84\011\uff84\012\uff84\013\uff84\015\uff84\017\uff84" +
    "\020\uff84\021\uff84\022\uff84\023\uff84\024\uff84\025\uff84\026" +
    "\uff84\027\uff84\030\uff84\031\uff84\032\uff84\033\uff84\034\uff84" +
    "\035\uff84\036\uff84\044\uff84\071\uff84\001\002\000\060\005" +
    "\016\006\047\007\040\010\024\011\043\012\034\013\067" +
    "\015\020\017\050\021\037\023\063\024\027\025\060\026" +
    "\032\027\045\030\041\031\062\032\015\033\053\034\052" +
    "\035\014\036\023\071\036\001\002\000\062\005\016\006" +
    "\047\007\040\010\024\011\043\012\034\013\067\015\020" +
    "\017\050\021\037\023\063\024\027\025\060\026\032\027" +
    "\045\030\041\031\062\032\015\033\053\034\052\035\014" +
    "\036\023\044\277\071\036\001\002\000\066\005\uff83\006" +
    "\uff83\007\uff83\010\uff83\011\uff83\012\uff83\013\uff83\015\uff83" +
    "\017\uff83\020\uff83\021\uff83\022\uff83\023\uff83\024\uff83\025" +
    "\uff83\026\uff83\027\uff83\030\uff83\031\uff83\032\uff83\033\uff83" +
    "\034\uff83\035\uff83\036\uff83\044\uff83\071\uff83\001\002\000" +
    "\066\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9" +
    "\013\ufff9\015\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023" +
    "\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9" +
    "\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\044\ufff9\071" +
    "\ufff9\001\002\000\006\041\uff82\046\uff82\001\002\000\066" +
    "\005\uff85\006\uff85\007\uff85\010\uff85\011\uff85\012\uff85\013" +
    "\uff85\015\uff85\017\uff85\020\uff85\021\uff85\022\uff85\023\uff85" +
    "\024\uff85\025\uff85\026\uff85\027\uff85\030\uff85\031\uff85\032" +
    "\uff85\033\uff85\034\uff85\035\uff85\036\uff85\044\uff85\071\uff85" +
    "\001\002\000\006\041\uff80\046\uff80\001\002\000\010\012" +
    "\307\013\067\071\305\001\002\000\016\052\322\067\345" +
    "\070\342\075\230\110\323\111\324\001\002\000\034\030" +
    "\117\033\121\034\124\045\120\056\122\061\105\071\112" +
    "\072\104\073\111\074\114\077\106\100\115\101\116\001" +
    "\002\000\004\013\067\001\002\000\034\030\117\033\121" +
    "\034\124\045\120\056\122\061\105\071\112\072\104\073" +
    "\111\074\114\077\106\100\115\101\116\001\002\000\046" +
    "\037\312\047\156\050\151\051\164\053\147\054\155\055" +
    "\161\057\144\060\163\062\157\063\162\064\145\065\152" +
    "\066\150\110\154\111\146\112\153\113\160\001\002\000" +
    "\004\071\313\001\002\000\014\052\322\067\326\070\321" +
    "\110\323\111\324\001\002\000\004\046\315\001\002\000" +
    "\004\043\316\001\002\000\060\005\016\006\047\007\040" +
    "\010\024\011\043\012\034\013\067\015\020\017\050\021" +
    "\037\023\063\024\027\025\060\026\032\027\045\030\041" +
    "\031\062\032\015\033\053\034\052\035\014\036\023\071" +
    "\036\001\002\000\062\005\016\006\047\007\040\010\024" +
    "\011\043\012\034\013\067\015\020\017\050\021\037\023" +
    "\063\024\027\025\060\026\032\027\045\030\041\031\062" +
    "\032\015\033\053\034\052\035\014\036\023\044\320\071" +
    "\036\001\002\000\066\005\uff9e\006\uff9e\007\uff9e\010\uff9e" +
    "\011\uff9e\012\uff9e\013\uff9e\015\uff9e\017\uff9e\020\uff9e\021" +
    "\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e" +
    "\030\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036" +
    "\uff9e\044\uff9e\071\uff9e\001\002\000\004\046\uff74\001\002" +
    "\000\034\030\uff79\033\uff79\034\uff79\045\uff79\056\uff79\061" +
    "\uff79\071\uff79\072\uff79\073\uff79\074\uff79\077\uff79\100\uff79" +
    "\101\uff79\001\002\000\004\052\331\001\002\000\004\052" +
    "\330\001\002\000\034\030\117\033\121\034\124\045\120" +
    "\056\122\061\105\071\112\072\104\073\111\074\114\077" +
    "\106\100\115\101\116\001\002\000\004\046\uff75\001\002" +
    "\000\046\046\uff76\047\156\050\151\051\164\053\147\054" +
    "\155\055\161\057\144\060\163\062\157\063\162\064\145" +
    "\065\152\066\150\110\154\111\146\112\153\113\160\001" +
    "\002\000\034\030\uff77\033\uff77\034\uff77\045\uff77\056\uff77" +
    "\061\uff77\071\uff77\072\uff77\073\uff77\074\uff77\077\uff77\100" +
    "\uff77\101\uff77\001\002\000\034\030\uff78\033\uff78\034\uff78" +
    "\045\uff78\056\uff78\061\uff78\071\uff78\072\uff78\073\uff78\074" +
    "\uff78\077\uff78\100\uff78\101\uff78\001\002\000\110\005\uff9d" +
    "\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\015" +
    "\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d" +
    "\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033" +
    "\uff9d\034\uff9d\035\uff9d\036\uff9d\044\uff9d\045\uff9d\056\uff9d" +
    "\061\uff9d\071\uff9d\072\uff9d\073\uff9d\074\uff9d\077\uff9d\100" +
    "\uff9d\101\uff9d\001\002\000\046\037\334\047\156\050\151" +
    "\051\164\053\147\054\155\055\161\057\144\060\163\062" +
    "\157\063\162\064\145\065\152\066\150\110\154\111\146" +
    "\112\153\113\160\001\002\000\004\071\313\001\002\000" +
    "\004\046\336\001\002\000\004\043\337\001\002\000\060" +
    "\005\016\006\047\007\040\010\024\011\043\012\034\013" +
    "\067\015\020\017\050\021\037\023\063\024\027\025\060" +
    "\026\032\027\045\030\041\031\062\032\015\033\053\034" +
    "\052\035\014\036\023\071\036\001\002\000\062\005\016" +
    "\006\047\007\040\010\024\011\043\012\034\013\067\015" +
    "\020\017\050\021\037\023\063\024\027\025\060\026\032" +
    "\027\045\030\041\031\062\032\015\033\053\034\052\035" +
    "\014\036\023\044\341\071\036\001\002\000\066\005\uff9f" +
    "\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\015" +
    "\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f" +
    "\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033" +
    "\uff9f\034\uff9f\035\uff9f\036\uff9f\044\uff9f\071\uff9f\001\002" +
    "\000\004\037\354\001\002\000\012\052\322\075\236\110" +
    "\323\111\324\001\002\000\034\030\117\033\121\034\124" +
    "\045\120\056\122\061\105\071\112\072\104\073\111\074" +
    "\114\077\106\100\115\101\116\001\002\000\004\037\346" +
    "\001\002\000\110\005\uff6f\006\uff6f\007\uff6f\010\uff6f\011" +
    "\uff6f\012\uff6f\013\uff6f\015\uff6f\017\uff6f\020\uff6f\021\uff6f" +
    "\022\uff6f\023\uff6f\024\uff6f\025\uff6f\026\uff6f\027\uff6f\030" +
    "\uff6f\031\uff6f\032\uff6f\033\uff6f\034\uff6f\035\uff6f\036\uff6f" +
    "\044\uff6f\045\uff6f\056\uff6f\061\uff6f\071\uff6f\072\uff6f\073" +
    "\uff6f\074\uff6f\077\uff6f\100\uff6f\101\uff6f\001\002\000\046" +
    "\037\350\047\156\050\151\051\164\053\147\054\155\055" +
    "\161\057\144\060\163\062\157\063\162\064\145\065\152" +
    "\066\150\110\154\111\146\112\153\113\160\001\002\000" +
    "\110\005\uff71\006\uff71\007\uff71\010\uff71\011\uff71\012\uff71" +
    "\013\uff71\015\uff71\017\uff71\020\uff71\021\uff71\022\uff71\023" +
    "\uff71\024\uff71\025\uff71\026\uff71\027\uff71\030\uff71\031\uff71" +
    "\032\uff71\033\uff71\034\uff71\035\uff71\036\uff71\044\uff71\045" +
    "\uff71\056\uff71\061\uff71\071\uff71\072\uff71\073\uff71\074\uff71" +
    "\077\uff71\100\uff71\101\uff71\001\002\000\034\030\117\033" +
    "\121\034\124\045\120\056\122\061\105\071\112\072\104" +
    "\073\111\074\114\077\106\100\115\101\116\001\002\000" +
    "\046\037\353\047\156\050\151\051\164\053\147\054\155" +
    "\055\161\057\144\060\163\062\157\063\162\064\145\065" +
    "\152\066\150\110\154\111\146\112\153\113\160\001\002" +
    "\000\110\005\uff70\006\uff70\007\uff70\010\uff70\011\uff70\012" +
    "\uff70\013\uff70\015\uff70\017\uff70\020\uff70\021\uff70\022\uff70" +
    "\023\uff70\024\uff70\025\uff70\026\uff70\027\uff70\030\uff70\031" +
    "\uff70\032\uff70\033\uff70\034\uff70\035\uff70\036\uff70\044\uff70" +
    "\045\uff70\056\uff70\061\uff70\071\uff70\072\uff70\073\uff70\074" +
    "\uff70\077\uff70\100\uff70\101\uff70\001\002\000\110\005\uff6e" +
    "\006\uff6e\007\uff6e\010\uff6e\011\uff6e\012\uff6e\013\uff6e\015" +
    "\uff6e\017\uff6e\020\uff6e\021\uff6e\022\uff6e\023\uff6e\024\uff6e" +
    "\025\uff6e\026\uff6e\027\uff6e\030\uff6e\031\uff6e\032\uff6e\033" +
    "\uff6e\034\uff6e\035\uff6e\036\uff6e\044\uff6e\045\uff6e\056\uff6e" +
    "\061\uff6e\071\uff6e\072\uff6e\073\uff6e\074\uff6e\077\uff6e\100" +
    "\uff6e\101\uff6e\001\002\000\034\030\117\033\121\034\124" +
    "\045\120\056\122\061\105\071\112\072\104\073\111\074" +
    "\114\077\106\100\115\101\116\001\002\000\006\041\206" +
    "\046\357\001\002\000\004\037\360\001\002\000\066\005" +
    "\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac" +
    "\015\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024" +
    "\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac" +
    "\033\uffac\034\uffac\035\uffac\036\uffac\044\uffac\071\uffac\001" +
    "\002\000\060\005\016\006\047\007\040\010\024\011\043" +
    "\012\034\013\067\015\020\017\050\021\037\023\063\024" +
    "\027\025\060\026\032\027\045\030\041\031\062\032\015" +
    "\033\053\034\052\035\014\036\023\071\036\001\002\000" +
    "\062\005\016\006\047\007\040\010\024\011\043\012\034" +
    "\013\067\015\020\017\050\021\037\023\063\024\027\025" +
    "\060\026\032\027\045\030\041\031\062\032\015\033\053" +
    "\034\052\035\014\036\023\044\363\071\036\001\002\000" +
    "\004\024\364\001\002\000\004\045\365\001\002\000\034" +
    "\030\117\033\121\034\124\045\120\056\122\061\105\071" +
    "\112\072\104\073\111\074\114\077\106\100\115\101\116" +
    "\001\002\000\046\046\367\047\156\050\151\051\164\053" +
    "\147\054\155\055\161\057\144\060\163\062\157\063\162" +
    "\064\145\065\152\066\150\110\154\111\146\112\153\113" +
    "\160\001\002\000\004\037\370\001\002\000\066\005\uffa1" +
    "\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\015" +
    "\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1" +
    "\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033" +
    "\uffa1\034\uffa1\035\uffa1\036\uffa1\044\uffa1\071\uffa1\001\002" +
    "\000\006\043\132\071\372\001\002\000\004\046\376\001" +
    "\002\000\006\041\137\046\374\001\002\000\004\037\375" +
    "\001\002\000\066\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011" +
    "\uffaf\012\uffaf\013\uffaf\015\uffaf\017\uffaf\020\uffaf\021\uffaf" +
    "\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030" +
    "\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf" +
    "\044\uffaf\071\uffaf\001\002\000\004\037\377\001\002\000" +
    "\066\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0" +
    "\013\uffb0\015\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023" +
    "\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0" +
    "\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\044\uffb0\071" +
    "\uffb0\001\002\000\010\043\132\071\u0101\074\u0103\001\002" +
    "\000\004\046\u0108\001\002\000\006\041\137\046\u0106\001" +
    "\002\000\004\046\u0104\001\002\000\004\037\u0105\001\002" +
    "\000\066\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012" +
    "\uffa8\013\uffa8\015\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8" +
    "\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031" +
    "\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\044\uffa8" +
    "\071\uffa8\001\002\000\004\037\u0107\001\002\000\066\005" +
    "\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9" +
    "\015\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024" +
    "\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9" +
    "\033\uffa9\034\uffa9\035\uffa9\036\uffa9\044\uffa9\071\uffa9\001" +
    "\002\000\004\037\u0109\001\002\000\066\005\uffaa\006\uffaa" +
    "\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\015\uffaa\017" +
    "\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa" +
    "\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034" +
    "\uffaa\035\uffaa\036\uffaa\044\uffaa\071\uffaa\001\002\000\034" +
    "\030\117\033\121\034\124\045\120\056\122\061\105\071" +
    "\112\072\104\073\111\074\114\077\106\100\115\101\116" +
    "\001\002\000\046\046\u010c\047\156\050\151\051\164\053" +
    "\147\054\155\055\161\057\144\060\163\062\157\063\162" +
    "\064\145\065\152\066\150\110\154\111\146\112\153\113" +
    "\160\001\002\000\004\043\u010d\001\002\000\006\020\u0112" +
    "\022\u010e\001\002\000\004\042\u0119\001\002\000\010\020" +
    "\u0112\022\u010e\044\u0118\001\002\000\010\020\uff6a\022\uff6a" +
    "\044\uff6a\001\002\000\010\020\uff6b\022\uff6b\044\uff6b\001" +
    "\002\000\034\030\117\033\121\034\124\045\120\056\122" +
    "\061\105\071\112\072\104\073\111\074\114\077\106\100" +
    "\115\101\116\001\002\000\046\042\u0114\047\156\050\151" +
    "\051\164\053\147\054\155\055\161\057\144\060\163\062" +
    "\157\063\162\064\145\065\152\066\150\110\154\111\146" +
    "\112\153\113\160\001\002\000\060\005\016\006\047\007" +
    "\040\010\024\011\043\012\034\013\067\015\020\017\050" +
    "\021\037\023\063\024\027\025\060\026\032\027\045\030" +
    "\041\031\062\032\015\033\053\034\052\035\014\036\023" +
    "\071\036\001\002\000\066\005\016\006\047\007\040\010" +
    "\024\011\043\012\034\013\067\015\020\017\050\020\uff68" +
    "\021\037\022\uff68\023\063\024\027\025\060\026\032\027" +
    "\045\030\041\031\062\032\015\033\053\034\052\035\014" +
    "\036\023\044\uff68\071\036\001\002\000\010\020\uff69\022" +
    "\uff69\044\uff69\001\002\000\010\020\uff6c\022\uff6c\044\uff6c" +
    "\001\002\000\066\005\uff6d\006\uff6d\007\uff6d\010\uff6d\011" +
    "\uff6d\012\uff6d\013\uff6d\015\uff6d\017\uff6d\020\uff6d\021\uff6d" +
    "\022\uff6d\023\uff6d\024\uff6d\025\uff6d\026\uff6d\027\uff6d\030" +
    "\uff6d\031\uff6d\032\uff6d\033\uff6d\034\uff6d\035\uff6d\036\uff6d" +
    "\044\uff6d\071\uff6d\001\002\000\060\005\016\006\047\007" +
    "\040\010\024\011\043\012\034\013\067\015\020\017\050" +
    "\021\037\023\063\024\027\025\060\026\032\027\045\030" +
    "\041\031\062\032\015\033\053\034\052\035\014\036\023" +
    "\071\036\001\002\000\066\005\016\006\047\007\040\010" +
    "\024\011\043\012\034\013\067\015\020\017\050\020\uff67" +
    "\021\037\022\uff67\023\063\024\027\025\060\026\032\027" +
    "\045\030\041\031\062\032\015\033\053\034\052\035\014" +
    "\036\023\044\uff67\071\036\001\002\000\046\037\u011d\047" +
    "\156\050\151\051\164\053\147\054\155\055\161\057\144" +
    "\060\163\062\157\063\162\064\145\065\152\066\150\110" +
    "\154\111\146\112\153\113\160\001\002\000\066\005\uffe3" +
    "\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\015" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3" +
    "\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033" +
    "\uffe3\034\uffe3\035\uffe3\036\uffe3\044\uffe3\071\uffe3\001\002" +
    "\000\066\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012" +
    "\uffe4\013\uffe4\015\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4" +
    "\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\044\uffe4" +
    "\071\uffe4\001\002\000\034\030\117\033\121\034\124\045" +
    "\120\056\122\061\105\071\112\072\104\073\111\074\114" +
    "\077\106\100\115\101\116\001\002\000\006\041\206\046" +
    "\u0120\001\002\000\004\037\u0121\001\002\000\066\005\uffb9" +
    "\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\015" +
    "\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9" +
    "\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033" +
    "\uffb9\034\uffb9\035\uffb9\036\uffb9\044\uffb9\071\uffb9\001\002" +
    "\000\036\030\117\033\121\034\124\045\120\046\u0124\056" +
    "\122\061\105\071\112\072\104\073\111\074\114\077\106" +
    "\100\115\101\116\001\002\000\006\041\206\046\u0126\001" +
    "\002\000\004\037\u0125\001\002\000\066\005\uffe2\006\uffe2" +
    "\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\015\uffe2\017" +
    "\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034" +
    "\uffe2\035\uffe2\036\uffe2\044\uffe2\071\uffe2\001\002\000\004" +
    "\037\u0127\001\002\000\066\005\uffe1\006\uffe1\007\uffe1\010" +
    "\uffe1\011\uffe1\012\uffe1\013\uffe1\015\uffe1\017\uffe1\020\uffe1" +
    "\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\036\uffe1\044\uffe1\071\uffe1\001\002\000\004\071\u0129\001" +
    "\002\000\004\045\u012a\001\002\000\016\005\016\006\047" +
    "\007\040\010\024\011\043\046\267\001\002\000\066\005" +
    "\uff87\006\uff87\007\uff87\010\uff87\011\uff87\012\uff87\013\uff87" +
    "\015\uff87\017\uff87\020\uff87\021\uff87\022\uff87\023\uff87\024" +
    "\uff87\025\uff87\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87" +
    "\033\uff87\034\uff87\035\uff87\036\uff87\044\uff87\071\uff87\001" +
    "\002\000\034\030\117\033\121\034\124\045\120\056\122" +
    "\061\105\071\112\072\104\073\111\074\114\077\106\100" +
    "\115\101\116\001\002\000\046\046\u012e\047\156\050\151" +
    "\051\164\053\147\054\155\055\161\057\144\060\163\062" +
    "\157\063\162\064\145\065\152\066\150\110\154\111\146" +
    "\112\153\113\160\001\002\000\004\043\u012f\001\002\000" +
    "\060\005\016\006\047\007\040\010\024\011\043\012\034" +
    "\013\067\015\020\017\050\021\037\023\063\024\027\025" +
    "\060\026\032\027\045\030\041\031\062\032\015\033\053" +
    "\034\052\035\014\036\023\071\036\001\002\000\062\005" +
    "\016\006\047\007\040\010\024\011\043\012\034\013\067" +
    "\015\020\017\050\021\037\023\063\024\027\025\060\026" +
    "\032\027\045\030\041\031\062\032\015\033\053\034\052" +
    "\035\014\036\023\044\u0131\071\036\001\002\000\066\005" +
    "\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0" +
    "\015\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024" +
    "\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0" +
    "\033\uffa0\034\uffa0\035\uffa0\036\uffa0\044\uffa0\071\uffa0\001" +
    "\002\000\070\005\uff64\006\uff64\007\uff64\010\uff64\011\uff64" +
    "\012\uff64\013\uff64\015\uff64\016\u0135\017\uff64\020\uff64\021" +
    "\uff64\022\uff64\023\uff64\024\uff64\025\uff64\026\uff64\027\uff64" +
    "\030\uff64\031\uff64\032\uff64\033\uff64\034\uff64\035\uff64\036" +
    "\uff64\044\uff64\071\uff64\001\002\000\066\005\uff65\006\uff65" +
    "\007\uff65\010\uff65\011\uff65\012\uff65\013\uff65\015\uff65\017" +
    "\uff65\020\uff65\021\uff65\022\uff65\023\uff65\024\uff65\025\uff65" +
    "\026\uff65\027\uff65\030\uff65\031\uff65\032\uff65\033\uff65\034" +
    "\uff65\035\uff65\036\uff65\044\uff65\071\uff65\001\002\000\070" +
    "\005\uff5e\006\uff5e\007\uff5e\010\uff5e\011\uff5e\012\uff5e\013" +
    "\uff5e\015\uff5e\016\uff5e\017\uff5e\020\uff5e\021\uff5e\022\uff5e" +
    "\023\uff5e\024\uff5e\025\uff5e\026\uff5e\027\uff5e\030\uff5e\031" +
    "\uff5e\032\uff5e\033\uff5e\034\uff5e\035\uff5e\036\uff5e\044\uff5e" +
    "\071\uff5e\001\002\000\006\015\u0136\043\u0137\001\002\000" +
    "\004\045\u013a\001\002\000\060\005\016\006\047\007\040" +
    "\010\024\011\043\012\034\013\067\015\020\017\050\021" +
    "\037\023\063\024\027\025\060\026\032\027\045\030\041" +
    "\031\062\032\015\033\053\034\052\035\014\036\023\071" +
    "\036\001\002\000\062\005\016\006\047\007\040\010\024" +
    "\011\043\012\034\013\067\015\020\017\050\021\037\023" +
    "\063\024\027\025\060\026\032\027\045\030\041\031\062" +
    "\032\015\033\053\034\052\035\014\036\023\044\u0139\071" +
    "\036\001\002\000\066\005\uff61\006\uff61\007\uff61\010\uff61" +
    "\011\uff61\012\uff61\013\uff61\015\uff61\017\uff61\020\uff61\021" +
    "\uff61\022\uff61\023\uff61\024\uff61\025\uff61\026\uff61\027\uff61" +
    "\030\uff61\031\uff61\032\uff61\033\uff61\034\uff61\035\uff61\036" +
    "\uff61\044\uff61\071\uff61\001\002\000\034\030\117\033\121" +
    "\034\124\045\120\056\122\061\105\071\112\072\104\073" +
    "\111\074\114\077\106\100\115\101\116\001\002\000\046" +
    "\046\u013c\047\156\050\151\051\164\053\147\054\155\055" +
    "\161\057\144\060\163\062\157\063\162\064\145\065\152" +
    "\066\150\110\154\111\146\112\153\113\160\001\002\000" +
    "\004\043\u013d\001\002\000\060\005\016\006\047\007\040" +
    "\010\024\011\043\012\034\013\067\015\020\017\050\021" +
    "\037\023\063\024\027\025\060\026\032\027\045\030\041" +
    "\031\062\032\015\033\053\034\052\035\014\036\023\071" +
    "\036\001\002\000\062\005\016\006\047\007\040\010\024" +
    "\011\043\012\034\013\067\015\020\017\050\021\037\023" +
    "\063\024\027\025\060\026\032\027\045\030\041\031\062" +
    "\032\015\033\053\034\052\035\014\036\023\044\u013f\071" +
    "\036\001\002\000\070\005\uff60\006\uff60\007\uff60\010\uff60" +
    "\011\uff60\012\uff60\013\uff60\015\uff60\016\uff60\017\uff60\020" +
    "\uff60\021\uff60\022\uff60\023\uff60\024\uff60\025\uff60\026\uff60" +
    "\027\uff60\030\uff60\031\uff60\032\uff60\033\uff60\034\uff60\035" +
    "\uff60\036\uff60\044\uff60\071\uff60\001\002\000\066\005\uff63" +
    "\006\uff63\007\uff63\010\uff63\011\uff63\012\uff63\013\uff63\015" +
    "\uff63\017\uff63\020\uff63\021\uff63\022\uff63\023\uff63\024\uff63" +
    "\025\uff63\026\uff63\027\uff63\030\uff63\031\uff63\032\uff63\033" +
    "\uff63\034\uff63\035\uff63\036\uff63\044\uff63\071\uff63\001\002" +
    "\000\070\005\uff5f\006\uff5f\007\uff5f\010\uff5f\011\uff5f\012" +
    "\uff5f\013\uff5f\015\uff5f\016\uff5f\017\uff5f\020\uff5f\021\uff5f" +
    "\022\uff5f\023\uff5f\024\uff5f\025\uff5f\026\uff5f\027\uff5f\030" +
    "\uff5f\031\uff5f\032\uff5f\033\uff5f\034\uff5f\035\uff5f\036\uff5f" +
    "\044\uff5f\071\uff5f\001\002\000\004\046\u0143\001\002\000" +
    "\004\043\u0144\001\002\000\060\005\016\006\047\007\040" +
    "\010\024\011\043\012\034\013\067\015\020\017\050\021" +
    "\037\023\063\024\027\025\060\026\032\027\045\030\041" +
    "\031\062\032\015\033\053\034\052\035\014\036\023\071" +
    "\036\001\002\000\062\005\016\006\047\007\040\010\024" +
    "\011\043\012\034\013\067\015\020\017\050\021\037\023" +
    "\063\024\027\025\060\026\032\027\045\030\041\031\062" +
    "\032\015\033\053\034\052\035\014\036\023\044\u0146\071" +
    "\036\001\002\000\066\005\uffde\006\uffde\007\uffde\010\uffde" +
    "\011\uffde\012\uffde\013\uffde\015\uffde\017\uffde\020\uffde\021" +
    "\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde" +
    "\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036" +
    "\uffde\044\uffde\071\uffde\001\002\000\004\002\uffff\001\002" +
    "\000\034\030\117\033\121\034\124\045\120\056\122\061" +
    "\105\071\112\072\104\073\111\074\114\077\106\100\115" +
    "\101\116\001\002\000\046\046\u014a\047\156\050\151\051" +
    "\164\053\147\054\155\055\161\057\144\060\163\062\157" +
    "\063\162\064\145\065\152\066\150\110\154\111\146\112" +
    "\153\113\160\001\002\000\004\043\u014b\001\002\000\060" +
    "\005\016\006\047\007\040\010\024\011\043\012\034\013" +
    "\067\015\020\017\050\021\037\023\063\024\027\025\060" +
    "\026\032\027\045\030\041\031\062\032\015\033\053\034" +
    "\052\035\014\036\023\071\036\001\002\000\062\005\016" +
    "\006\047\007\040\010\024\011\043\012\034\013\067\015" +
    "\020\017\050\021\037\023\063\024\027\025\060\026\032" +
    "\027\045\030\041\031\062\032\015\033\053\034\052\035" +
    "\014\036\023\044\u014d\071\036\001\002\000\070\005\uff62" +
    "\006\uff62\007\uff62\010\uff62\011\uff62\012\uff62\013\uff62\015" +
    "\uff62\016\uff62\017\uff62\020\uff62\021\uff62\022\uff62\023\uff62" +
    "\024\uff62\025\uff62\026\uff62\027\uff62\030\uff62\031\uff62\032" +
    "\uff62\033\uff62\034\uff62\035\uff62\036\uff62\044\uff62\071\uff62" +
    "\001\002\000\006\043\132\071\u014f\001\002\000\004\041" +
    "\u015a\001\002\000\004\041\u0151\001\002\000\016\043\140" +
    "\103\u0154\104\u0153\105\u0155\106\u0156\107\u0157\001\002\000" +
    "\004\046\u0158\001\002\000\004\046\uffb3\001\002\000\004" +
    "\046\uffb4\001\002\000\004\046\uffb2\001\002\000\004\046" +
    "\uffb1\001\002\000\004\046\uffb5\001\002\000\004\037\u0159" +
    "\001\002\000\066\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011" +
    "\uffb7\012\uffb7\013\uffb7\015\uffb7\017\uffb7\020\uffb7\021\uffb7" +
    "\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030" +
    "\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7" +
    "\044\uffb7\071\uffb7\001\002\000\014\103\u0154\104\u0153\105" +
    "\u0155\106\u0156\107\u0157\001\002\000\004\046\u015c\001\002" +
    "\000\004\037\u015d\001\002\000\066\005\uffb6\006\uffb6\007" +
    "\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\015\uffb6\017\uffb6" +
    "\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026" +
    "\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6" +
    "\035\uffb6\036\uffb6\044\uffb6\071\uffb6\001\002\000\034\030" +
    "\117\033\121\034\124\045\120\056\122\061\105\071\112" +
    "\072\104\073\111\074\114\077\106\100\115\101\116\001" +
    "\002\000\006\041\206\046\u0160\001\002\000\004\037\u0161" +
    "\001\002\000\066\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011" +
    "\uffbc\012\uffbc\013\uffbc\015\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030" +
    "\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc" +
    "\044\uffbc\071\uffbc\001\002\000\006\004\u0163\043\ufffe\001" +
    "\002\000\004\071\u0165\001\002\000\004\043\ufffd\001\002" +
    "\000\006\041\ufffa\043\ufffa\001\002\000\006\041\u0167\043" +
    "\ufffc\001\002\000\004\071\u0168\001\002\000\006\041\ufffb" +
    "\043\ufffb\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0167\000\010\002\003\100\004\101\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\003\020\004\034\005\064\006\045\007" +
    "\054\011\024\013\053\024\010\025\060\026\030\034\043" +
    "\035\012\041\021\044\055\045\027\046\041\050\056\051" +
    "\032\057\065\062\050\066\063\067\011\073\016\074\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\004\277\005" +
    "\064\006\045\007\054\011\024\013\053\024\010\025\060" +
    "\026\030\034\043\035\012\041\021\044\055\045\027\046" +
    "\041\050\056\051\032\057\065\062\050\066\063\067\011" +
    "\073\016\074\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\075\u0132" +
    "\076\u0133\077\u0131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\057\u0127\062\331\001\001\000\002\001\001\000" +
    "\006\030\342\065\343\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\010\112\022\u011a\033\102" +
    "\037\124\042\122\043\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\057\067\001\001\000\004\063\071\001\001\000\004\064" +
    "\255\001\001\000\002\001\001\000\004\015\074\001\001" +
    "\000\006\016\076\017\077\001\001\000\002\001\001\000" +
    "\004\015\252\001\001\000\002\001\001\000\004\020\243" +
    "\001\001\000\020\010\112\021\101\022\107\033\102\037" +
    "\124\042\122\043\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\010\112\022\240\033" +
    "\102\037\124\042\122\043\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\225\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\010\112\022\220\033\102\037\124\042\122\043\106" +
    "\001\001\000\002\001\001\000\016\010\112\022\212\033" +
    "\102\037\124\042\122\043\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\010\112\022\133\023\132\031\135\032\134\033" +
    "\102\037\124\042\122\043\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\010\112\022\133\023\132\031\135" +
    "\032\140\033\102\037\124\042\122\043\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\010\112\022\204\033\102\037\124\042\122\043\106\001" +
    "\001\000\016\010\112\022\203\033\102\037\124\042\122" +
    "\043\106\001\001\000\016\010\112\022\202\033\102\037" +
    "\124\042\122\043\106\001\001\000\016\010\112\022\201" +
    "\033\102\037\124\042\122\043\106\001\001\000\016\010" +
    "\112\022\200\033\102\037\124\042\122\043\106\001\001" +
    "\000\016\010\112\022\177\033\102\037\124\042\122\043" +
    "\106\001\001\000\016\010\112\022\176\033\102\037\124" +
    "\042\122\043\106\001\001\000\016\010\112\022\175\033" +
    "\102\037\124\042\122\043\106\001\001\000\016\010\112" +
    "\022\174\033\102\037\124\042\122\043\106\001\001\000" +
    "\016\010\112\022\173\033\102\037\124\042\122\043\106" +
    "\001\001\000\016\010\112\022\172\033\102\037\124\042" +
    "\122\043\106\001\001\000\016\010\112\022\171\033\102" +
    "\037\124\042\122\043\106\001\001\000\016\010\112\022" +
    "\170\033\102\037\124\042\122\043\106\001\001\000\016" +
    "\010\112\022\167\033\102\037\124\042\122\043\106\001" +
    "\001\000\016\010\112\022\166\033\102\037\124\042\122" +
    "\043\106\001\001\000\016\010\112\022\165\033\102\037" +
    "\124\042\122\043\106\001\001\000\016\010\112\022\164" +
    "\033\102\037\124\042\122\043\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\010\112\022\206\033\102\037\124\042\122\043" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\215\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\010\112\022\133\023\223\033\102\037\124" +
    "\042\122\043\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\010\112\022\133\023\232" +
    "\033\102\037\124\042\122\043\106\001\001\000\016\010" +
    "\112\022\230\033\102\037\124\042\122\043\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\010\112\022\236" +
    "\033\102\037\124\042\122\043\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\250\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\010\112\021\246\022\107\033\102\037\124" +
    "\042\122\043\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\063\261\001\001\000\016\010\112\022\257\033" +
    "\102\037\124\042\122\043\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\052\270\054\267" +
    "\055\264\057\265\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\301\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\055\300\057\265\001\001\000\004\053" +
    "\273\001\001\000\002\001\001\000\062\003\275\004\034" +
    "\005\064\006\045\007\054\011\024\013\053\024\010\025" +
    "\060\026\030\034\043\035\012\041\021\044\055\045\027" +
    "\046\041\050\056\051\032\057\065\062\050\066\063\067" +
    "\011\073\016\074\025\001\001\000\060\004\277\005\064" +
    "\006\045\007\054\011\024\013\053\024\010\025\060\026" +
    "\030\034\043\035\012\041\021\044\055\045\027\046\041" +
    "\050\056\051\032\057\065\062\050\066\063\067\011\073" +
    "\016\074\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\050\305\062\050\066\307\001\001\000\006\030\342" +
    "\065\343\001\001\000\016\010\112\022\332\033\102\037" +
    "\124\042\122\043\106\001\001\000\004\062\331\001\001" +
    "\000\016\010\112\022\310\033\102\037\124\042\122\043" +
    "\106\001\001\000\002\001\001\000\004\047\313\001\001" +
    "\000\004\065\324\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\003\316\004\034\005\064\006\045\007\054" +
    "\011\024\013\053\024\010\025\060\026\030\034\043\035" +
    "\012\041\021\044\055\045\027\046\041\050\056\051\032" +
    "\057\065\062\050\066\063\067\011\073\016\074\025\001" +
    "\001\000\060\004\277\005\064\006\045\007\054\011\024" +
    "\013\053\024\010\025\060\026\030\034\043\035\012\041" +
    "\021\044\055\045\027\046\041\050\056\051\032\057\065" +
    "\062\050\066\063\067\011\073\016\074\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\010\112\022\326\033" +
    "\102\037\124\042\122\043\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\334\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\003\337\004" +
    "\034\005\064\006\045\007\054\011\024\013\053\024\010" +
    "\025\060\026\030\034\043\035\012\041\021\044\055\045" +
    "\027\046\041\050\056\051\032\057\065\062\050\066\063" +
    "\067\011\073\016\074\025\001\001\000\060\004\277\005" +
    "\064\006\045\007\054\011\024\013\053\024\010\025\060" +
    "\026\030\034\043\035\012\041\021\044\055\045\027\046" +
    "\041\050\056\051\032\057\065\062\050\066\063\067\011" +
    "\073\016\074\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\065\350\001\001\000\016\010\112\022\346" +
    "\033\102\037\124\042\122\043\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\010\112\022\351\033\102\037\124\042\122\043" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\010\112\022\133\023\355\033\102\037" +
    "\124\042\122\043\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\003\361\004\034\005" +
    "\064\006\045\007\054\011\024\013\053\024\010\025\060" +
    "\026\030\034\043\035\012\041\021\044\055\045\027\046" +
    "\041\050\056\051\032\057\065\062\050\066\063\067\011" +
    "\073\016\074\025\001\001\000\060\004\277\005\064\006" +
    "\045\007\054\011\024\013\053\024\010\025\060\026\030" +
    "\034\043\035\012\041\021\044\055\045\027\046\041\050" +
    "\056\051\032\057\065\062\050\066\063\067\011\073\016" +
    "\074\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\010\112\022\365\033\102\037\124\042\122\043\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\372\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\u0101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\010\112\022" +
    "\u010a\033\102\037\124\042\122\043\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\070\u010e\071\u0110\072" +
    "\u010f\001\001\000\002\001\001\000\006\071\u0116\072\u0115" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\010" +
    "\112\022\u0112\033\102\037\124\042\122\043\106\001\001" +
    "\000\002\001\001\000\062\003\u0114\004\034\005\064\006" +
    "\045\007\054\011\024\013\053\024\010\025\060\026\030" +
    "\034\043\035\012\041\021\044\055\045\027\046\041\050" +
    "\056\051\032\057\065\062\050\066\063\067\011\073\016" +
    "\074\025\001\001\000\060\004\277\005\064\006\045\007" +
    "\054\011\024\013\053\024\010\025\060\026\030\034\043" +
    "\035\012\041\021\044\055\045\027\046\041\050\056\051" +
    "\032\057\065\062\050\066\063\067\011\073\016\074\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\003\u0119\004\034\005\064\006\045\007\054" +
    "\011\024\013\053\024\010\025\060\026\030\034\043\035" +
    "\012\041\021\044\055\045\027\046\041\050\056\051\032" +
    "\057\065\062\050\066\063\067\011\073\016\074\025\001" +
    "\001\000\060\004\277\005\064\006\045\007\054\011\024" +
    "\013\053\024\010\025\060\026\030\034\043\035\012\041" +
    "\021\044\055\045\027\046\041\050\056\051\032\057\065" +
    "\062\050\066\063\067\011\073\016\074\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\010\112\022\133\023\u011e\033\102\037\124\042\122\043" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\010\112\022\133\023\u0122\033\102\037" +
    "\124\042\122\043\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\052\u012a" +
    "\054\267\055\264\057\265\001\001\000\002\001\001\000" +
    "\016\010\112\022\u012c\033\102\037\124\042\122\043\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\003" +
    "\u012f\004\034\005\064\006\045\007\054\011\024\013\053" +
    "\024\010\025\060\026\030\034\043\035\012\041\021\044" +
    "\055\045\027\046\041\050\056\051\032\057\065\062\050" +
    "\066\063\067\011\073\016\074\025\001\001\000\060\004" +
    "\277\005\064\006\045\007\054\011\024\013\053\024\010" +
    "\025\060\026\030\034\043\035\012\041\021\044\055\045" +
    "\027\046\041\050\056\051\032\057\065\062\050\066\063" +
    "\067\011\073\016\074\025\001\001\000\002\001\001\000" +
    "\006\075\u013f\076\u0140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\003" +
    "\u0137\004\034\005\064\006\045\007\054\011\024\013\053" +
    "\024\010\025\060\026\030\034\043\035\012\041\021\044" +
    "\055\045\027\046\041\050\056\051\032\057\065\062\050" +
    "\066\063\067\011\073\016\074\025\001\001\000\060\004" +
    "\277\005\064\006\045\007\054\011\024\013\053\024\010" +
    "\025\060\026\030\034\043\035\012\041\021\044\055\045" +
    "\027\046\041\050\056\051\032\057\065\062\050\066\063" +
    "\067\011\073\016\074\025\001\001\000\002\001\001\000" +
    "\016\010\112\022\u013a\033\102\037\124\042\122\043\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\003" +
    "\u013d\004\034\005\064\006\045\007\054\011\024\013\053" +
    "\024\010\025\060\026\030\034\043\035\012\041\021\044" +
    "\055\045\027\046\041\050\056\051\032\057\065\062\050" +
    "\066\063\067\011\073\016\074\025\001\001\000\060\004" +
    "\277\005\064\006\045\007\054\011\024\013\053\024\010" +
    "\025\060\026\030\034\043\035\012\041\021\044\055\045" +
    "\027\046\041\050\056\051\032\057\065\062\050\066\063" +
    "\067\011\073\016\074\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\003\u0144\004\034\005\064\006\045\007" +
    "\054\011\024\013\053\024\010\025\060\026\030\034\043" +
    "\035\012\041\021\044\055\045\027\046\041\050\056\051" +
    "\032\057\065\062\050\066\063\067\011\073\016\074\025" +
    "\001\001\000\060\004\277\005\064\006\045\007\054\011" +
    "\024\013\053\024\010\025\060\026\030\034\043\035\012" +
    "\041\021\044\055\045\027\046\041\050\056\051\032\057" +
    "\065\062\050\066\063\067\011\073\016\074\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\010\112\022" +
    "\u0148\033\102\037\124\042\122\043\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\003\u014b\004\034\005" +
    "\064\006\045\007\054\011\024\013\053\024\010\025\060" +
    "\026\030\034\043\035\012\041\021\044\055\045\027\046" +
    "\041\050\056\051\032\057\065\062\050\066\063\067\011" +
    "\073\016\074\025\001\001\000\060\004\277\005\064\006" +
    "\045\007\054\011\024\013\053\024\010\025\060\026\030" +
    "\034\043\035\012\041\021\044\055\045\027\046\041\050" +
    "\056\051\032\057\065\062\050\066\063\067\011\073\016" +
    "\074\025\001\001\000\002\001\001\000\004\031\u014f\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\u0151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\u015a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\010\112\022\133\023\u015e\033\102\037\124\042" +
    "\122\043\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\102\u0163\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\103\u0165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    private NodoAST raiz;

    private ArrayList<Object> comList;
    private ArrayList<Object> comList2;

    public parser(java_cup.runtime.Scanner s, String param){
        this(s);
        System.out.println("Parametro desde parser: " + param);
    }

    public void syntax_error(Symbol s){
        System.out.println("Error sintactico: " + s.value.toString() + " Linea:" + s.right + " Columna:" + s.left + ". ");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.out.println("No se pudo recuperar el analizador." + " Linea:" + s.right + " Columna:" + s.left + "\n");
    }

    public NodoAST getRaiz(){
        return this.raiz;
    }

    private ArrayList<Object> unirArrayList(ArrayList<Object> lista1, ArrayList<Object> lista2){
        ArrayList<Object> listaUnida = new ArrayList<>(lista1);
        listaUnida.addAll(lista2);
        return listaUnida;
    }

    private void cambiarRaiz(NodoAST nodo){
        this.raiz = nodo;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= definir_pista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // definir_pista ::= add_extender LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); cambiarRaiz(new NodoAST("S",comList,"sus_linea")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definir_pista",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // add_extender ::= PISTA ID 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("ADD_EXTENDER", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_extender",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // add_extender ::= PISTA ID extender 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("ADD_EXTENDER", unirArrayList(comList, ((NodoAST)h2).getHijos()), "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_extender",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // extender ::= EXTIENDE ID lista_extiende 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("EXTENDER", unirArrayList(comList, ((NodoAST)h2).getHijos()), "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extender",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_extiende ::= lista_extiende COMA ID 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h2); RESULT = new NodoAST("LISTA_EXTIENDE", unirArrayList(comList, ((NodoAST)h1).getHijos()), "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_extiende",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista_extiende ::= 
            {
              Object RESULT =null;
		 comList=new ArrayList<>(); RESULT = new NodoAST("LISTA_EXTIENDE", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_extiende",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= instrucciones instruccion 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoAST("INSTRUCCIONES", unirArrayList(((NodoAST)h1).getHijos(), ((NodoAST)h2).getHijos()), "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instrucciones ::= instruccion 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoAST("INSTRUCCIONES", ((NodoAST)h1).getHijos(), "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= declaracion_variable 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= llamada_funcion 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= declaracion_funcion 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= asignacion 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= mensaje 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= instruccion_si 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= switch 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= para 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= mientras 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= hacer_mientras 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= continuar 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= reproducir 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= esperar 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= ordenarfun 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= sumarizarfun 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= longitud 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= principal 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= retornar 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= salir 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // retornar ::= RETORNA exp P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("RETORNAR", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("retornar",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // retornar ::= RETORNA P_COMA 
            {
              Object RESULT =null;
		 comList=new ArrayList<>(); RESULT=new NodoAST("RETORNAR", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("retornar",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // llamada_funcion ::= ID PARENTESIS_A PARENTESIS_C P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 comList=new ArrayList(); comList.add(h1); RESULT=new NodoAST("LLAMADA_FUNCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // llamada_funcion ::= ID PARENTESIS_A lista_expresiones PARENTESIS_C P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 comList=new ArrayList(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("LLAMADA_FUNCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // llamada_funcion_exp ::= ID PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 comList=new ArrayList(); comList.add(h1); RESULT=new NodoAST("LLAMADA_FUNCION_EXP",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion_exp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // llamada_funcion_exp ::= ID PARENTESIS_A lista_expresiones PARENTESIS_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("LLAMADA_FUNCION_EXP",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion_exp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // principal ::= PRINCIPAL PARENTESIS_A PARENTESIS_C LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("principal",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= exp MAS exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= exp MENOS exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= exp POR exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= exp DIVISION exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= exp MOD exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp POT exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= PARENTESIS_A exp PARENTESIS_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp MAYOR_QUE exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp MENOR_QUE exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp MAYOR_IGUAL exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp MENOR_IGUAL exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp IGUAL exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp DIFERENTE exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= IS_NULL exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp AND exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp NAND exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp OR exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp NOR exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= exp XOR exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= NOT exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= ENTERO_VAL 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList<>(); comList2.add(new NodoAST("ENTERO_VAL", comList, "sus_linea")); RESULT = new NodoAST("EXP", comList2, "sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= DOBLE_VAL 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList<>(); comList2.add(new NodoAST("DOBLE_VAL", comList, "sus_linea")); RESULT = new NodoAST("EXP", comList2, "sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= VERDADERO 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList<>(); comList2.add(new NodoAST("VERDADERO", comList, "sus_linea")); RESULT = new NodoAST("EXP", comList2, "sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= FALSO 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList<>(); comList2.add(new NodoAST("FALSO", comList, "sus_linea")); RESULT = new NodoAST("EXP", comList2, "sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= CADENA_VAL 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList<>(); comList2.add(new NodoAST("CADENA_VAL", comList, "sus_linea")); RESULT = new NodoAST("EXP", comList2, "sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= CARACTER_VAL 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList<>(); comList2.add(new NodoAST("CARACTER_VAL", comList, "sus_linea")); RESULT = new NodoAST("EXP", comList2, "sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= llamada_funcion_exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp ::= ID 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList<>(); comList2.add(new NodoAST("ID", comList, "sus_linea")); RESULT = new NodoAST("EXP", comList2, "sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp ::= acceso_arreglo 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exp ::= longitud_exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exp ::= sumarizarfun_exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exp ::= reproducir_exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // acceso_arreglo ::= ID lista_corchetes_asignacion 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("ACCESO_ARREGLO",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso_arreglo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // mensaje ::= MENSAJE PARENTESIS_A lista_expresiones PARENTESIS_C P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("MENSAJE",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // lista_expresiones ::= lista_expresiones COMA exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h2); RESULT=new NodoAST("LISTA_EXPRESIONES",unirArrayList(((NodoAST)h1).getHijos(),comList),"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // lista_expresiones ::= exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("LISTA_EXPRESIONES",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // reproducir ::= REPRODUCIR PARENTESIS_A lista_expresiones PARENTESIS_C P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("REPRODUCIR",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reproducir",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // reproducir_exp ::= REPRODUCIR PARENTESIS_A lista_expresiones PARENTESIS_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("REPRODUCIR_EXP",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reproducir_exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ordenarfun ::= ORDENAR PARENTESIS_A lista_llaves COMA ordenes PARENTESIS_C P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ordenarfun",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ordenarfun ::= ORDENAR PARENTESIS_A ID COMA ordenes PARENTESIS_C P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ordenarfun",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ordenes ::= ASC_ORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ordenes",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ordenes ::= DESC_ORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ordenes",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ordenes ::= PAR_ORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ordenes",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ordenes ::= IMP_ORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ordenes",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ordenes ::= PRIM_ORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ordenes",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sumarizarfun ::= SUMARIZAR PARENTESIS_A ID PARENTESIS_C P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumarizarfun",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sumarizarfun ::= SUMARIZAR PARENTESIS_A lista_llaves PARENTESIS_C P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumarizarfun",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sumarizarfun_exp ::= SUMARIZAR PARENTESIS_A ID PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumarizarfun_exp",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sumarizarfun_exp ::= SUMARIZAR PARENTESIS_A lista_llaves PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumarizarfun_exp",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // esperar ::= ESPERAR PARENTESIS_A lista_expresiones PARENTESIS_C P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("esperar",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sumarizar ::= SUMARIZAR PARENTESIS_A lista_expresiones PARENTESIS_C P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumarizar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // longitud ::= LONGITUD PARENTESIS_A ID PARENTESIS_C P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("longitud",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // longitud ::= LONGITUD PARENTESIS_A lista_llaves PARENTESIS_C P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("longitud",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // longitud ::= LONGITUD PARENTESIS_A CADENA_VAL PARENTESIS_C P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("longitud",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // longitud_exp ::= LONGITUD PARENTESIS_A ID PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("longitud_exp",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // longitud_exp ::= LONGITUD PARENTESIS_A lista_llaves PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("longitud_exp",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // longitud_exp ::= LONGITUD PARENTESIS_A CADENA_VAL PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("longitud_exp",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ordenar ::= ORDENAR PARENTESIS_A lista_expresiones PARENTESIS_C P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ordenar",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // continuar ::= CONTINUAR 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("CONTINUAR",comList,"sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("continuar",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // salir ::= SALIR 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("SALIR",comList,"sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("salir",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // hacer_mientras ::= HACER LLAVE_A instrucciones LLAVE_C MIENTRAS PARENTESIS_A exp PARENTESIS_C P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("HACER_MIENTRAS",comList,"sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("hacer_mientras",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // mientras ::= MIENTRAS PARENTESIS_A exp PARENTESIS_C LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("MIENTRAS",comList,"sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mientras",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // para ::= PARA PARENTESIS_A declaracion_variable exp P_COMA asignacion_para PARENTESIS_C LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); comList.add(h4); RESULT=new NodoAST("PARA",comList,"sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("para",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // para ::= PARA PARENTESIS_A asignacion exp P_COMA asignacion_para PARENTESIS_C LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); comList.add(h4); comList.add(h5); RESULT=new NodoAST("PARA",comList,"sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("para",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // declaracion_variable ::= KEEP variable 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("DECLARACION_VARIABLE",comList,"sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // declaracion_variable ::= variable 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("DECLARACION_VARIABLE",comList,"sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // variable ::= VAR tipo_variable_nativa def_variables 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT= new NodoAST("VARIABLE", comList,"sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // variable ::= VAR tipo_variable_nativa ARREGLO def_arreglo 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); comList.add(h4); RESULT= new NodoAST("VARIABLE", comList,"sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // def_arreglo ::= ID lista_def_arreglo 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList = new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("DEF_ARREGLO", unirArrayList(comList, ((NodoAST)h2).getHijos()), "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_arreglo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // lista_def_arreglo ::= lista_corchetes def_arreglo_valores 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT = new NodoAST("LISTA_DEF_ARREGLO", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_def_arreglo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // lista_def_arreglo ::= COMA def_arreglo 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_def_arreglo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // lista_corchetes ::= lista_corchetes CORCHETE_A arreglo_lenght CORCHETE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h2); RESULT = new NodoAST("LISTA_CORCHETES", unirArrayList(((NodoAST)h1).getHijos(), comList), "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_corchetes",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // lista_corchetes ::= CORCHETE_A arreglo_lenght CORCHETE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("LISTA_CORCHETES",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_corchetes",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // arreglo_lenght ::= exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("ARREGLO_LENGHT",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo_lenght",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // arreglo_lenght ::= 
            {
              Object RESULT =null;
		 comList=new ArrayList<>(); RESULT=new NodoAST("ARREGLO_LENGHT",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo_lenght",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // def_arreglo_valores ::= P_COMA 
            {
              Object RESULT =null;
		 comList=new ArrayList<>(); RESULT = new NodoAST("DEF_ARREGLO_VALORES", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_arreglo_valores",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // def_arreglo_valores ::= ASIGNACION lista_llaves P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("DEF_ARREGLO_VALORES", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_arreglo_valores",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // lista_llaves ::= lista_llaves COMA LLAVE_A valores_arreglo LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h2); RESULT = new NodoAST("LISTA_LLAVES", unirArrayList(((NodoAST)h1).getHijos(), comList), "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_llaves",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // lista_llaves ::= LLAVE_A valores_arreglo LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("LISTA_LLAVES",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_llaves",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // valores_arreglo ::= lista_expresiones 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("VALORES_ARREGLO", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores_arreglo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // valores_arreglo ::= lista_llaves 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores_arreglo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // valores_arreglo ::= 
            {
              Object RESULT =null;
		 comList=new ArrayList<>(); RESULT = new NodoAST("VALORES_ARREGLO", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores_arreglo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // def_variables ::= ID lista_variables 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList = new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("DEF_VARIABLE", unirArrayList(comList, ((NodoAST)h2).getHijos()), "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_variables",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // lista_variables ::= ASIGNACION exp P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("LISTA_VARIABLES", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // lista_variables ::= COMA def_variables 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // lista_variables ::= P_COMA 
            {
              Object RESULT =null;
		 comList = new ArrayList<>(); RESULT= new NodoAST("LISTA_VARIABLES", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // declaracion_funcion ::= KEEP tipo_variable_nativa ID PARENTESIS_A s1 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); comList.add(h4); RESULT=new NodoAST("DECLARACION_FUNCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // declaracion_funcion ::= tipo_variable_nativa ID PARENTESIS_A s1 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT=new NodoAST("DECLARACION_FUNCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // s1 ::= PARENTESIS_C s2 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("S1",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // s1 ::= lista_parametros PARENTESIS_C s2 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("S1",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // s2 ::= LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("S2",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // lista_parametros ::= lista_parametros COMA parametro 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h2); RESULT = new NodoAST("LISTA_PARAMETROS", unirArrayList(((NodoAST)h1).getHijos(), comList), "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // lista_parametros ::= parametro 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("LISTA_PARAMETROS",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // parametro ::= tipo_variable_nativa ID 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("PARAMETRO",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // tipo_variable_nativa ::= ENTERO 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList(); comList2.add(new NodoAST("ENTERO", comList, "sus_linea")); RESULT= new NodoAST("TIPOS_VARIABLE_NATIVA",comList2,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable_nativa",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // tipo_variable_nativa ::= DOBLE 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList(); comList2.add(new NodoAST("DOBLE", comList, "sus_linea")); RESULT= new NodoAST("TIPOS_VARIABLE_NATIVA",comList2,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable_nativa",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // tipo_variable_nativa ::= CARACTER 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList(); comList2.add(new NodoAST("CARACTER", comList, "sus_linea")); RESULT= new NodoAST("TIPOS_VARIABLE_NATIVA",comList2,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable_nativa",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // tipo_variable_nativa ::= CADENA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList(); comList2.add(new NodoAST("CADENA", comList, "sus_linea")); RESULT= new NodoAST("TIPOS_VARIABLE_NATIVA",comList2,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable_nativa",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // tipo_variable_nativa ::= BOOLEAN 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList(); comList2.add(new NodoAST("BOOLEAN", comList, "sus_linea")); RESULT= new NodoAST("TIPOS_VARIABLE_NATIVA",comList2,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable_nativa",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // dec_id ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_id",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // tipo_igual ::= ASIGNACION 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList(); comList2.add(new NodoAST("ASIGNACION_VAL", comList, "sus_linea")); RESULT= new NodoAST("TIPO_IGUAL",comList2,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_igual",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // tipo_igual ::= MAS ASIGNACION 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1+""+h2); comList2=new ArrayList(); comList2.add(new NodoAST("MAS_ASIGNACION", comList, "sus_linea")); RESULT= new NodoAST("TIPO_IGUAL",comList2,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_igual",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // tipo_igual ::= MENOS ASIGNACION 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1+""+h2); comList2=new ArrayList(); comList2.add(new NodoAST("MENOS_ASIGNACION", comList, "sus_linea")); RESULT= new NodoAST("TIPO_IGUAL",comList2,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_igual",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // asignacion_para ::= ID tipo_igual exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("ASIGNACION_PARA", comList, "sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_para",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // asignacion_para ::= ID INCREMENTO 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2);  RESULT = new NodoAST("ASIGNACION_PARA", comList, "sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_para",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // asignacion_para ::= ID DECREMENTO 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2);  RESULT = new NodoAST("ASIGNACION_PARA", comList, "sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_para",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // lista_corchetes_asignacion ::= lista_corchetes_asignacion CORCHETE_A exp CORCHETE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h2); RESULT = new NodoAST("LISTA_CORCHETES_ASIGNACION", unirArrayList(((NodoAST)h1).getHijos(), comList), "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_corchetes_asignacion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // lista_corchetes_asignacion ::= CORCHETE_A exp CORCHETE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("LISTA_CORCHETES_ASIGNACION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_corchetes_asignacion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // asignacion ::= ID tipo_igual exp P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("ASIGNACION", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // asignacion ::= ID lista_corchetes_asignacion tipo_igual exp P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); comList.add(h4); RESULT = new NodoAST("ASIGNACION", comList, "sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // asignacion ::= ID INCREMENTO P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2);  RESULT = new NodoAST("ASIGNACION", comList, "sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // asignacion ::= ID DECREMENTO P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2);  RESULT = new NodoAST("ASIGNACION", comList, "sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // switch ::= SWITCH PARENTESIS_A exp PARENTESIS_C LLAVE_A lista_casos LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList(); comList.add(h1); comList.add(h2); RESULT = new NodoAST("SWITCH", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // lista_casos ::= lista_casos caso 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h2); RESULT = new NodoAST("LISTA_CASOS", unirArrayList(((NodoAST)h1).getHijos(), comList), "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_casos",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // lista_casos ::= caso 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("LISTA_CASOS", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_casos",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // lista_casos ::= default 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("LISTA_CASOS", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_casos",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // lista_casos ::= lista_casos default 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h2); RESULT = new NodoAST("LISTA_CASOS", unirArrayList(((NodoAST)h1).getHijos(), comList), "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_casos",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // caso ::= CASO exp DOS_PUNTOS instrucciones 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT = new NodoAST("CASO", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // default ::= DEFAULT DOS_PUNTOS instrucciones 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("DEFAULT", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("default",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // instruccion_si ::= si 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("INSTRUCCION_SI", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_si",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // instruccion_si ::= si sino 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT = new NodoAST("INSTRUCCION_SI", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_si",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // instruccion_si ::= si lista_sino_si 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT = new NodoAST("INSTRUCCION_SI", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_si",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // instruccion_si ::= si lista_sino_si sino 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("INSTRUCCION_SI", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_si",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // si ::= SI PARENTESIS_A exp PARENTESIS_C LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("SI",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // sino ::= SINO LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("SINO",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sino",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // sino_si ::= SINO SI PARENTESIS_A exp PARENTESIS_C LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("SINO_SI",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sino_si",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // lista_sino_si ::= lista_sino_si sino_si 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h2); RESULT = new NodoAST("LISTA_SINO_SI", unirArrayList(((NodoAST)h1).getHijos(), comList), "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sino_si",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // lista_sino_si ::= sino_si 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("LISTA_SINO_SI",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sino_si",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
