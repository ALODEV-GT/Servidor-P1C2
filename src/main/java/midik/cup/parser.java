
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package midik.cup;

import java_cup.runtime.Symbol;
import midik.arbol.NodoAST;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\242\000\002\002\004\000\002\002\003\000\002\077" +
    "\006\000\002\100\004\000\002\100\005\000\002\101\005" +
    "\000\002\102\005\000\002\102\002\000\002\003\004\000" +
    "\002\003\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\024\005\000\002\024\004\000\002\034\006" +
    "\000\002\034\007\000\002\036\005\000\002\036\006\000" +
    "\002\005\010\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\004\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\004\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\032" +
    "\004\000\002\006\007\000\002\022\005\000\002\022\003" +
    "\000\002\007\007\000\002\033\011\000\002\033\011\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\040\007\000\002\040" +
    "\007\000\002\042\006\000\002\042\006\000\002\010\007" +
    "\000\002\011\007\000\002\012\007\000\002\012\007\000" +
    "\002\012\007\000\002\041\006\000\002\041\006\000\002" +
    "\041\006\000\002\013\007\000\002\023\003\000\002\025" +
    "\003\000\002\043\013\000\002\044\011\000\002\045\014" +
    "\000\002\045\014\000\002\047\004\000\002\047\003\000" +
    "\002\061\005\000\002\061\006\000\002\014\004\000\002" +
    "\015\004\000\002\015\004\000\002\016\006\000\002\016" +
    "\005\000\002\020\003\000\002\020\002\000\002\017\003" +
    "\000\002\017\005\000\002\030\007\000\002\030\005\000" +
    "\002\031\003\000\002\031\003\000\002\031\002\000\002" +
    "\062\004\000\002\063\005\000\002\063\004\000\002\063" +
    "\003\000\002\050\007\000\002\050\006\000\002\051\004" +
    "\000\002\051\005\000\002\052\005\000\002\053\005\000" +
    "\002\053\003\000\002\054\004\000\002\056\003\000\002" +
    "\056\003\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\060\003\000\002\064\003\000\002\064\004" +
    "\000\002\064\004\000\002\046\005\000\002\046\004\000" +
    "\002\046\004\000\002\027\006\000\002\027\005\000\002" +
    "\065\006\000\002\065\007\000\002\065\005\000\002\065" +
    "\005\000\002\066\011\000\002\067\004\000\002\067\003" +
    "\000\002\067\003\000\002\067\004\000\002\070\006\000" +
    "\002\071\005\000\002\072\003\000\002\072\004\000\002" +
    "\072\004\000\002\072\005\000\002\073\011\000\002\074" +
    "\006\000\002\075\012\000\002\076\004\000\002\076\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0162\000\004\102\006\001\002\000\004\002\u0164\001" +
    "\002\000\004\002\000\001\002\000\004\071\u015d\001\002" +
    "\000\004\043\010\001\002\000\060\005\016\006\047\007" +
    "\040\010\024\011\043\012\034\013\067\015\020\017\050" +
    "\021\037\023\063\024\025\025\060\026\032\027\045\030" +
    "\041\031\062\032\015\033\053\034\052\035\014\036\023" +
    "\071\036\001\002\000\066\005\uffed\006\uffed\007\uffed\010" +
    "\uffed\011\uffed\012\uffed\013\uffed\015\uffed\017\uffed\020\uffed" +
    "\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027" +
    "\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed" +
    "\036\uffed\044\uffed\071\uffed\001\002\000\066\005\ufff1\006" +
    "\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\015\ufff1" +
    "\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025" +
    "\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1" +
    "\034\ufff1\035\ufff1\036\ufff1\044\ufff1\071\ufff1\001\002\000" +
    "\066\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6" +
    "\013\ufff6\015\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023" +
    "\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6" +
    "\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\044\ufff6\071" +
    "\ufff6\001\002\000\004\045\u0159\001\002\000\004\045\u0149" +
    "\001\002\000\006\014\uff81\071\uff81\001\002\000\066\005" +
    "\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2" +
    "\015\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024" +
    "\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2" +
    "\033\ufff2\034\ufff2\035\ufff2\036\ufff2\044\ufff2\071\ufff2\001" +
    "\002\000\004\045\u0143\001\002\000\062\005\016\006\047" +
    "\007\040\010\024\011\043\012\034\013\067\015\020\017" +
    "\050\021\037\023\063\024\025\025\060\026\032\027\045" +
    "\030\041\031\062\032\015\033\053\034\052\035\014\036" +
    "\023\044\u0142\071\036\001\002\000\066\005\uffe9\006\uffe9" +
    "\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\015\uffe9\017" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\036\uffe9\044\uffe9\071\uffe9\001\002\000\004" +
    "\045\u013d\001\002\000\006\014\uff7f\071\uff7f\001\002\000" +
    "\004\045\u0137\001\002\000\066\005\uffeb\006\uffeb\007\uffeb" +
    "\010\uffeb\011\uffeb\012\uffeb\013\uffeb\015\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035" +
    "\uffeb\036\uffeb\044\uffeb\071\uffeb\001\002\000\070\005\uff68" +
    "\006\uff68\007\uff68\010\uff68\011\uff68\012\uff68\013\uff68\015" +
    "\uff68\016\u012a\017\uff68\020\uff68\021\uff68\022\uff68\023\uff68" +
    "\024\uff68\025\uff68\026\uff68\027\uff68\030\uff68\031\uff68\032" +
    "\uff68\033\uff68\034\uff68\035\uff68\036\uff68\044\uff68\071\uff68" +
    "\001\002\000\066\005\uffef\006\uffef\007\uffef\010\uffef\011" +
    "\uffef\012\uffef\013\uffef\015\uffef\017\uffef\020\uffef\021\uffef" +
    "\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030" +
    "\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef" +
    "\044\uffef\071\uffef\001\002\000\066\005\uffe5\006\uffe5\007" +
    "\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\015\uffe5\017\uffe5" +
    "\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\044\uffe5\071\uffe5\001\002\000\066\005" +
    "\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5" +
    "\015\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024" +
    "\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5" +
    "\033\uffa5\034\uffa5\035\uffa5\036\uffa5\044\uffa5\071\uffa5\001" +
    "\002\000\066\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\013\ufff5\015\ufff5\017\ufff5\020\ufff5\021\ufff5\022" +
    "\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5" +
    "\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\044" +
    "\ufff5\071\ufff5\001\002\000\016\005\016\006\047\007\040" +
    "\010\024\011\043\013\067\001\002\000\066\005\ufff8\006" +
    "\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\015\ufff8" +
    "\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025" +
    "\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8" +
    "\034\ufff8\035\ufff8\036\ufff8\044\ufff8\071\ufff8\001\002\000" +
    "\020\045\u011d\052\316\067\340\070\335\075\223\110\315" +
    "\111\317\001\002\000\066\005\uffa4\006\uffa4\007\uffa4\010" +
    "\uffa4\011\uffa4\012\uffa4\013\uffa4\015\uffa4\017\uffa4\020\uffa4" +
    "\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027" +
    "\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4" +
    "\036\uffa4\044\uffa4\071\uffa4\001\002\000\006\014\uff7d\071" +
    "\uff7d\001\002\000\004\045\u0119\001\002\000\066\005\ufff0" +
    "\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\015" +
    "\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0" +
    "\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033" +
    "\ufff0\034\ufff0\035\ufff0\036\ufff0\044\ufff0\071\ufff0\001\002" +
    "\000\006\014\uff7e\071\uff7e\001\002\000\066\005\uffea\006" +
    "\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\015\uffea" +
    "\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025" +
    "\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea" +
    "\034\uffea\035\uffea\036\uffea\044\uffea\071\uffea\001\002\000" +
    "\034\033\117\034\122\037\u0117\045\116\056\120\061\105" +
    "\071\112\072\104\073\111\074\113\077\106\100\114\101" +
    "\115\001\002\000\066\005\ufff3\006\ufff3\007\ufff3\010\ufff3" +
    "\011\ufff3\012\ufff3\013\ufff3\015\ufff3\017\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3" +
    "\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036" +
    "\ufff3\044\ufff3\071\ufff3\001\002\000\006\014\uff80\071\uff80" +
    "\001\002\000\004\045\u0105\001\002\000\110\005\uff9e\006" +
    "\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e\015\uff9e" +
    "\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025" +
    "\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e" +
    "\034\uff9e\035\uff9e\036\uff9e\044\uff9e\045\uff9e\056\uff9e\061" +
    "\uff9e\071\uff9e\072\uff9e\073\uff9e\074\uff9e\077\uff9e\100\uff9e" +
    "\101\uff9e\001\002\000\004\045\373\001\002\000\004\045" +
    "\364\001\002\000\066\005\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\015\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8" +
    "\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036" +
    "\uffe8\044\uffe8\071\uffe8\001\002\000\066\005\uffec\006\uffec" +
    "\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\015\uffec\017" +
    "\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec" +
    "\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034" +
    "\uffec\035\uffec\036\uffec\044\uffec\071\uffec\001\002\000\066" +
    "\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013" +
    "\uffee\015\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee" +
    "\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032" +
    "\uffee\033\uffee\034\uffee\035\uffee\036\uffee\044\uffee\071\uffee" +
    "\001\002\000\066\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011" +
    "\ufff7\012\ufff7\013\ufff7\015\ufff7\017\ufff7\020\ufff7\021\ufff7" +
    "\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030" +
    "\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7" +
    "\044\ufff7\071\ufff7\001\002\000\004\043\354\001\002\000" +
    "\066\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6" +
    "\013\uffe6\015\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023" +
    "\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\044\uffe6\071" +
    "\uffe6\001\002\000\004\045\350\001\002\000\004\045\277" +
    "\001\002\000\066\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\015\ufff4\017\ufff4\020\ufff4\021\ufff4" +
    "\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030" +
    "\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4" +
    "\044\ufff4\071\ufff4\001\002\000\066\005\uffe7\006\uffe7\007" +
    "\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\015\uffe7\017\uffe7" +
    "\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026" +
    "\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7" +
    "\035\uffe7\036\uffe7\044\uffe7\071\uffe7\001\002\000\004\071" +
    "\256\001\002\000\014\005\016\006\047\007\040\010\024" +
    "\011\043\001\002\000\006\014\073\071\071\001\002\000" +
    "\010\037\252\041\247\052\250\001\002\000\110\005\uff9d" +
    "\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\015" +
    "\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d" +
    "\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033" +
    "\uff9d\034\uff9d\035\uff9d\036\uff9d\044\uff9d\045\uff9d\056\uff9d" +
    "\061\uff9d\071\uff9d\072\uff9d\073\uff9d\074\uff9d\077\uff9d\100" +
    "\uff9d\101\uff9d\001\002\000\004\071\074\001\002\000\006" +
    "\041\076\075\101\001\002\000\110\005\uff9c\006\uff9c\007" +
    "\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c\015\uff9c\017\uff9c" +
    "\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026" +
    "\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c" +
    "\035\uff9c\036\uff9c\044\uff9c\045\uff9c\056\uff9c\061\uff9c\071" +
    "\uff9c\072\uff9c\073\uff9c\074\uff9c\077\uff9c\100\uff9c\101\uff9c" +
    "\001\002\000\004\071\074\001\002\000\110\005\uff9b\006" +
    "\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\015\uff9b" +
    "\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025" +
    "\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b" +
    "\034\uff9b\035\uff9b\036\uff9b\044\uff9b\045\uff9b\056\uff9b\061" +
    "\uff9b\071\uff9b\072\uff9b\073\uff9b\074\uff9b\077\uff9b\100\uff9b" +
    "\101\uff9b\001\002\000\010\037\240\052\236\075\241\001" +
    "\002\000\034\033\117\034\122\045\116\056\120\061\105" +
    "\071\112\072\104\073\111\074\113\076\uff95\077\106\100" +
    "\114\101\115\001\002\000\060\037\uffc1\041\uffc1\042\uffc1" +
    "\044\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\053\uffc1\054" +
    "\uffc1\055\uffc1\057\uffc1\060\uffc1\062\uffc1\063\uffc1\064\uffc1" +
    "\065\uffc1\066\uffc1\076\uffc1\110\uffc1\111\uffc1\112\uffc1\113" +
    "\uffc1\001\002\000\004\076\235\001\002\000\060\037\uffc9" +
    "\041\uffc9\042\uffc9\044\uffc9\046\uffc9\047\uffc9\050\uffc9\051" +
    "\uffc9\053\uffc9\054\uffc9\055\uffc9\057\uffc9\060\uffc9\062\uffc9" +
    "\063\uffc9\064\uffc9\065\uffc9\066\uffc9\076\uffc9\110\uffc9\111" +
    "\uffc9\112\uffc9\113\uffc9\001\002\000\032\033\117\034\122" +
    "\045\116\056\120\061\105\071\112\072\104\073\111\074" +
    "\113\077\106\100\114\101\115\001\002\000\060\037\uffc7" +
    "\041\uffc7\042\uffc7\044\uffc7\046\uffc7\047\uffc7\050\uffc7\051" +
    "\uffc7\053\uffc7\054\uffc7\055\uffc7\057\uffc7\060\uffc7\062\uffc7" +
    "\063\uffc7\064\uffc7\065\uffc7\066\uffc7\076\uffc7\110\uffc7\111" +
    "\uffc7\112\uffc7\113\uffc7\001\002\000\060\037\uffbf\041\uffbf" +
    "\042\uffbf\044\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\053" +
    "\uffbf\054\uffbf\055\uffbf\057\uffbf\060\uffbf\062\uffbf\063\uffbf" +
    "\064\uffbf\065\uffbf\066\uffbf\076\uffbf\110\uffbf\111\uffbf\112" +
    "\uffbf\113\uffbf\001\002\000\046\047\154\050\147\051\162" +
    "\053\145\054\153\055\157\057\142\060\161\062\155\063" +
    "\160\064\143\065\150\066\146\076\uff96\110\152\111\144" +
    "\112\151\113\156\001\002\000\060\037\uffc8\041\uffc8\042" +
    "\uffc8\044\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\053\uffc8" +
    "\054\uffc8\055\uffc8\057\uffc8\060\uffc8\062\uffc8\063\uffc8\064" +
    "\uffc8\065\uffc8\066\uffc8\076\uffc8\110\uffc8\111\uffc8\112\uffc8" +
    "\113\uffc8\001\002\000\064\037\uffc2\041\uffc2\042\uffc2\044" +
    "\uffc2\045\222\046\uffc2\047\uffc2\050\uffc2\051\uffc2\053\uffc2" +
    "\054\uffc2\055\uffc2\057\uffc2\060\uffc2\062\uffc2\063\uffc2\064" +
    "\uffc2\065\uffc2\066\uffc2\075\223\076\uffc2\110\uffc2\111\uffc2" +
    "\112\uffc2\113\uffc2\001\002\000\060\037\uffc5\041\uffc5\042" +
    "\uffc5\044\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\053\uffc5" +
    "\054\uffc5\055\uffc5\057\uffc5\060\uffc5\062\uffc5\063\uffc5\064" +
    "\uffc5\065\uffc5\066\uffc5\076\uffc5\110\uffc5\111\uffc5\112\uffc5" +
    "\113\uffc5\001\002\000\060\037\uffc6\041\uffc6\042\uffc6\044" +
    "\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\053\uffc6\054\uffc6" +
    "\055\uffc6\057\uffc6\060\uffc6\062\uffc6\063\uffc6\064\uffc6\065" +
    "\uffc6\066\uffc6\076\uffc6\110\uffc6\111\uffc6\112\uffc6\113\uffc6" +
    "\001\002\000\060\037\uffc4\041\uffc4\042\uffc4\044\uffc4\046" +
    "\uffc4\047\uffc4\050\uffc4\051\uffc4\053\uffc4\054\uffc4\055\uffc4" +
    "\057\uffc4\060\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066" +
    "\uffc4\076\uffc4\110\uffc4\111\uffc4\112\uffc4\113\uffc4\001\002" +
    "\000\032\033\117\034\122\045\116\056\120\061\105\071" +
    "\112\072\104\073\111\074\113\077\106\100\114\101\115" +
    "\001\002\000\004\045\212\001\002\000\032\033\117\034" +
    "\122\045\116\056\120\061\105\071\112\072\104\073\111" +
    "\074\113\077\106\100\114\101\115\001\002\000\060\037" +
    "\uffc0\041\uffc0\042\uffc0\044\uffc0\046\uffc0\047\uffc0\050\uffc0" +
    "\051\uffc0\053\uffc0\054\uffc0\055\uffc0\057\uffc0\060\uffc0\062" +
    "\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\076\uffc0\110\uffc0" +
    "\111\uffc0\112\uffc0\113\uffc0\001\002\000\004\045\124\001" +
    "\002\000\060\037\uffc3\041\uffc3\042\uffc3\044\uffc3\046\uffc3" +
    "\047\uffc3\050\uffc3\051\uffc3\053\uffc3\054\uffc3\055\uffc3\057" +
    "\uffc3\060\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3" +
    "\076\uffc3\110\uffc3\111\uffc3\112\uffc3\113\uffc3\001\002\000" +
    "\010\043\130\071\125\074\127\001\002\000\004\046\210" +
    "\001\002\000\006\041\135\046\207\001\002\000\004\046" +
    "\206\001\002\000\036\033\117\034\122\043\130\044\uff8e" +
    "\045\116\056\120\061\105\071\112\072\104\073\111\074" +
    "\113\077\106\100\114\101\115\001\002\000\006\041\204" +
    "\044\uff90\001\002\000\052\041\uffbb\044\uffbb\046\uffbb\047" +
    "\154\050\147\051\162\053\145\054\153\055\157\057\142" +
    "\060\161\062\155\063\160\064\143\065\150\066\146\110" +
    "\152\111\144\112\151\113\156\001\002\000\004\044\141" +
    "\001\002\000\006\041\135\044\uff8f\001\002\000\004\043" +
    "\136\001\002\000\036\033\117\034\122\043\130\044\uff8e" +
    "\045\116\056\120\061\105\071\112\072\104\073\111\074" +
    "\113\077\106\100\114\101\115\001\002\000\004\044\140" +
    "\001\002\000\012\037\uff92\041\uff92\044\uff92\046\uff92\001" +
    "\002\000\012\037\uff91\041\uff91\044\uff91\046\uff91\001\002" +
    "\000\032\033\117\034\122\045\116\056\120\061\105\071" +
    "\112\072\104\073\111\074\113\077\106\100\114\101\115" +
    "\001\002\000\032\033\117\034\122\045\116\056\120\061" +
    "\105\071\112\072\104\073\111\074\113\077\106\100\114" +
    "\101\115\001\002\000\032\033\117\034\122\045\116\056" +
    "\120\061\105\071\112\072\104\073\111\074\113\077\106" +
    "\100\114\101\115\001\002\000\032\033\117\034\122\045" +
    "\116\056\120\061\105\071\112\072\104\073\111\074\113" +
    "\077\106\100\114\101\115\001\002\000\032\033\117\034" +
    "\122\045\116\056\120\061\105\071\112\072\104\073\111" +
    "\074\113\077\106\100\114\101\115\001\002\000\032\033" +
    "\117\034\122\045\116\056\120\061\105\071\112\072\104" +
    "\073\111\074\113\077\106\100\114\101\115\001\002\000" +
    "\032\033\117\034\122\045\116\056\120\061\105\071\112" +
    "\072\104\073\111\074\113\077\106\100\114\101\115\001" +
    "\002\000\032\033\117\034\122\045\116\056\120\061\105" +
    "\071\112\072\104\073\111\074\113\077\106\100\114\101" +
    "\115\001\002\000\032\033\117\034\122\045\116\056\120" +
    "\061\105\071\112\072\104\073\111\074\113\077\106\100" +
    "\114\101\115\001\002\000\032\033\117\034\122\045\116" +
    "\056\120\061\105\071\112\072\104\073\111\074\113\077" +
    "\106\100\114\101\115\001\002\000\032\033\117\034\122" +
    "\045\116\056\120\061\105\071\112\072\104\073\111\074" +
    "\113\077\106\100\114\101\115\001\002\000\032\033\117" +
    "\034\122\045\116\056\120\061\105\071\112\072\104\073" +
    "\111\074\113\077\106\100\114\101\115\001\002\000\032" +
    "\033\117\034\122\045\116\056\120\061\105\071\112\072" +
    "\104\073\111\074\113\077\106\100\114\101\115\001\002" +
    "\000\032\033\117\034\122\045\116\056\120\061\105\071" +
    "\112\072\104\073\111\074\113\077\106\100\114\101\115" +
    "\001\002\000\032\033\117\034\122\045\116\056\120\061" +
    "\105\071\112\072\104\073\111\074\113\077\106\100\114" +
    "\101\115\001\002\000\032\033\117\034\122\045\116\056" +
    "\120\061\105\071\112\072\104\073\111\074\113\077\106" +
    "\100\114\101\115\001\002\000\032\033\117\034\122\045" +
    "\116\056\120\061\105\071\112\072\104\073\111\074\113" +
    "\077\106\100\114\101\115\001\002\000\060\037\uffd3\041" +
    "\uffd3\042\uffd3\044\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3" +
    "\053\uffd3\054\uffd3\055\uffd3\057\uffd3\060\uffd3\062\uffd3\063" +
    "\uffd3\064\uffd3\065\150\066\146\076\uffd3\110\152\111\144" +
    "\112\151\113\156\001\002\000\060\037\uffcd\041\uffcd\042" +
    "\uffcd\044\uffcd\046\uffcd\047\154\050\147\051\162\053\145" +
    "\054\153\055\157\057\uffcd\060\uffcd\062\uffcd\063\uffcd\064" +
    "\uffcd\065\150\066\146\076\uffcd\110\152\111\144\112\151" +
    "\113\156\001\002\000\060\037\uffcc\041\uffcc\042\uffcc\044" +
    "\uffcc\046\uffcc\047\154\050\147\051\162\053\145\054\153" +
    "\055\157\057\uffcc\060\uffcc\062\uffcc\063\uffcc\064\uffcc\065" +
    "\150\066\146\076\uffcc\110\152\111\144\112\151\113\156" +
    "\001\002\000\060\037\uffd1\041\uffd1\042\uffd1\044\uffd1\046" +
    "\uffd1\047\uffd1\050\147\051\162\053\145\054\153\055\uffd1" +
    "\057\uffd1\060\uffd1\062\uffd1\063\uffd1\064\uffd1\065\150\066" +
    "\146\076\uffd1\110\152\111\144\112\151\113\156\001\002" +
    "\000\060\037\uffda\041\uffda\042\uffda\044\uffda\046\uffda\047" +
    "\uffda\050\uffda\051\uffda\053\uffda\054\uffda\055\uffda\057\uffda" +
    "\060\uffda\062\uffda\063\uffda\064\uffda\065\uffda\066\146\076" +
    "\uffda\110\uffda\111\uffda\112\uffda\113\uffda\001\002\000\060" +
    "\037\uffce\041\uffce\042\uffce\044\uffce\046\uffce\047\154\050" +
    "\147\051\162\053\145\054\153\055\157\057\uffce\060\161" +
    "\062\uffce\063\160\064\143\065\150\066\146\076\uffce\110" +
    "\152\111\144\112\151\113\156\001\002\000\060\037\uffd2" +
    "\041\uffd2\042\uffd2\044\uffd2\046\uffd2\047\uffd2\050\147\051" +
    "\162\053\145\054\153\055\uffd2\057\uffd2\060\uffd2\062\uffd2" +
    "\063\uffd2\064\uffd2\065\150\066\146\076\uffd2\110\152\111" +
    "\144\112\151\113\156\001\002\000\060\037\uffd5\041\uffd5" +
    "\042\uffd5\044\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\053" +
    "\uffd5\054\uffd5\055\uffd5\057\uffd5\060\uffd5\062\uffd5\063\uffd5" +
    "\064\uffd5\065\150\066\146\076\uffd5\110\152\111\144\112" +
    "\151\113\156\001\002\000\060\037\uffdd\041\uffdd\042\uffdd" +
    "\044\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\053\uffdd\054" +
    "\uffdd\055\uffdd\057\uffdd\060\uffdd\062\uffdd\063\uffdd\064\uffdd" +
    "\065\150\066\146\076\uffdd\110\uffdd\111\uffdd\112\151\113" +
    "\156\001\002\000\060\037\uffdb\041\uffdb\042\uffdb\044\uffdb" +
    "\046\uffdb\047\uffdb\050\uffdb\051\uffdb\053\uffdb\054\uffdb\055" +
    "\uffdb\057\uffdb\060\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb" +
    "\066\146\076\uffdb\110\uffdb\111\uffdb\112\uffdb\113\uffdb\001" +
    "\002\000\060\037\uffd9\041\uffd9\042\uffd9\044\uffd9\046\uffd9" +
    "\047\uffd9\050\uffd9\051\uffd9\053\uffd9\054\uffd9\055\uffd9\057" +
    "\uffd9\060\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9\066\146" +
    "\076\uffd9\110\uffd9\111\uffd9\112\uffd9\113\uffd9\001\002\000" +
    "\060\037\uffd4\041\uffd4\042\uffd4\044\uffd4\046\uffd4\047\uffd4" +
    "\050\uffd4\051\uffd4\053\uffd4\054\uffd4\055\uffd4\057\uffd4\060" +
    "\uffd4\062\uffd4\063\uffd4\064\uffd4\065\150\066\146\076\uffd4" +
    "\110\152\111\144\112\151\113\156\001\002\000\060\037" +
    "\uffd8\041\uffd8\042\uffd8\044\uffd8\046\uffd8\047\uffd8\050\uffd8" +
    "\051\uffd8\053\uffd8\054\uffd8\055\uffd8\057\uffd8\060\uffd8\062" +
    "\uffd8\063\uffd8\064\uffd8\065\uffd8\066\146\076\uffd8\110\uffd8" +
    "\111\uffd8\112\uffd8\113\uffd8\001\002\000\060\037\uffd6\041" +
    "\uffd6\042\uffd6\044\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6" +
    "\053\uffd6\054\uffd6\055\uffd6\057\uffd6\060\uffd6\062\uffd6\063" +
    "\uffd6\064\uffd6\065\150\066\146\076\uffd6\110\152\111\144" +
    "\112\151\113\156\001\002\000\060\037\uffdc\041\uffdc\042" +
    "\uffdc\044\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\053\uffdc" +
    "\054\uffdc\055\uffdc\057\uffdc\060\uffdc\062\uffdc\063\uffdc\064" +
    "\uffdc\065\150\066\146\076\uffdc\110\uffdc\111\uffdc\112\151" +
    "\113\156\001\002\000\060\037\uffcb\041\uffcb\042\uffcb\044" +
    "\uffcb\046\uffcb\047\154\050\147\051\162\053\145\054\153" +
    "\055\157\057\uffcb\060\uffcb\062\uffcb\063\uffcb\064\uffcb\065" +
    "\150\066\146\076\uffcb\110\152\111\144\112\151\113\156" +
    "\001\002\000\060\037\uffcf\041\uffcf\042\uffcf\044\uffcf\046" +
    "\uffcf\047\154\050\147\051\162\053\145\054\153\055\157" +
    "\057\uffcf\060\161\062\uffcf\063\160\064\143\065\150\066" +
    "\146\076\uffcf\110\152\111\144\112\151\113\156\001\002" +
    "\000\032\033\117\034\122\045\116\056\120\061\105\071" +
    "\112\072\104\073\111\074\113\077\106\100\114\101\115" +
    "\001\002\000\052\041\uffbc\044\uffbc\046\uffbc\047\154\050" +
    "\147\051\162\053\145\054\153\055\157\057\142\060\161" +
    "\062\155\063\160\064\143\065\150\066\146\110\152\111" +
    "\144\112\151\113\156\001\002\000\060\037\uffa7\041\uffa7" +
    "\042\uffa7\044\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\053" +
    "\uffa7\054\uffa7\055\uffa7\057\uffa7\060\uffa7\062\uffa7\063\uffa7" +
    "\064\uffa7\065\uffa7\066\uffa7\076\uffa7\110\uffa7\111\uffa7\112" +
    "\uffa7\113\uffa7\001\002\000\060\037\uffa8\041\uffa8\042\uffa8" +
    "\044\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\053\uffa8\054" +
    "\uffa8\055\uffa8\057\uffa8\060\uffa8\062\uffa8\063\uffa8\064\uffa8" +
    "\065\uffa8\066\uffa8\076\uffa8\110\uffa8\111\uffa8\112\uffa8\113" +
    "\uffa8\001\002\000\060\037\uffa9\041\uffa9\042\uffa9\044\uffa9" +
    "\046\uffa9\047\uffa9\050\uffa9\051\uffa9\053\uffa9\054\uffa9\055" +
    "\uffa9\057\uffa9\060\uffa9\062\uffa9\063\uffa9\064\uffa9\065\uffa9" +
    "\066\uffa9\076\uffa9\110\uffa9\111\uffa9\112\uffa9\113\uffa9\001" +
    "\002\000\060\037\uffd0\041\uffd0\042\uffd0\044\uffd0\046\uffd0" +
    "\047\154\050\147\051\162\053\145\054\153\055\157\057" +
    "\142\060\161\062\155\063\160\064\143\065\150\066\146" +
    "\076\uffd0\110\152\111\144\112\151\113\156\001\002\000" +
    "\006\043\130\071\213\001\002\000\004\046\216\001\002" +
    "\000\006\041\135\046\215\001\002\000\060\037\uffaf\041" +
    "\uffaf\042\uffaf\044\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf" +
    "\053\uffaf\054\uffaf\055\uffaf\057\uffaf\060\uffaf\062\uffaf\063" +
    "\uffaf\064\uffaf\065\uffaf\066\uffaf\076\uffaf\110\uffaf\111\uffaf" +
    "\112\uffaf\113\uffaf\001\002\000\060\037\uffb0\041\uffb0\042" +
    "\uffb0\044\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\053\uffb0" +
    "\054\uffb0\055\uffb0\057\uffb0\060\uffb0\062\uffb0\063\uffb0\064" +
    "\uffb0\065\uffb0\066\uffb0\076\uffb0\110\uffb0\111\uffb0\112\uffb0" +
    "\113\uffb0\001\002\000\046\046\220\047\154\050\147\051" +
    "\162\053\145\054\153\055\157\057\142\060\161\062\155" +
    "\063\160\064\143\065\150\066\146\110\152\111\144\112" +
    "\151\113\156\001\002\000\060\037\uffd7\041\uffd7\042\uffd7" +
    "\044\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\053\uffd7\054" +
    "\uffd7\055\uffd7\057\uffd7\060\uffd7\062\uffd7\063\uffd7\064\uffd7" +
    "\065\uffd7\066\uffd7\076\uffd7\110\uffd7\111\uffd7\112\uffd7\113" +
    "\uffd7\001\002\000\062\037\uffbe\041\uffbe\042\uffbe\044\uffbe" +
    "\046\uffbe\047\uffbe\050\uffbe\051\uffbe\053\uffbe\054\uffbe\055" +
    "\uffbe\057\uffbe\060\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe" +
    "\066\uffbe\075\231\076\uffbe\110\uffbe\111\uffbe\112\uffbe\113" +
    "\uffbe\001\002\000\034\033\117\034\122\045\116\046\227" +
    "\056\120\061\105\071\112\072\104\073\111\074\113\077" +
    "\106\100\114\101\115\001\002\000\032\033\117\034\122" +
    "\045\116\056\120\061\105\071\112\072\104\073\111\074" +
    "\113\077\106\100\114\101\115\001\002\000\046\047\154" +
    "\050\147\051\162\053\145\054\153\055\157\057\142\060" +
    "\161\062\155\063\160\064\143\065\150\066\146\076\225" +
    "\110\152\111\144\112\151\113\156\001\002\000\064\037" +
    "\uff74\041\uff74\042\uff74\044\uff74\046\uff74\047\uff74\050\uff74" +
    "\051\uff74\052\uff74\053\uff74\054\uff74\055\uff74\057\uff74\060" +
    "\uff74\062\uff74\063\uff74\064\uff74\065\uff74\066\uff74\075\uff74" +
    "\076\uff74\110\uff74\111\uff74\112\uff74\113\uff74\001\002\000" +
    "\006\041\204\046\230\001\002\000\060\037\uffe0\041\uffe0" +
    "\042\uffe0\044\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\053" +
    "\uffe0\054\uffe0\055\uffe0\057\uffe0\060\uffe0\062\uffe0\063\uffe0" +
    "\064\uffe0\065\uffe0\066\uffe0\076\uffe0\110\uffe0\111\uffe0\112" +
    "\uffe0\113\uffe0\001\002\000\060\037\uffdf\041\uffdf\042\uffdf" +
    "\044\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\053\uffdf\054" +
    "\uffdf\055\uffdf\057\uffdf\060\uffdf\062\uffdf\063\uffdf\064\uffdf" +
    "\065\uffdf\066\uffdf\076\uffdf\110\uffdf\111\uffdf\112\uffdf\113" +
    "\uffdf\001\002\000\032\033\117\034\122\045\116\056\120" +
    "\061\105\071\112\072\104\073\111\074\113\077\106\100" +
    "\114\101\115\001\002\000\046\047\154\050\147\051\162" +
    "\053\145\054\153\055\157\057\142\060\161\062\155\063" +
    "\160\064\143\065\150\066\146\076\233\110\152\111\144" +
    "\112\151\113\156\001\002\000\064\037\uff75\041\uff75\042" +
    "\uff75\044\uff75\046\uff75\047\uff75\050\uff75\051\uff75\052\uff75" +
    "\053\uff75\054\uff75\055\uff75\057\uff75\060\uff75\062\uff75\063" +
    "\uff75\064\uff75\065\uff75\066\uff75\075\uff75\076\uff75\110\uff75" +
    "\111\uff75\112\uff75\113\uff75\001\002\000\060\037\uffca\041" +
    "\uffca\042\uffca\044\uffca\046\uffca\047\154\050\147\051\162" +
    "\053\145\054\153\055\157\057\142\060\161\062\155\063" +
    "\160\064\143\065\150\066\146\076\uffca\110\152\111\144" +
    "\112\151\113\156\001\002\000\010\037\uff97\052\uff97\075" +
    "\uff97\001\002\000\004\043\130\001\002\000\110\005\uff9a" +
    "\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a\015" +
    "\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a" +
    "\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033" +
    "\uff9a\034\uff9a\035\uff9a\036\uff9a\044\uff9a\045\uff9a\056\uff9a" +
    "\061\uff9a\071\uff9a\072\uff9a\073\uff9a\074\uff9a\077\uff9a\100" +
    "\uff9a\101\uff9a\001\002\000\110\005\uff94\006\uff94\007\uff94" +
    "\010\uff94\011\uff94\012\uff94\013\uff94\015\uff94\017\uff94\020" +
    "\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94\026\uff94" +
    "\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94\034\uff94\035" +
    "\uff94\036\uff94\044\uff94\045\uff94\056\uff94\061\uff94\071\uff94" +
    "\072\uff94\073\uff94\074\uff94\077\uff94\100\uff94\101\uff94\001" +
    "\002\000\034\033\117\034\122\045\116\056\120\061\105" +
    "\071\112\072\104\073\111\074\113\076\uff95\077\106\100" +
    "\114\101\115\001\002\000\004\076\243\001\002\000\010" +
    "\037\uff98\052\uff98\075\uff98\001\002\000\006\037\245\041" +
    "\135\001\002\000\110\005\uff93\006\uff93\007\uff93\010\uff93" +
    "\011\uff93\012\uff93\013\uff93\015\uff93\017\uff93\020\uff93\021" +
    "\uff93\022\uff93\023\uff93\024\uff93\025\uff93\026\uff93\027\uff93" +
    "\030\uff93\031\uff93\032\uff93\033\uff93\034\uff93\035\uff93\036" +
    "\uff93\044\uff93\045\uff93\056\uff93\061\uff93\071\uff93\072\uff93" +
    "\073\uff93\074\uff93\077\uff93\100\uff93\101\uff93\001\002\000" +
    "\110\005\uff99\006\uff99\007\uff99\010\uff99\011\uff99\012\uff99" +
    "\013\uff99\015\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023" +
    "\uff99\024\uff99\025\uff99\026\uff99\027\uff99\030\uff99\031\uff99" +
    "\032\uff99\033\uff99\034\uff99\035\uff99\036\uff99\044\uff99\045" +
    "\uff99\056\uff99\061\uff99\071\uff99\072\uff99\073\uff99\074\uff99" +
    "\077\uff99\100\uff99\101\uff99\001\002\000\004\071\071\001" +
    "\002\000\032\033\117\034\122\045\116\056\120\061\105" +
    "\071\112\072\104\073\111\074\113\077\106\100\114\101" +
    "\115\001\002\000\110\005\uff8d\006\uff8d\007\uff8d\010\uff8d" +
    "\011\uff8d\012\uff8d\013\uff8d\015\uff8d\017\uff8d\020\uff8d\021" +
    "\uff8d\022\uff8d\023\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d" +
    "\030\uff8d\031\uff8d\032\uff8d\033\uff8d\034\uff8d\035\uff8d\036" +
    "\uff8d\044\uff8d\045\uff8d\056\uff8d\061\uff8d\071\uff8d\072\uff8d" +
    "\073\uff8d\074\uff8d\077\uff8d\100\uff8d\101\uff8d\001\002\000" +
    "\110\005\uff8a\006\uff8a\007\uff8a\010\uff8a\011\uff8a\012\uff8a" +
    "\013\uff8a\015\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a\023" +
    "\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a" +
    "\032\uff8a\033\uff8a\034\uff8a\035\uff8a\036\uff8a\044\uff8a\045" +
    "\uff8a\056\uff8a\061\uff8a\071\uff8a\072\uff8a\073\uff8a\074\uff8a" +
    "\077\uff8a\100\uff8a\101\uff8a\001\002\000\046\037\254\047" +
    "\154\050\147\051\162\053\145\054\153\055\157\057\142" +
    "\060\161\062\155\063\160\064\143\065\150\066\146\110" +
    "\152\111\144\112\151\113\156\001\002\000\110\005\uff8c" +
    "\006\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c\013\uff8c\015" +
    "\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c\023\uff8c\024\uff8c" +
    "\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c\033" +
    "\uff8c\034\uff8c\035\uff8c\036\uff8c\044\uff8c\045\uff8c\056\uff8c" +
    "\061\uff8c\071\uff8c\072\uff8c\073\uff8c\074\uff8c\077\uff8c\100" +
    "\uff8c\101\uff8c\001\002\000\110\005\uff8b\006\uff8b\007\uff8b" +
    "\010\uff8b\011\uff8b\012\uff8b\013\uff8b\015\uff8b\017\uff8b\020" +
    "\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b\026\uff8b" +
    "\027\uff8b\030\uff8b\031\uff8b\032\uff8b\033\uff8b\034\uff8b\035" +
    "\uff8b\036\uff8b\044\uff8b\045\uff8b\056\uff8b\061\uff8b\071\uff8b" +
    "\072\uff8b\073\uff8b\074\uff8b\077\uff8b\100\uff8b\101\uff8b\001" +
    "\002\000\004\045\257\001\002\000\016\005\016\006\047" +
    "\007\040\010\024\011\043\046\262\001\002\000\006\041" +
    "\uff83\046\uff83\001\002\000\004\071\276\001\002\000\004" +
    "\043\270\001\002\000\006\041\265\046\266\001\002\000" +
    "\066\005\uff88\006\uff88\007\uff88\010\uff88\011\uff88\012\uff88" +
    "\013\uff88\015\uff88\017\uff88\020\uff88\021\uff88\022\uff88\023" +
    "\uff88\024\uff88\025\uff88\026\uff88\027\uff88\030\uff88\031\uff88" +
    "\032\uff88\033\uff88\034\uff88\035\uff88\036\uff88\044\uff88\071" +
    "\uff88\001\002\000\014\005\016\006\047\007\040\010\024" +
    "\011\043\001\002\000\004\043\270\001\002\000\066\005" +
    "\uff86\006\uff86\007\uff86\010\uff86\011\uff86\012\uff86\013\uff86" +
    "\015\uff86\017\uff86\020\uff86\021\uff86\022\uff86\023\uff86\024" +
    "\uff86\025\uff86\026\uff86\027\uff86\030\uff86\031\uff86\032\uff86" +
    "\033\uff86\034\uff86\035\uff86\036\uff86\044\uff86\071\uff86\001" +
    "\002\000\060\005\016\006\047\007\040\010\024\011\043" +
    "\012\034\013\067\015\020\017\050\021\037\023\063\024" +
    "\025\025\060\026\032\027\045\030\041\031\062\032\015" +
    "\033\053\034\052\035\014\036\023\071\036\001\002\000" +
    "\062\005\016\006\047\007\040\010\024\011\043\012\034" +
    "\013\067\015\020\017\050\021\037\023\063\024\025\025" +
    "\060\026\032\027\045\030\041\031\062\032\015\033\053" +
    "\034\052\035\014\036\023\044\272\071\036\001\002\000" +
    "\066\005\uff85\006\uff85\007\uff85\010\uff85\011\uff85\012\uff85" +
    "\013\uff85\015\uff85\017\uff85\020\uff85\021\uff85\022\uff85\023" +
    "\uff85\024\uff85\025\uff85\026\uff85\027\uff85\030\uff85\031\uff85" +
    "\032\uff85\033\uff85\034\uff85\035\uff85\036\uff85\044\uff85\071" +
    "\uff85\001\002\000\066\005\ufff9\006\ufff9\007\ufff9\010\ufff9" +
    "\011\ufff9\012\ufff9\013\ufff9\015\ufff9\017\ufff9\020\ufff9\021" +
    "\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9" +
    "\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036" +
    "\ufff9\044\ufff9\071\ufff9\001\002\000\006\041\uff84\046\uff84" +
    "\001\002\000\066\005\uff87\006\uff87\007\uff87\010\uff87\011" +
    "\uff87\012\uff87\013\uff87\015\uff87\017\uff87\020\uff87\021\uff87" +
    "\022\uff87\023\uff87\024\uff87\025\uff87\026\uff87\027\uff87\030" +
    "\uff87\031\uff87\032\uff87\033\uff87\034\uff87\035\uff87\036\uff87" +
    "\044\uff87\071\uff87\001\002\000\006\041\uff82\046\uff82\001" +
    "\002\000\010\012\302\013\067\071\300\001\002\000\016" +
    "\052\316\067\340\070\335\075\223\110\315\111\317\001" +
    "\002\000\032\033\117\034\122\045\116\056\120\061\105" +
    "\071\112\072\104\073\111\074\113\077\106\100\114\101" +
    "\115\001\002\000\004\013\067\001\002\000\032\033\117" +
    "\034\122\045\116\056\120\061\105\071\112\072\104\073" +
    "\111\074\113\077\106\100\114\101\115\001\002\000\046" +
    "\037\305\047\154\050\147\051\162\053\145\054\153\055" +
    "\157\057\142\060\161\062\155\063\160\064\143\065\150" +
    "\066\146\110\152\111\144\112\151\113\156\001\002\000" +
    "\004\071\306\001\002\000\014\052\316\067\321\070\314" +
    "\110\315\111\317\001\002\000\004\046\310\001\002\000" +
    "\004\043\311\001\002\000\060\005\016\006\047\007\040" +
    "\010\024\011\043\012\034\013\067\015\020\017\050\021" +
    "\037\023\063\024\025\025\060\026\032\027\045\030\041" +
    "\031\062\032\015\033\053\034\052\035\014\036\023\071" +
    "\036\001\002\000\062\005\016\006\047\007\040\010\024" +
    "\011\043\012\034\013\067\015\020\017\050\021\037\023" +
    "\063\024\025\025\060\026\032\027\045\030\041\031\062" +
    "\032\015\033\053\034\052\035\014\036\023\044\313\071" +
    "\036\001\002\000\066\005\uffa0\006\uffa0\007\uffa0\010\uffa0" +
    "\011\uffa0\012\uffa0\013\uffa0\015\uffa0\017\uffa0\020\uffa0\021" +
    "\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0" +
    "\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036" +
    "\uffa0\044\uffa0\071\uffa0\001\002\000\004\046\uff76\001\002" +
    "\000\004\052\324\001\002\000\032\033\uff7b\034\uff7b\045" +
    "\uff7b\056\uff7b\061\uff7b\071\uff7b\072\uff7b\073\uff7b\074\uff7b" +
    "\077\uff7b\100\uff7b\101\uff7b\001\002\000\004\052\323\001" +
    "\002\000\032\033\117\034\122\045\116\056\120\061\105" +
    "\071\112\072\104\073\111\074\113\077\106\100\114\101" +
    "\115\001\002\000\004\046\uff77\001\002\000\046\046\uff78" +
    "\047\154\050\147\051\162\053\145\054\153\055\157\057" +
    "\142\060\161\062\155\063\160\064\143\065\150\066\146" +
    "\110\152\111\144\112\151\113\156\001\002\000\032\033" +
    "\uff79\034\uff79\045\uff79\056\uff79\061\uff79\071\uff79\072\uff79" +
    "\073\uff79\074\uff79\077\uff79\100\uff79\101\uff79\001\002\000" +
    "\032\033\uff7a\034\uff7a\045\uff7a\056\uff7a\061\uff7a\071\uff7a" +
    "\072\uff7a\073\uff7a\074\uff7a\077\uff7a\100\uff7a\101\uff7a\001" +
    "\002\000\110\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f" +
    "\012\uff9f\013\uff9f\015\uff9f\017\uff9f\020\uff9f\021\uff9f\022" +
    "\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f" +
    "\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\044" +
    "\uff9f\045\uff9f\056\uff9f\061\uff9f\071\uff9f\072\uff9f\073\uff9f" +
    "\074\uff9f\077\uff9f\100\uff9f\101\uff9f\001\002\000\046\037" +
    "\327\047\154\050\147\051\162\053\145\054\153\055\157" +
    "\057\142\060\161\062\155\063\160\064\143\065\150\066" +
    "\146\110\152\111\144\112\151\113\156\001\002\000\004" +
    "\071\306\001\002\000\004\046\331\001\002\000\004\043" +
    "\332\001\002\000\060\005\016\006\047\007\040\010\024" +
    "\011\043\012\034\013\067\015\020\017\050\021\037\023" +
    "\063\024\025\025\060\026\032\027\045\030\041\031\062" +
    "\032\015\033\053\034\052\035\014\036\023\071\036\001" +
    "\002\000\062\005\016\006\047\007\040\010\024\011\043" +
    "\012\034\013\067\015\020\017\050\021\037\023\063\024" +
    "\025\025\060\026\032\027\045\030\041\031\062\032\015" +
    "\033\053\034\052\035\014\036\023\044\334\071\036\001" +
    "\002\000\066\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1" +
    "\012\uffa1\013\uffa1\015\uffa1\017\uffa1\020\uffa1\021\uffa1\022" +
    "\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1" +
    "\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\044" +
    "\uffa1\071\uffa1\001\002\000\004\037\347\001\002\000\012" +
    "\052\316\075\231\110\315\111\317\001\002\000\032\033" +
    "\117\034\122\045\116\056\120\061\105\071\112\072\104" +
    "\073\111\074\113\077\106\100\114\101\115\001\002\000" +
    "\004\037\341\001\002\000\110\005\uff71\006\uff71\007\uff71" +
    "\010\uff71\011\uff71\012\uff71\013\uff71\015\uff71\017\uff71\020" +
    "\uff71\021\uff71\022\uff71\023\uff71\024\uff71\025\uff71\026\uff71" +
    "\027\uff71\030\uff71\031\uff71\032\uff71\033\uff71\034\uff71\035" +
    "\uff71\036\uff71\044\uff71\045\uff71\056\uff71\061\uff71\071\uff71" +
    "\072\uff71\073\uff71\074\uff71\077\uff71\100\uff71\101\uff71\001" +
    "\002\000\046\037\343\047\154\050\147\051\162\053\145" +
    "\054\153\055\157\057\142\060\161\062\155\063\160\064" +
    "\143\065\150\066\146\110\152\111\144\112\151\113\156" +
    "\001\002\000\110\005\uff73\006\uff73\007\uff73\010\uff73\011" +
    "\uff73\012\uff73\013\uff73\015\uff73\017\uff73\020\uff73\021\uff73" +
    "\022\uff73\023\uff73\024\uff73\025\uff73\026\uff73\027\uff73\030" +
    "\uff73\031\uff73\032\uff73\033\uff73\034\uff73\035\uff73\036\uff73" +
    "\044\uff73\045\uff73\056\uff73\061\uff73\071\uff73\072\uff73\073" +
    "\uff73\074\uff73\077\uff73\100\uff73\101\uff73\001\002\000\032" +
    "\033\117\034\122\045\116\056\120\061\105\071\112\072" +
    "\104\073\111\074\113\077\106\100\114\101\115\001\002" +
    "\000\046\037\346\047\154\050\147\051\162\053\145\054" +
    "\153\055\157\057\142\060\161\062\155\063\160\064\143" +
    "\065\150\066\146\110\152\111\144\112\151\113\156\001" +
    "\002\000\110\005\uff72\006\uff72\007\uff72\010\uff72\011\uff72" +
    "\012\uff72\013\uff72\015\uff72\017\uff72\020\uff72\021\uff72\022" +
    "\uff72\023\uff72\024\uff72\025\uff72\026\uff72\027\uff72\030\uff72" +
    "\031\uff72\032\uff72\033\uff72\034\uff72\035\uff72\036\uff72\044" +
    "\uff72\045\uff72\056\uff72\061\uff72\071\uff72\072\uff72\073\uff72" +
    "\074\uff72\077\uff72\100\uff72\101\uff72\001\002\000\110\005" +
    "\uff70\006\uff70\007\uff70\010\uff70\011\uff70\012\uff70\013\uff70" +
    "\015\uff70\017\uff70\020\uff70\021\uff70\022\uff70\023\uff70\024" +
    "\uff70\025\uff70\026\uff70\027\uff70\030\uff70\031\uff70\032\uff70" +
    "\033\uff70\034\uff70\035\uff70\036\uff70\044\uff70\045\uff70\056" +
    "\uff70\061\uff70\071\uff70\072\uff70\073\uff70\074\uff70\077\uff70" +
    "\100\uff70\101\uff70\001\002\000\032\033\117\034\122\045" +
    "\116\056\120\061\105\071\112\072\104\073\111\074\113" +
    "\077\106\100\114\101\115\001\002\000\006\041\204\046" +
    "\352\001\002\000\004\037\353\001\002\000\066\005\uffae" +
    "\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae\015" +
    "\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae" +
    "\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033" +
    "\uffae\034\uffae\035\uffae\036\uffae\044\uffae\071\uffae\001\002" +
    "\000\060\005\016\006\047\007\040\010\024\011\043\012" +
    "\034\013\067\015\020\017\050\021\037\023\063\024\025" +
    "\025\060\026\032\027\045\030\041\031\062\032\015\033" +
    "\053\034\052\035\014\036\023\071\036\001\002\000\062" +
    "\005\016\006\047\007\040\010\024\011\043\012\034\013" +
    "\067\015\020\017\050\021\037\023\063\024\025\025\060" +
    "\026\032\027\045\030\041\031\062\032\015\033\053\034" +
    "\052\035\014\036\023\044\356\071\036\001\002\000\004" +
    "\024\357\001\002\000\004\045\360\001\002\000\032\033" +
    "\117\034\122\045\116\056\120\061\105\071\112\072\104" +
    "\073\111\074\113\077\106\100\114\101\115\001\002\000" +
    "\046\046\362\047\154\050\147\051\162\053\145\054\153" +
    "\055\157\057\142\060\161\062\155\063\160\064\143\065" +
    "\150\066\146\110\152\111\144\112\151\113\156\001\002" +
    "\000\004\037\363\001\002\000\066\005\uffa3\006\uffa3\007" +
    "\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\015\uffa3\017\uffa3" +
    "\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026" +
    "\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3" +
    "\035\uffa3\036\uffa3\044\uffa3\071\uffa3\001\002\000\006\043" +
    "\130\071\365\001\002\000\004\046\371\001\002\000\006" +
    "\041\135\046\367\001\002\000\004\037\370\001\002\000" +
    "\066\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1" +
    "\013\uffb1\015\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023" +
    "\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1" +
    "\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\044\uffb1\071" +
    "\uffb1\001\002\000\004\037\372\001\002\000\066\005\uffb2" +
    "\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\015" +
    "\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2" +
    "\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033" +
    "\uffb2\034\uffb2\035\uffb2\036\uffb2\044\uffb2\071\uffb2\001\002" +
    "\000\010\043\130\071\374\074\376\001\002\000\004\046" +
    "\u0103\001\002\000\006\041\135\046\u0101\001\002\000\004" +
    "\046\377\001\002\000\004\037\u0100\001\002\000\066\005" +
    "\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa" +
    "\015\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024" +
    "\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa" +
    "\033\uffaa\034\uffaa\035\uffaa\036\uffaa\044\uffaa\071\uffaa\001" +
    "\002\000\004\037\u0102\001\002\000\066\005\uffab\006\uffab" +
    "\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab\015\uffab\017" +
    "\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab" +
    "\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034" +
    "\uffab\035\uffab\036\uffab\044\uffab\071\uffab\001\002\000\004" +
    "\037\u0104\001\002\000\066\005\uffac\006\uffac\007\uffac\010" +
    "\uffac\011\uffac\012\uffac\013\uffac\015\uffac\017\uffac\020\uffac" +
    "\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027" +
    "\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac" +
    "\036\uffac\044\uffac\071\uffac\001\002\000\032\033\117\034" +
    "\122\045\116\056\120\061\105\071\112\072\104\073\111" +
    "\074\113\077\106\100\114\101\115\001\002\000\046\046" +
    "\u0107\047\154\050\147\051\162\053\145\054\153\055\157" +
    "\057\142\060\161\062\155\063\160\064\143\065\150\066" +
    "\146\110\152\111\144\112\151\113\156\001\002\000\004" +
    "\043\u0108\001\002\000\006\020\u010d\022\u0109\001\002\000" +
    "\004\042\u0114\001\002\000\010\020\u010d\022\u0109\044\u0113" +
    "\001\002\000\010\020\uff6c\022\uff6c\044\uff6c\001\002\000" +
    "\010\020\uff6d\022\uff6d\044\uff6d\001\002\000\032\033\117" +
    "\034\122\045\116\056\120\061\105\071\112\072\104\073" +
    "\111\074\113\077\106\100\114\101\115\001\002\000\046" +
    "\042\u010f\047\154\050\147\051\162\053\145\054\153\055" +
    "\157\057\142\060\161\062\155\063\160\064\143\065\150" +
    "\066\146\110\152\111\144\112\151\113\156\001\002\000" +
    "\060\005\016\006\047\007\040\010\024\011\043\012\034" +
    "\013\067\015\020\017\050\021\037\023\063\024\025\025" +
    "\060\026\032\027\045\030\041\031\062\032\015\033\053" +
    "\034\052\035\014\036\023\071\036\001\002\000\066\005" +
    "\016\006\047\007\040\010\024\011\043\012\034\013\067" +
    "\015\020\017\050\020\uff6a\021\037\022\uff6a\023\063\024" +
    "\025\025\060\026\032\027\045\030\041\031\062\032\015" +
    "\033\053\034\052\035\014\036\023\044\uff6a\071\036\001" +
    "\002\000\010\020\uff6b\022\uff6b\044\uff6b\001\002\000\010" +
    "\020\uff6e\022\uff6e\044\uff6e\001\002\000\066\005\uff6f\006" +
    "\uff6f\007\uff6f\010\uff6f\011\uff6f\012\uff6f\013\uff6f\015\uff6f" +
    "\017\uff6f\020\uff6f\021\uff6f\022\uff6f\023\uff6f\024\uff6f\025" +
    "\uff6f\026\uff6f\027\uff6f\030\uff6f\031\uff6f\032\uff6f\033\uff6f" +
    "\034\uff6f\035\uff6f\036\uff6f\044\uff6f\071\uff6f\001\002\000" +
    "\060\005\016\006\047\007\040\010\024\011\043\012\034" +
    "\013\067\015\020\017\050\021\037\023\063\024\025\025" +
    "\060\026\032\027\045\030\041\031\062\032\015\033\053" +
    "\034\052\035\014\036\023\071\036\001\002\000\066\005" +
    "\016\006\047\007\040\010\024\011\043\012\034\013\067" +
    "\015\020\017\050\020\uff69\021\037\022\uff69\023\063\024" +
    "\025\025\060\026\032\027\045\030\041\031\062\032\015" +
    "\033\053\034\052\035\014\036\023\044\uff69\071\036\001" +
    "\002\000\046\037\u0118\047\154\050\147\051\162\053\145" +
    "\054\153\055\157\057\142\060\161\062\155\063\160\064" +
    "\143\065\150\066\146\110\152\111\144\112\151\113\156" +
    "\001\002\000\066\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011" +
    "\uffe3\012\uffe3\013\uffe3\015\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030" +
    "\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3" +
    "\044\uffe3\071\uffe3\001\002\000\066\005\uffe4\006\uffe4\007" +
    "\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\015\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026" +
    "\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\035\uffe4\036\uffe4\044\uffe4\071\uffe4\001\002\000\032\033" +
    "\117\034\122\045\116\056\120\061\105\071\112\072\104" +
    "\073\111\074\113\077\106\100\114\101\115\001\002\000" +
    "\006\041\204\046\u011b\001\002\000\004\037\u011c\001\002" +
    "\000\066\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba\012" +
    "\uffba\013\uffba\015\uffba\017\uffba\020\uffba\021\uffba\022\uffba" +
    "\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031" +
    "\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\044\uffba" +
    "\071\uffba\001\002\000\034\033\117\034\122\045\116\046" +
    "\u011f\056\120\061\105\071\112\072\104\073\111\074\113" +
    "\077\106\100\114\101\115\001\002\000\006\041\204\046" +
    "\u0121\001\002\000\004\037\u0120\001\002\000\066\005\uffe2" +
    "\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\015" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033" +
    "\uffe2\034\uffe2\035\uffe2\036\uffe2\044\uffe2\071\uffe2\001\002" +
    "\000\004\037\u0122\001\002\000\066\005\uffe1\006\uffe1\007" +
    "\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\015\uffe1\017\uffe1" +
    "\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026" +
    "\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\036\uffe1\044\uffe1\071\uffe1\001\002\000\004\071" +
    "\u0124\001\002\000\004\045\u0125\001\002\000\016\005\016" +
    "\006\047\007\040\010\024\011\043\046\262\001\002\000" +
    "\066\005\uff89\006\uff89\007\uff89\010\uff89\011\uff89\012\uff89" +
    "\013\uff89\015\uff89\017\uff89\020\uff89\021\uff89\022\uff89\023" +
    "\uff89\024\uff89\025\uff89\026\uff89\027\uff89\030\uff89\031\uff89" +
    "\032\uff89\033\uff89\034\uff89\035\uff89\036\uff89\044\uff89\071" +
    "\uff89\001\002\000\070\005\uff66\006\uff66\007\uff66\010\uff66" +
    "\011\uff66\012\uff66\013\uff66\015\uff66\016\u012a\017\uff66\020" +
    "\uff66\021\uff66\022\uff66\023\uff66\024\uff66\025\uff66\026\uff66" +
    "\027\uff66\030\uff66\031\uff66\032\uff66\033\uff66\034\uff66\035" +
    "\uff66\036\uff66\044\uff66\071\uff66\001\002\000\066\005\uff67" +
    "\006\uff67\007\uff67\010\uff67\011\uff67\012\uff67\013\uff67\015" +
    "\uff67\017\uff67\020\uff67\021\uff67\022\uff67\023\uff67\024\uff67" +
    "\025\uff67\026\uff67\027\uff67\030\uff67\031\uff67\032\uff67\033" +
    "\uff67\034\uff67\035\uff67\036\uff67\044\uff67\071\uff67\001\002" +
    "\000\070\005\uff60\006\uff60\007\uff60\010\uff60\011\uff60\012" +
    "\uff60\013\uff60\015\uff60\016\uff60\017\uff60\020\uff60\021\uff60" +
    "\022\uff60\023\uff60\024\uff60\025\uff60\026\uff60\027\uff60\030" +
    "\uff60\031\uff60\032\uff60\033\uff60\034\uff60\035\uff60\036\uff60" +
    "\044\uff60\071\uff60\001\002\000\006\015\u012b\043\u012c\001" +
    "\002\000\004\045\u012f\001\002\000\060\005\016\006\047" +
    "\007\040\010\024\011\043\012\034\013\067\015\020\017" +
    "\050\021\037\023\063\024\025\025\060\026\032\027\045" +
    "\030\041\031\062\032\015\033\053\034\052\035\014\036" +
    "\023\071\036\001\002\000\062\005\016\006\047\007\040" +
    "\010\024\011\043\012\034\013\067\015\020\017\050\021" +
    "\037\023\063\024\025\025\060\026\032\027\045\030\041" +
    "\031\062\032\015\033\053\034\052\035\014\036\023\044" +
    "\u012e\071\036\001\002\000\066\005\uff63\006\uff63\007\uff63" +
    "\010\uff63\011\uff63\012\uff63\013\uff63\015\uff63\017\uff63\020" +
    "\uff63\021\uff63\022\uff63\023\uff63\024\uff63\025\uff63\026\uff63" +
    "\027\uff63\030\uff63\031\uff63\032\uff63\033\uff63\034\uff63\035" +
    "\uff63\036\uff63\044\uff63\071\uff63\001\002\000\032\033\117" +
    "\034\122\045\116\056\120\061\105\071\112\072\104\073" +
    "\111\074\113\077\106\100\114\101\115\001\002\000\046" +
    "\046\u0131\047\154\050\147\051\162\053\145\054\153\055" +
    "\157\057\142\060\161\062\155\063\160\064\143\065\150" +
    "\066\146\110\152\111\144\112\151\113\156\001\002\000" +
    "\004\043\u0132\001\002\000\060\005\016\006\047\007\040" +
    "\010\024\011\043\012\034\013\067\015\020\017\050\021" +
    "\037\023\063\024\025\025\060\026\032\027\045\030\041" +
    "\031\062\032\015\033\053\034\052\035\014\036\023\071" +
    "\036\001\002\000\062\005\016\006\047\007\040\010\024" +
    "\011\043\012\034\013\067\015\020\017\050\021\037\023" +
    "\063\024\025\025\060\026\032\027\045\030\041\031\062" +
    "\032\015\033\053\034\052\035\014\036\023\044\u0134\071" +
    "\036\001\002\000\070\005\uff62\006\uff62\007\uff62\010\uff62" +
    "\011\uff62\012\uff62\013\uff62\015\uff62\016\uff62\017\uff62\020" +
    "\uff62\021\uff62\022\uff62\023\uff62\024\uff62\025\uff62\026\uff62" +
    "\027\uff62\030\uff62\031\uff62\032\uff62\033\uff62\034\uff62\035" +
    "\uff62\036\uff62\044\uff62\071\uff62\001\002\000\066\005\uff65" +
    "\006\uff65\007\uff65\010\uff65\011\uff65\012\uff65\013\uff65\015" +
    "\uff65\017\uff65\020\uff65\021\uff65\022\uff65\023\uff65\024\uff65" +
    "\025\uff65\026\uff65\027\uff65\030\uff65\031\uff65\032\uff65\033" +
    "\uff65\034\uff65\035\uff65\036\uff65\044\uff65\071\uff65\001\002" +
    "\000\070\005\uff61\006\uff61\007\uff61\010\uff61\011\uff61\012" +
    "\uff61\013\uff61\015\uff61\016\uff61\017\uff61\020\uff61\021\uff61" +
    "\022\uff61\023\uff61\024\uff61\025\uff61\026\uff61\027\uff61\030" +
    "\uff61\031\uff61\032\uff61\033\uff61\034\uff61\035\uff61\036\uff61" +
    "\044\uff61\071\uff61\001\002\000\032\033\117\034\122\045" +
    "\116\056\120\061\105\071\112\072\104\073\111\074\113" +
    "\077\106\100\114\101\115\001\002\000\046\046\u0139\047" +
    "\154\050\147\051\162\053\145\054\153\055\157\057\142" +
    "\060\161\062\155\063\160\064\143\065\150\066\146\110" +
    "\152\111\144\112\151\113\156\001\002\000\004\043\u013a" +
    "\001\002\000\060\005\016\006\047\007\040\010\024\011" +
    "\043\012\034\013\067\015\020\017\050\021\037\023\063" +
    "\024\025\025\060\026\032\027\045\030\041\031\062\032" +
    "\015\033\053\034\052\035\014\036\023\071\036\001\002" +
    "\000\062\005\016\006\047\007\040\010\024\011\043\012" +
    "\034\013\067\015\020\017\050\021\037\023\063\024\025" +
    "\025\060\026\032\027\045\030\041\031\062\032\015\033" +
    "\053\034\052\035\014\036\023\044\u013c\071\036\001\002" +
    "\000\066\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012" +
    "\uffa2\013\uffa2\015\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2" +
    "\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031" +
    "\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\044\uffa2" +
    "\071\uffa2\001\002\000\004\046\u013e\001\002\000\004\043" +
    "\u013f\001\002\000\060\005\016\006\047\007\040\010\024" +
    "\011\043\012\034\013\067\015\020\017\050\021\037\023" +
    "\063\024\025\025\060\026\032\027\045\030\041\031\062" +
    "\032\015\033\053\034\052\035\014\036\023\071\036\001" +
    "\002\000\062\005\016\006\047\007\040\010\024\011\043" +
    "\012\034\013\067\015\020\017\050\021\037\023\063\024" +
    "\025\025\060\026\032\027\045\030\041\031\062\032\015" +
    "\033\053\034\052\035\014\036\023\044\u0141\071\036\001" +
    "\002\000\066\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde" +
    "\012\uffde\013\uffde\015\uffde\017\uffde\020\uffde\021\uffde\022" +
    "\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde" +
    "\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\044" +
    "\uffde\071\uffde\001\002\000\004\002\uffff\001\002\000\032" +
    "\033\117\034\122\045\116\056\120\061\105\071\112\072" +
    "\104\073\111\074\113\077\106\100\114\101\115\001\002" +
    "\000\046\046\u0145\047\154\050\147\051\162\053\145\054" +
    "\153\055\157\057\142\060\161\062\155\063\160\064\143" +
    "\065\150\066\146\110\152\111\144\112\151\113\156\001" +
    "\002\000\004\043\u0146\001\002\000\060\005\016\006\047" +
    "\007\040\010\024\011\043\012\034\013\067\015\020\017" +
    "\050\021\037\023\063\024\025\025\060\026\032\027\045" +
    "\030\041\031\062\032\015\033\053\034\052\035\014\036" +
    "\023\071\036\001\002\000\062\005\016\006\047\007\040" +
    "\010\024\011\043\012\034\013\067\015\020\017\050\021" +
    "\037\023\063\024\025\025\060\026\032\027\045\030\041" +
    "\031\062\032\015\033\053\034\052\035\014\036\023\044" +
    "\u0148\071\036\001\002\000\070\005\uff64\006\uff64\007\uff64" +
    "\010\uff64\011\uff64\012\uff64\013\uff64\015\uff64\016\uff64\017" +
    "\uff64\020\uff64\021\uff64\022\uff64\023\uff64\024\uff64\025\uff64" +
    "\026\uff64\027\uff64\030\uff64\031\uff64\032\uff64\033\uff64\034" +
    "\uff64\035\uff64\036\uff64\044\uff64\071\uff64\001\002\000\006" +
    "\043\130\071\u014a\001\002\000\004\041\u0155\001\002\000" +
    "\004\041\u014c\001\002\000\016\043\136\103\u014f\104\u014e" +
    "\105\u0150\106\u0151\107\u0152\001\002\000\004\046\u0153\001" +
    "\002\000\004\046\uffb5\001\002\000\004\046\uffb6\001\002" +
    "\000\004\046\uffb4\001\002\000\004\046\uffb3\001\002\000" +
    "\004\046\uffb7\001\002\000\004\037\u0154\001\002\000\066" +
    "\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013" +
    "\uffb9\015\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032" +
    "\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\044\uffb9\071\uffb9" +
    "\001\002\000\014\103\u014f\104\u014e\105\u0150\106\u0151\107" +
    "\u0152\001\002\000\004\046\u0157\001\002\000\004\037\u0158" +
    "\001\002\000\066\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011" +
    "\uffb8\012\uffb8\013\uffb8\015\uffb8\017\uffb8\020\uffb8\021\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030" +
    "\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8" +
    "\044\uffb8\071\uffb8\001\002\000\032\033\117\034\122\045" +
    "\116\056\120\061\105\071\112\072\104\073\111\074\113" +
    "\077\106\100\114\101\115\001\002\000\006\041\204\046" +
    "\u015b\001\002\000\004\037\u015c\001\002\000\066\005\uffbd" +
    "\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\015" +
    "\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd" +
    "\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033" +
    "\uffbd\034\uffbd\035\uffbd\036\uffbd\044\uffbd\071\uffbd\001\002" +
    "\000\006\004\u015e\043\ufffe\001\002\000\004\071\u0160\001" +
    "\002\000\004\043\ufffd\001\002\000\006\041\ufffa\043\ufffa" +
    "\001\002\000\006\041\u0162\043\ufffc\001\002\000\004\071" +
    "\u0163\001\002\000\006\041\ufffb\043\ufffb\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0162\000\010\002\003\077\004\100\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\003\020\004\034\005\064\006\045\007" +
    "\054\010\025\012\053\023\010\024\060\025\030\033\043" +
    "\034\012\040\021\043\055\044\027\045\041\047\056\050" +
    "\032\056\065\061\050\065\063\066\011\072\016\073\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\004\272\005" +
    "\064\006\045\007\054\010\025\012\053\023\010\024\060" +
    "\025\030\033\043\034\012\040\021\043\055\044\027\045" +
    "\041\047\056\050\032\056\065\061\050\065\063\066\011" +
    "\072\016\073\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\074\u0127\075\u0128\076\u0126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\056\u0122\061\324\001\001\000\002\001\001\000" +
    "\006\027\335\064\336\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\021\u0115\032\101\036\122" +
    "\041\120\042\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\056\067" +
    "\001\001\000\004\062\071\001\001\000\004\063\250\001" +
    "\001\000\002\001\001\000\004\014\074\001\001\000\006" +
    "\015\076\016\077\001\001\000\002\001\001\000\004\014" +
    "\245\001\001\000\002\001\001\000\004\017\236\001\001" +
    "\000\016\020\102\021\107\032\101\036\122\041\120\042" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\021\233\032\101\036\122\041\120\042" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\021\216\032\101\036\122\041\120\042\106\001\001\000" +
    "\002\001\001\000\014\021\210\032\101\036\122\041\120" +
    "\042\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\021\131\022" +
    "\130\030\133\031\132\032\101\036\122\041\120\042\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\021\131" +
    "\022\130\030\133\031\136\032\101\036\122\041\120\042" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\021\202\032\101\036\122\041\120\042" +
    "\106\001\001\000\014\021\201\032\101\036\122\041\120" +
    "\042\106\001\001\000\014\021\200\032\101\036\122\041" +
    "\120\042\106\001\001\000\014\021\177\032\101\036\122" +
    "\041\120\042\106\001\001\000\014\021\176\032\101\036" +
    "\122\041\120\042\106\001\001\000\014\021\175\032\101" +
    "\036\122\041\120\042\106\001\001\000\014\021\174\032" +
    "\101\036\122\041\120\042\106\001\001\000\014\021\173" +
    "\032\101\036\122\041\120\042\106\001\001\000\014\021" +
    "\172\032\101\036\122\041\120\042\106\001\001\000\014" +
    "\021\171\032\101\036\122\041\120\042\106\001\001\000" +
    "\014\021\170\032\101\036\122\041\120\042\106\001\001" +
    "\000\014\021\167\032\101\036\122\041\120\042\106\001" +
    "\001\000\014\021\166\032\101\036\122\041\120\042\106" +
    "\001\001\000\014\021\165\032\101\036\122\041\120\042" +
    "\106\001\001\000\014\021\164\032\101\036\122\041\120" +
    "\042\106\001\001\000\014\021\163\032\101\036\122\041" +
    "\120\042\106\001\001\000\014\021\162\032\101\036\122" +
    "\041\120\042\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\021\204" +
    "\032\101\036\122\041\120\042\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\213\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\021\131\022\225\032\101\036\122\041\120\042\106" +
    "\001\001\000\014\021\223\032\101\036\122\041\120\042" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\021" +
    "\231\032\101\036\122\041\120\042\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\243\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\020\241\021\107\032\101\036\122\041" +
    "\120\042\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\062\254\001\001\000\014\021\252\032\101\036\122" +
    "\041\120\042\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\051\263\053\262\054\257\056" +
    "\260\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\274\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\054\273\056\260\001\001\000\004\052\266\001\001" +
    "\000\002\001\001\000\062\003\270\004\034\005\064\006" +
    "\045\007\054\010\025\012\053\023\010\024\060\025\030" +
    "\033\043\034\012\040\021\043\055\044\027\045\041\047" +
    "\056\050\032\056\065\061\050\065\063\066\011\072\016" +
    "\073\026\001\001\000\060\004\272\005\064\006\045\007" +
    "\054\010\025\012\053\023\010\024\060\025\030\033\043" +
    "\034\012\040\021\043\055\044\027\045\041\047\056\050" +
    "\032\056\065\061\050\065\063\066\011\072\016\073\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\047\300" +
    "\061\050\065\302\001\001\000\006\027\335\064\336\001" +
    "\001\000\014\021\325\032\101\036\122\041\120\042\106" +
    "\001\001\000\004\061\324\001\001\000\014\021\303\032" +
    "\101\036\122\041\120\042\106\001\001\000\002\001\001" +
    "\000\004\046\306\001\001\000\004\064\317\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\003\311\004\034" +
    "\005\064\006\045\007\054\010\025\012\053\023\010\024" +
    "\060\025\030\033\043\034\012\040\021\043\055\044\027" +
    "\045\041\047\056\050\032\056\065\061\050\065\063\066" +
    "\011\072\016\073\026\001\001\000\060\004\272\005\064" +
    "\006\045\007\054\010\025\012\053\023\010\024\060\025" +
    "\030\033\043\034\012\040\021\043\055\044\027\045\041" +
    "\047\056\050\032\056\065\061\050\065\063\066\011\072" +
    "\016\073\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\021\321\032\101\036\122\041\120\042\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\327\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\003\332\004\034\005\064\006\045\007\054\010\025" +
    "\012\053\023\010\024\060\025\030\033\043\034\012\040" +
    "\021\043\055\044\027\045\041\047\056\050\032\056\065" +
    "\061\050\065\063\066\011\072\016\073\026\001\001\000" +
    "\060\004\272\005\064\006\045\007\054\010\025\012\053" +
    "\023\010\024\060\025\030\033\043\034\012\040\021\043" +
    "\055\044\027\045\041\047\056\050\032\056\065\061\050" +
    "\065\063\066\011\072\016\073\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\064\343\001\001\000\014" +
    "\021\341\032\101\036\122\041\120\042\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\021\344\032\101\036\122\041\120\042" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\021\131\022\350\032\101\036\122\041" +
    "\120\042\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\003\354\004\034\005\064\006" +
    "\045\007\054\010\025\012\053\023\010\024\060\025\030" +
    "\033\043\034\012\040\021\043\055\044\027\045\041\047" +
    "\056\050\032\056\065\061\050\065\063\066\011\072\016" +
    "\073\026\001\001\000\060\004\272\005\064\006\045\007" +
    "\054\010\025\012\053\023\010\024\060\025\030\033\043" +
    "\034\012\040\021\043\055\044\027\045\041\047\056\050" +
    "\032\056\065\061\050\065\063\066\011\072\016\073\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\021" +
    "\360\032\101\036\122\041\120\042\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\365\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\374\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\021\u0105\032\101\036\122\041" +
    "\120\042\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\067\u0109\070\u010b\071\u010a\001\001\000\002\001" +
    "\001\000\006\070\u0111\071\u0110\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\021\u010d\032\101\036\122\041" +
    "\120\042\106\001\001\000\002\001\001\000\062\003\u010f" +
    "\004\034\005\064\006\045\007\054\010\025\012\053\023" +
    "\010\024\060\025\030\033\043\034\012\040\021\043\055" +
    "\044\027\045\041\047\056\050\032\056\065\061\050\065" +
    "\063\066\011\072\016\073\026\001\001\000\060\004\272" +
    "\005\064\006\045\007\054\010\025\012\053\023\010\024" +
    "\060\025\030\033\043\034\012\040\021\043\055\044\027" +
    "\045\041\047\056\050\032\056\065\061\050\065\063\066" +
    "\011\072\016\073\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\003\u0114\004\034\005" +
    "\064\006\045\007\054\010\025\012\053\023\010\024\060" +
    "\025\030\033\043\034\012\040\021\043\055\044\027\045" +
    "\041\047\056\050\032\056\065\061\050\065\063\066\011" +
    "\072\016\073\026\001\001\000\060\004\272\005\064\006" +
    "\045\007\054\010\025\012\053\023\010\024\060\025\030" +
    "\033\043\034\012\040\021\043\055\044\027\045\041\047" +
    "\056\050\032\056\065\061\050\065\063\066\011\072\016" +
    "\073\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\021\131\022\u0119\032\101\036\122" +
    "\041\120\042\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\021\131\022\u011d\032\101" +
    "\036\122\041\120\042\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\051" +
    "\u0125\053\262\054\257\056\260\001\001\000\002\001\001" +
    "\000\006\074\u0134\075\u0135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\003\u012c\004\034\005\064\006\045\007\054\010\025\012" +
    "\053\023\010\024\060\025\030\033\043\034\012\040\021" +
    "\043\055\044\027\045\041\047\056\050\032\056\065\061" +
    "\050\065\063\066\011\072\016\073\026\001\001\000\060" +
    "\004\272\005\064\006\045\007\054\010\025\012\053\023" +
    "\010\024\060\025\030\033\043\034\012\040\021\043\055" +
    "\044\027\045\041\047\056\050\032\056\065\061\050\065" +
    "\063\066\011\072\016\073\026\001\001\000\002\001\001" +
    "\000\014\021\u012f\032\101\036\122\041\120\042\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\003\u0132" +
    "\004\034\005\064\006\045\007\054\010\025\012\053\023" +
    "\010\024\060\025\030\033\043\034\012\040\021\043\055" +
    "\044\027\045\041\047\056\050\032\056\065\061\050\065" +
    "\063\066\011\072\016\073\026\001\001\000\060\004\272" +
    "\005\064\006\045\007\054\010\025\012\053\023\010\024" +
    "\060\025\030\033\043\034\012\040\021\043\055\044\027" +
    "\045\041\047\056\050\032\056\065\061\050\065\063\066" +
    "\011\072\016\073\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\021\u0137\032\101\036" +
    "\122\041\120\042\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\003\u013a\004\034\005\064\006\045\007" +
    "\054\010\025\012\053\023\010\024\060\025\030\033\043" +
    "\034\012\040\021\043\055\044\027\045\041\047\056\050" +
    "\032\056\065\061\050\065\063\066\011\072\016\073\026" +
    "\001\001\000\060\004\272\005\064\006\045\007\054\010" +
    "\025\012\053\023\010\024\060\025\030\033\043\034\012" +
    "\040\021\043\055\044\027\045\041\047\056\050\032\056" +
    "\065\061\050\065\063\066\011\072\016\073\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\003\u013f\004\034\005\064\006\045\007\054\010\025" +
    "\012\053\023\010\024\060\025\030\033\043\034\012\040" +
    "\021\043\055\044\027\045\041\047\056\050\032\056\065" +
    "\061\050\065\063\066\011\072\016\073\026\001\001\000" +
    "\060\004\272\005\064\006\045\007\054\010\025\012\053" +
    "\023\010\024\060\025\030\033\043\034\012\040\021\043" +
    "\055\044\027\045\041\047\056\050\032\056\065\061\050" +
    "\065\063\066\011\072\016\073\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\021\u0143\032\101\036\122" +
    "\041\120\042\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\003\u0146\004\034\005\064\006\045\007\054" +
    "\010\025\012\053\023\010\024\060\025\030\033\043\034" +
    "\012\040\021\043\055\044\027\045\041\047\056\050\032" +
    "\056\065\061\050\065\063\066\011\072\016\073\026\001" +
    "\001\000\060\004\272\005\064\006\045\007\054\010\025" +
    "\012\053\023\010\024\060\025\030\033\043\034\012\040" +
    "\021\043\055\044\027\045\041\047\056\050\032\056\065" +
    "\061\050\065\063\066\011\072\016\073\026\001\001\000" +
    "\002\001\001\000\004\030\u014a\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\u014c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\u0155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\021\131\022" +
    "\u0159\032\101\036\122\041\120\042\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\101" +
    "\u015e\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\102\u0160\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    private NodoAST raiz;

    private ArrayList<Object> comList;
    private ArrayList<Object> comList2;

    public parser(java_cup.runtime.Scanner s, String param){
        this(s);
        System.out.println("Parametro desde parser: " + param);
    }

    public void syntax_error(Symbol s){
        System.out.println("Error sintactico: " + s.value.toString() + " Linea:" + s.right + " Columna:" + s.left + ". ");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.out.println("No se pudo recuperar el analizador." + " Linea:" + s.right + " Columna:" + s.left + "\n");
    }

    public NodoAST getRaiz(){
        return this.raiz;
    }

    private ArrayList<Object> unirArrayList(ArrayList<Object> lista1, ArrayList<Object> lista2){
        ArrayList<Object> listaUnida = new ArrayList<>(lista1);
        listaUnida.addAll(lista2);
        return listaUnida;
    }

    private void cambiarRaiz(NodoAST nodo){
        this.raiz = nodo;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= definir_pista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // definir_pista ::= add_extender LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); cambiarRaiz(new NodoAST("S",comList,"sus_linea")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definir_pista",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // add_extender ::= PISTA ID 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("ADD_EXTENDER", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_extender",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // add_extender ::= PISTA ID extender 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("ADD_EXTENDER", unirArrayList(comList, ((NodoAST)h2).getHijos()), "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_extender",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // extender ::= EXTIENDE ID lista_extiende 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("EXTENDER", unirArrayList(comList, ((NodoAST)h2).getHijos()), "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extender",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_extiende ::= lista_extiende COMA ID 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h2); RESULT = new NodoAST("LISTA_EXTIENDE", unirArrayList(comList, ((NodoAST)h1).getHijos()), "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_extiende",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista_extiende ::= 
            {
              Object RESULT =null;
		 comList=new ArrayList<>(); RESULT = new NodoAST("LISTA_EXTIENDE", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_extiende",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= instrucciones instruccion 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoAST("INSTRUCCIONES", unirArrayList(((NodoAST)h1).getHijos(), ((NodoAST)h2).getHijos()), "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instrucciones ::= instruccion 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoAST("INSTRUCCIONES", ((NodoAST)h1).getHijos(), "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= declaracion_variable 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= llamada_funcion 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= declaracion_funcion 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= asignacion 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= mensaje 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= instruccion_si 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= switch 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= para 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= mientras 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= hacer_mientras 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= continuar 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= reproducir 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= esperar 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= ordenarfun 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= sumarizarfun 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= longitud 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= principal 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= retornar 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= salir 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // retornar ::= RETORNA exp P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("RETORNAR", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("retornar",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // retornar ::= RETORNA P_COMA 
            {
              Object RESULT =null;
		 comList=new ArrayList<>(); RESULT=new NodoAST("RETORNAR", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("retornar",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // llamada_funcion ::= ID PARENTESIS_A PARENTESIS_C P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 comList=new ArrayList(); comList.add(h1); RESULT=new NodoAST("LLAMADA_FUNCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // llamada_funcion ::= ID PARENTESIS_A lista_expresiones PARENTESIS_C P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 comList=new ArrayList(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("LLAMADA_FUNCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // llamada_funcion_exp ::= ID PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion_exp",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // llamada_funcion_exp ::= ID PARENTESIS_A lista_expresiones PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion_exp",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // principal ::= PRINCIPAL PARENTESIS_A PARENTESIS_C LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("principal",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= exp MAS exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= exp MENOS exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= exp POR exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= exp DIVISION exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= exp MOD exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp POT exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= PARENTESIS_A exp PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp MAYOR_QUE exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp MENOR_QUE exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp MAYOR_IGUAL exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp MENOR_IGUAL exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp IGUAL exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp DIFERENTE exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= IS_NULL exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp AND exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp NAND exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp OR exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp NOR exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= exp XOR exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= NOT exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= ENTERO_VAL 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList<>(); comList2.add(new NodoAST("ENTERO_VAL", comList, "sus_linea")); RESULT = new NodoAST("EXP", comList2, "sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= DOBLE_VAL 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList<>(); comList2.add(new NodoAST("DOBLE_VAL", comList, "sus_linea")); RESULT = new NodoAST("EXP", comList2, "sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= VERDADERO 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList<>(); comList2.add(new NodoAST("VERDADERO", comList, "sus_linea")); RESULT = new NodoAST("EXP", comList2, "sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= FALSO 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList<>(); comList2.add(new NodoAST("FALSO", comList, "sus_linea")); RESULT = new NodoAST("EXP", comList2, "sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= CADENA_VAL 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList<>(); comList2.add(new NodoAST("CADENA_VAL", comList, "sus_linea")); RESULT = new NodoAST("EXP", comList2, "sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= CARACTER_VAL 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList<>(); comList2.add(new NodoAST("CARACTER_VAL", comList, "sus_linea")); RESULT = new NodoAST("EXP", comList2, "sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= llamada_funcion_exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp ::= ID 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList<>(); comList2.add(new NodoAST("ID", comList, "sus_linea")); RESULT = new NodoAST("EXP", comList2, "sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp ::= acceso_arreglo 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("EXP", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exp ::= longitud_exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exp ::= sumarizarfun_exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // acceso_arreglo ::= ID lista_corchetes_asignacion 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("ACCESO_ARREGLO",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso_arreglo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // mensaje ::= MENSAJE PARENTESIS_A lista_expresiones PARENTESIS_C P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("MENSAJE",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // lista_expresiones ::= lista_expresiones COMA exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h2); RESULT=new NodoAST("LISTA_EXPRESIONES",unirArrayList(((NodoAST)h1).getHijos(),comList),"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // lista_expresiones ::= exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("LISTA_EXPRESIONES",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // reproducir ::= REPRODUCIR PARENTESIS_A lista_expresiones PARENTESIS_C P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reproducir",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ordenarfun ::= ORDENAR PARENTESIS_A lista_llaves COMA ordenes PARENTESIS_C P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ordenarfun",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ordenarfun ::= ORDENAR PARENTESIS_A ID COMA ordenes PARENTESIS_C P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ordenarfun",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ordenes ::= ASC_ORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ordenes",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ordenes ::= DESC_ORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ordenes",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ordenes ::= PAR_ORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ordenes",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ordenes ::= IMP_ORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ordenes",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ordenes ::= PRIM_ORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ordenes",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sumarizarfun ::= SUMARIZAR PARENTESIS_A ID PARENTESIS_C P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumarizarfun",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sumarizarfun ::= SUMARIZAR PARENTESIS_A lista_llaves PARENTESIS_C P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumarizarfun",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sumarizarfun_exp ::= SUMARIZAR PARENTESIS_A ID PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumarizarfun_exp",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sumarizarfun_exp ::= SUMARIZAR PARENTESIS_A lista_llaves PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumarizarfun_exp",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // esperar ::= ESPERAR PARENTESIS_A lista_expresiones PARENTESIS_C P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("esperar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sumarizar ::= SUMARIZAR PARENTESIS_A lista_expresiones PARENTESIS_C P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumarizar",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // longitud ::= LONGITUD PARENTESIS_A ID PARENTESIS_C P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("longitud",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // longitud ::= LONGITUD PARENTESIS_A lista_llaves PARENTESIS_C P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("longitud",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // longitud ::= LONGITUD PARENTESIS_A CADENA_VAL PARENTESIS_C P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("longitud",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // longitud_exp ::= LONGITUD PARENTESIS_A ID PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("longitud_exp",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // longitud_exp ::= LONGITUD PARENTESIS_A lista_llaves PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("longitud_exp",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // longitud_exp ::= LONGITUD PARENTESIS_A CADENA_VAL PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("longitud_exp",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ordenar ::= ORDENAR PARENTESIS_A lista_expresiones PARENTESIS_C P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ordenar",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // continuar ::= CONTINUAR 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("CONTINUAR",comList,"sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("continuar",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // salir ::= SALIR 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("SALIR",comList,"sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("salir",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // hacer_mientras ::= HACER LLAVE_A instrucciones LLAVE_C MIENTRAS PARENTESIS_A exp PARENTESIS_C P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("HACER_MIENTRAS",comList,"sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("hacer_mientras",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // mientras ::= MIENTRAS PARENTESIS_A exp PARENTESIS_C LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("MIENTRAS",comList,"sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mientras",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // para ::= PARA PARENTESIS_A declaracion_variable exp P_COMA asignacion_para PARENTESIS_C LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); comList.add(h4); RESULT=new NodoAST("PARA",comList,"sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("para",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // para ::= PARA PARENTESIS_A asignacion exp P_COMA asignacion_para PARENTESIS_C LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); comList.add(h4); comList.add(h5); RESULT=new NodoAST("PARA",comList,"sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("para",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // declaracion_variable ::= KEEP variable 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("DECLARACION_VARIABLE",comList,"sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // declaracion_variable ::= variable 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("DECLARACION_VARIABLE",comList,"sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // variable ::= VAR tipo_variable_nativa def_variables 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT= new NodoAST("VARIABLE", comList,"sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // variable ::= VAR tipo_variable_nativa ARREGLO def_arreglo 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); comList.add(h4); RESULT= new NodoAST("VARIABLE", comList,"sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // def_arreglo ::= ID lista_def_arreglo 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList = new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("DEF_ARREGLO", unirArrayList(comList, ((NodoAST)h2).getHijos()), "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_arreglo",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // lista_def_arreglo ::= lista_corchetes def_arreglo_valores 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT = new NodoAST("LISTA_DEF_ARREGLO", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_def_arreglo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // lista_def_arreglo ::= COMA def_arreglo 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_def_arreglo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // lista_corchetes ::= lista_corchetes CORCHETE_A arreglo_lenght CORCHETE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h2); RESULT = new NodoAST("LISTA_CORCHETES", unirArrayList(((NodoAST)h1).getHijos(), comList), "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_corchetes",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // lista_corchetes ::= CORCHETE_A arreglo_lenght CORCHETE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("LISTA_CORCHETES",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_corchetes",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // arreglo_lenght ::= exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("ARREGLO_LENGHT",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo_lenght",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // arreglo_lenght ::= 
            {
              Object RESULT =null;
		 comList=new ArrayList<>(); RESULT=new NodoAST("ARREGLO_LENGHT",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo_lenght",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // def_arreglo_valores ::= P_COMA 
            {
              Object RESULT =null;
		 comList=new ArrayList<>(); RESULT = new NodoAST("DEF_ARREGLO_VALORES", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_arreglo_valores",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // def_arreglo_valores ::= ASIGNACION lista_llaves P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("DEF_ARREGLO_VALORES", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_arreglo_valores",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // lista_llaves ::= lista_llaves COMA LLAVE_A valores_arreglo LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h2); RESULT = new NodoAST("LISTA_LLAVES", unirArrayList(((NodoAST)h1).getHijos(), comList), "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_llaves",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // lista_llaves ::= LLAVE_A valores_arreglo LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("LISTA_LLAVES",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_llaves",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // valores_arreglo ::= lista_expresiones 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("VALORES_ARREGLO", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores_arreglo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // valores_arreglo ::= lista_llaves 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores_arreglo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // valores_arreglo ::= 
            {
              Object RESULT =null;
		 comList=new ArrayList<>(); RESULT = new NodoAST("VALORES_ARREGLO", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores_arreglo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // def_variables ::= ID lista_variables 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList = new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("DEF_VARIABLE", unirArrayList(comList, ((NodoAST)h2).getHijos()), "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_variables",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // lista_variables ::= ASIGNACION exp P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("LISTA_VARIABLES", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // lista_variables ::= COMA def_variables 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // lista_variables ::= P_COMA 
            {
              Object RESULT =null;
		 comList = new ArrayList<>(); RESULT= new NodoAST("LISTA_VARIABLES", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // declaracion_funcion ::= KEEP tipo_variable_nativa ID PARENTESIS_A s1 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); comList.add(h4); RESULT=new NodoAST("DECLARACION_FUNCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // declaracion_funcion ::= tipo_variable_nativa ID PARENTESIS_A s1 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT=new NodoAST("DECLARACION_FUNCION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // s1 ::= PARENTESIS_C s2 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("S1",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // s1 ::= lista_parametros PARENTESIS_C s2 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("S1",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // s2 ::= LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("S2",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // lista_parametros ::= lista_parametros COMA parametro 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h2); RESULT = new NodoAST("LISTA_PARAMETROS", unirArrayList(((NodoAST)h1).getHijos(), comList), "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // lista_parametros ::= parametro 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("LISTA_PARAMETROS",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // parametro ::= tipo_variable_nativa ID 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("PARAMETRO",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // tipo_variable_nativa ::= ENTERO 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList(); comList2.add(new NodoAST("ENTERO", comList, "sus_linea")); RESULT= new NodoAST("TIPOS_VARIABLE_NATIVA",comList2,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable_nativa",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // tipo_variable_nativa ::= DOBLE 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList(); comList2.add(new NodoAST("DOBLE", comList, "sus_linea")); RESULT= new NodoAST("TIPOS_VARIABLE_NATIVA",comList2,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable_nativa",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // tipo_variable_nativa ::= CARACTER 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList(); comList2.add(new NodoAST("CARACTER", comList, "sus_linea")); RESULT= new NodoAST("TIPOS_VARIABLE_NATIVA",comList2,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable_nativa",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // tipo_variable_nativa ::= CADENA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList(); comList2.add(new NodoAST("CADENA", comList, "sus_linea")); RESULT= new NodoAST("TIPOS_VARIABLE_NATIVA",comList2,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable_nativa",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // tipo_variable_nativa ::= BOOLEAN 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList(); comList2.add(new NodoAST("BOOLEAN", comList, "sus_linea")); RESULT= new NodoAST("TIPOS_VARIABLE_NATIVA",comList2,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable_nativa",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // dec_id ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_id",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // tipo_igual ::= ASIGNACION 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList(); comList2.add(new NodoAST("ASIGNACION_VAL", comList, "sus_linea")); RESULT= new NodoAST("TIPO_IGUAL",comList2,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_igual",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // tipo_igual ::= MAS ASIGNACION 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1+""+h2); comList2=new ArrayList(); comList2.add(new NodoAST("MAS_ASIGNACION", comList, "sus_linea")); RESULT= new NodoAST("TIPO_IGUAL",comList2,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_igual",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // tipo_igual ::= MENOS ASIGNACION 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1+""+h2); comList2=new ArrayList(); comList2.add(new NodoAST("MENOS_ASIGNACION", comList, "sus_linea")); RESULT= new NodoAST("TIPO_IGUAL",comList2,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_igual",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // asignacion_para ::= ID tipo_igual exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("ASIGNACION_PARA", comList, "sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_para",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // asignacion_para ::= ID INCREMENTO 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2);  RESULT = new NodoAST("ASIGNACION_PARA", comList, "sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_para",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // asignacion_para ::= ID DECREMENTO 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2);  RESULT = new NodoAST("ASIGNACION_PARA", comList, "sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_para",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // lista_corchetes_asignacion ::= lista_corchetes_asignacion CORCHETE_A exp CORCHETE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h2); RESULT = new NodoAST("LISTA_CORCHETES_ASIGNACION", unirArrayList(((NodoAST)h1).getHijos(), comList), "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_corchetes_asignacion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // lista_corchetes_asignacion ::= CORCHETE_A exp CORCHETE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("LISTA_CORCHETES_ASIGNACION",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_corchetes_asignacion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // asignacion ::= ID tipo_igual exp P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("ASIGNACION", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // asignacion ::= ID lista_corchetes_asignacion tipo_igual exp P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); comList.add(h4); RESULT = new NodoAST("ASIGNACION", comList, "sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // asignacion ::= ID INCREMENTO P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2);  RESULT = new NodoAST("ASIGNACION", comList, "sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // asignacion ::= ID DECREMENTO P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2);  RESULT = new NodoAST("ASIGNACION", comList, "sus_linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // switch ::= SWITCH PARENTESIS_A exp PARENTESIS_C LLAVE_A lista_casos LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList(); comList.add(h1); comList.add(h2); RESULT = new NodoAST("SWITCH", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // lista_casos ::= lista_casos caso 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h2); RESULT = new NodoAST("LISTA_CASOS", unirArrayList(((NodoAST)h1).getHijos(), comList), "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_casos",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // lista_casos ::= caso 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("LISTA_CASOS", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_casos",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // lista_casos ::= default 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("LISTA_CASOS", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_casos",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // lista_casos ::= lista_casos default 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h2); RESULT = new NodoAST("LISTA_CASOS", unirArrayList(((NodoAST)h1).getHijos(), comList), "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_casos",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // caso ::= CASO exp DOS_PUNTOS instrucciones 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT = new NodoAST("CASO", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // default ::= DEFAULT DOS_PUNTOS instrucciones 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("DEFAULT", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("default",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // instruccion_si ::= si 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("INSTRUCCION_SI", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_si",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // instruccion_si ::= si sino 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT = new NodoAST("INSTRUCCION_SI", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_si",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // instruccion_si ::= si lista_sino_si 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT = new NodoAST("INSTRUCCION_SI", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_si",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // instruccion_si ::= si lista_sino_si sino 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("INSTRUCCION_SI", comList, "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_si",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // si ::= SI PARENTESIS_A exp PARENTESIS_C LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("SI",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // sino ::= SINO LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("SINO",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sino",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // sino_si ::= SINO SI PARENTESIS_A exp PARENTESIS_C LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("SINO_SI",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sino_si",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // lista_sino_si ::= lista_sino_si sino_si 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h2); RESULT = new NodoAST("LISTA_SINO_SI", unirArrayList(((NodoAST)h1).getHijos(), comList), "sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sino_si",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // lista_sino_si ::= sino_si 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("LISTA_SINO_SI",comList,"sus_linea"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sino_si",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
