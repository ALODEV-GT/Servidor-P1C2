
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package midik.cup;

import java_cup.runtime.Symbol;
import midik.arbol.NodoAST;
import java.util.ArrayList;
import midik.Singletons.Errores;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\241\000\002\002\004\000\002\002\003\000\002\101" +
    "\006\000\002\102\004\000\002\102\005\000\002\103\005" +
    "\000\002\104\005\000\002\104\002\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\004\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\026\005" +
    "\000\002\026\004\000\002\036\006\000\002\036\007\000" +
    "\002\040\005\000\002\040\006\000\002\005\010\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\004\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\004" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\034\004\000\002\006\007\000\002\024\005\000" +
    "\002\024\003\000\002\007\007\000\002\010\006\000\002" +
    "\014\011\000\002\022\010\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\042\007\000\002\044\006\000\002\011\007\000" +
    "\002\013\007\000\002\013\007\000\002\043\006\000\002" +
    "\043\006\000\002\025\003\000\002\027\003\000\002\045" +
    "\013\000\002\046\011\000\002\047\014\000\002\047\014" +
    "\000\002\051\004\000\002\051\003\000\002\063\005\000" +
    "\002\063\006\000\002\015\004\000\002\016\004\000\002" +
    "\016\004\000\002\017\006\000\002\017\005\000\002\021" +
    "\003\000\002\021\002\000\002\020\003\000\002\020\005" +
    "\000\002\032\007\000\002\032\005\000\002\033\003\000" +
    "\002\033\003\000\002\033\002\000\002\064\004\000\002" +
    "\065\005\000\002\065\004\000\002\065\003\000\002\052" +
    "\007\000\002\052\006\000\002\053\004\000\002\053\005" +
    "\000\002\054\005\000\002\055\005\000\002\055\003\000" +
    "\002\056\004\000\002\060\003\000\002\060\003\000\002" +
    "\060\003\000\002\060\003\000\002\060\003\000\002\062" +
    "\003\000\002\066\003\000\002\066\004\000\002\066\004" +
    "\000\002\050\005\000\002\050\004\000\002\050\004\000" +
    "\002\031\006\000\002\031\005\000\002\067\006\000\002" +
    "\067\007\000\002\067\005\000\002\067\005\000\002\070" +
    "\011\000\002\071\004\000\002\071\003\000\002\071\003" +
    "\000\002\071\004\000\002\072\006\000\002\073\005\000" +
    "\002\074\003\000\002\074\004\000\002\074\004\000\002" +
    "\074\005\000\002\075\011\000\002\076\006\000\002\077" +
    "\012\000\002\100\004\000\002\100\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0162\000\004\102\006\001\002\000\004\002\u0164\001" +
    "\002\000\004\002\000\001\002\000\004\071\u015d\001\002" +
    "\000\004\043\010\001\002\000\062\003\043\005\017\006" +
    "\050\007\040\010\024\011\044\012\034\013\070\015\020" +
    "\017\051\021\037\023\064\024\025\025\061\026\032\027" +
    "\045\030\041\031\062\032\015\033\055\034\053\035\014" +
    "\036\023\071\036\001\002\000\066\005\uffeb\006\uffeb\007" +
    "\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\015\uffeb\017\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026" +
    "\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb" +
    "\035\uffeb\036\uffeb\044\uffeb\071\uffeb\001\002\000\066\005" +
    "\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef" +
    "\015\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024" +
    "\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef" +
    "\033\uffef\034\uffef\035\uffef\036\uffef\044\uffef\071\uffef\001" +
    "\002\000\066\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\015\ufff4\017\ufff4\020\ufff4\021\ufff4\022" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4" +
    "\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\044" +
    "\ufff4\071\ufff4\001\002\000\004\045\u0159\001\002\000\004" +
    "\045\u0153\001\002\000\066\005\ufff0\006\ufff0\007\ufff0\010" +
    "\ufff0\011\ufff0\012\ufff0\013\ufff0\015\ufff0\017\ufff0\020\ufff0" +
    "\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027" +
    "\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0" +
    "\036\ufff0\044\ufff0\071\ufff0\001\002\000\006\014\uff82\071" +
    "\uff82\001\002\000\004\045\u014d\001\002\000\062\005\017" +
    "\006\050\007\040\010\024\011\044\012\034\013\070\015" +
    "\020\017\051\021\037\023\064\024\025\025\061\026\032" +
    "\027\045\030\041\031\062\032\015\033\055\034\053\035" +
    "\014\036\023\044\u014c\071\036\001\002\000\066\005\uffe7" +
    "\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\015" +
    "\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7" +
    "\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033" +
    "\uffe7\034\uffe7\035\uffe7\036\uffe7\044\uffe7\071\uffe7\001\002" +
    "\000\004\045\u0147\001\002\000\006\014\uff80\071\uff80\001" +
    "\002\000\004\045\u0141\001\002\000\070\005\uff69\006\uff69" +
    "\007\uff69\010\uff69\011\uff69\012\uff69\013\uff69\015\uff69\016" +
    "\u0134\017\uff69\020\uff69\021\uff69\022\uff69\023\uff69\024\uff69" +
    "\025\uff69\026\uff69\027\uff69\030\uff69\031\uff69\032\uff69\033" +
    "\uff69\034\uff69\035\uff69\036\uff69\044\uff69\071\uff69\001\002" +
    "\000\066\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012" +
    "\uffe9\013\uffe9\015\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031" +
    "\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\044\uffe9" +
    "\071\uffe9\001\002\000\066\005\uffe3\006\uffe3\007\uffe3\010" +
    "\uffe3\011\uffe3\012\uffe3\013\uffe3\015\uffe3\017\uffe3\020\uffe3" +
    "\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027" +
    "\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3" +
    "\036\uffe3\044\uffe3\071\uffe3\001\002\000\066\005\uffed\006" +
    "\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\015\uffed" +
    "\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025" +
    "\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed" +
    "\034\uffed\035\uffed\036\uffed\044\uffed\071\uffed\001\002\000" +
    "\066\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6" +
    "\013\uffa6\015\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023" +
    "\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6" +
    "\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\044\uffa6\071" +
    "\uffa6\001\002\000\066\005\ufff3\006\ufff3\007\ufff3\010\ufff3" +
    "\011\ufff3\012\ufff3\013\ufff3\015\ufff3\017\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3" +
    "\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036" +
    "\ufff3\044\ufff3\071\ufff3\001\002\000\016\005\017\006\050" +
    "\007\040\010\024\011\044\013\070\001\002\000\066\005" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8" +
    "\015\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024" +
    "\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8" +
    "\033\ufff8\034\ufff8\035\ufff8\036\ufff8\044\ufff8\071\ufff8\001" +
    "\002\000\020\045\u0127\052\333\067\356\070\353\075\137" +
    "\110\334\111\335\001\002\000\066\005\uffa5\006\uffa5\007" +
    "\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\015\uffa5\017\uffa5" +
    "\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026" +
    "\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5" +
    "\035\uffa5\036\uffa5\044\uffa5\071\uffa5\001\002\000\006\014" +
    "\uff7e\071\uff7e\001\002\000\004\045\u0123\001\002\000\066" +
    "\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013" +
    "\uffee\015\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee" +
    "\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032" +
    "\uffee\033\uffee\034\uffee\035\uffee\036\uffee\044\uffee\071\uffee" +
    "\001\002\000\006\037\u0122\044\u0121\001\002\000\006\014" +
    "\uff7f\071\uff7f\001\002\000\040\030\122\032\121\033\124" +
    "\034\127\037\u011f\045\123\056\125\061\107\071\114\072" +
    "\106\073\113\074\116\077\110\100\117\101\120\001\002" +
    "\000\066\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012" +
    "\ufff1\013\ufff1\015\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1" +
    "\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031" +
    "\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\044\ufff1" +
    "\071\ufff1\001\002\000\066\005\uffe8\006\uffe8\007\uffe8\010" +
    "\uffe8\011\uffe8\012\uffe8\013\uffe8\015\uffe8\017\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027" +
    "\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8" +
    "\036\uffe8\044\uffe8\071\uffe8\001\002\000\006\014\uff81\071" +
    "\uff81\001\002\000\004\045\u010d\001\002\000\110\005\uff9f" +
    "\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\015" +
    "\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f" +
    "\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033" +
    "\uff9f\034\uff9f\035\uff9f\036\uff9f\044\uff9f\045\uff9f\056\uff9f" +
    "\061\uff9f\071\uff9f\072\uff9f\073\uff9f\074\uff9f\077\uff9f\100" +
    "\uff9f\101\uff9f\001\002\000\004\045\u0106\001\002\000\066" +
    "\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013" +
    "\uffe6\015\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032" +
    "\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\044\uffe6\071\uffe6" +
    "\001\002\000\004\045\u0102\001\002\000\066\005\uffea\006" +
    "\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\015\uffea" +
    "\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025" +
    "\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea" +
    "\034\uffea\035\uffea\036\uffea\044\uffea\071\uffea\001\002\000" +
    "\066\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec" +
    "\013\uffec\015\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023" +
    "\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec" +
    "\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec\044\uffec\071" +
    "\uffec\001\002\000\066\005\ufff5\006\ufff5\007\ufff5\010\ufff5" +
    "\011\ufff5\012\ufff5\013\ufff5\015\ufff5\017\ufff5\020\ufff5\021" +
    "\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5" +
    "\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036" +
    "\ufff5\044\ufff5\071\ufff5\001\002\000\004\043\372\001\002" +
    "\000\004\045\366\001\002\000\066\005\uffe4\006\uffe4\007" +
    "\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\015\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026" +
    "\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\035\uffe4\036\uffe4\044\uffe4\071\uffe4\001\002\000\004\045" +
    "\315\001\002\000\066\005\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\015\uffe5\017\uffe5\020\uffe5\021" +
    "\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036" +
    "\uffe5\044\uffe5\071\uffe5\001\002\000\066\005\ufff2\006\ufff2" +
    "\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\015\ufff2\017" +
    "\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2" +
    "\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034" +
    "\ufff2\035\ufff2\036\ufff2\044\ufff2\071\ufff2\001\002\000\004" +
    "\071\274\001\002\000\014\005\017\006\050\007\040\010" +
    "\024\011\044\001\002\000\006\014\074\071\072\001\002" +
    "\000\010\037\270\041\265\052\266\001\002\000\110\005" +
    "\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e" +
    "\015\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024" +
    "\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e" +
    "\033\uff9e\034\uff9e\035\uff9e\036\uff9e\044\uff9e\045\uff9e\056" +
    "\uff9e\061\uff9e\071\uff9e\072\uff9e\073\uff9e\074\uff9e\077\uff9e" +
    "\100\uff9e\101\uff9e\001\002\000\004\071\075\001\002\000" +
    "\006\041\077\075\102\001\002\000\110\005\uff9d\006\uff9d" +
    "\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\015\uff9d\017" +
    "\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d" +
    "\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034" +
    "\uff9d\035\uff9d\036\uff9d\044\uff9d\045\uff9d\056\uff9d\061\uff9d" +
    "\071\uff9d\072\uff9d\073\uff9d\074\uff9d\077\uff9d\100\uff9d\101" +
    "\uff9d\001\002\000\004\071\075\001\002\000\110\005\uff9c" +
    "\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c\015" +
    "\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c" +
    "\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033" +
    "\uff9c\034\uff9c\035\uff9c\036\uff9c\044\uff9c\045\uff9c\056\uff9c" +
    "\061\uff9c\071\uff9c\072\uff9c\073\uff9c\074\uff9c\077\uff9c\100" +
    "\uff9c\101\uff9c\001\002\000\010\037\245\052\243\075\246" +
    "\001\002\000\040\030\122\032\121\033\124\034\127\045" +
    "\123\056\125\061\107\071\114\072\106\073\113\074\116" +
    "\076\uff96\077\110\100\117\101\120\001\002\000\060\037" +
    "\uffbb\041\uffbb\042\uffbb\044\uffbb\046\uffbb\047\uffbb\050\uffbb" +
    "\051\uffbb\053\uffbb\054\uffbb\055\uffbb\057\uffbb\060\uffbb\062" +
    "\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb\076\uffbb\110\uffbb" +
    "\111\uffbb\112\uffbb\113\uffbb\001\002\000\060\037\uffbf\041" +
    "\uffbf\042\uffbf\044\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf" +
    "\053\uffbf\054\uffbf\055\uffbf\057\uffbf\060\uffbf\062\uffbf\063" +
    "\uffbf\064\uffbf\065\uffbf\066\uffbf\076\uffbf\110\uffbf\111\uffbf" +
    "\112\uffbf\113\uffbf\001\002\000\004\076\242\001\002\000" +
    "\060\037\uffc7\041\uffc7\042\uffc7\044\uffc7\046\uffc7\047\uffc7" +
    "\050\uffc7\051\uffc7\053\uffc7\054\uffc7\055\uffc7\057\uffc7\060" +
    "\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\076\uffc7" +
    "\110\uffc7\111\uffc7\112\uffc7\113\uffc7\001\002\000\036\030" +
    "\122\032\121\033\124\034\127\045\123\056\125\061\107" +
    "\071\114\072\106\073\113\074\116\077\110\100\117\101" +
    "\120\001\002\000\060\037\uffc5\041\uffc5\042\uffc5\044\uffc5" +
    "\046\uffc5\047\uffc5\050\uffc5\051\uffc5\053\uffc5\054\uffc5\055" +
    "\uffc5\057\uffc5\060\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5" +
    "\066\uffc5\076\uffc5\110\uffc5\111\uffc5\112\uffc5\113\uffc5\001" +
    "\002\000\060\037\uffbd\041\uffbd\042\uffbd\044\uffbd\046\uffbd" +
    "\047\uffbd\050\uffbd\051\uffbd\053\uffbd\054\uffbd\055\uffbd\057" +
    "\uffbd\060\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd" +
    "\076\uffbd\110\uffbd\111\uffbd\112\uffbd\113\uffbd\001\002\000" +
    "\046\047\145\050\151\051\147\053\152\054\155\055\156" +
    "\057\142\060\144\062\157\063\150\064\160\065\141\066" +
    "\153\076\uff97\110\162\111\143\112\154\113\146\001\002" +
    "\000\060\037\uffc6\041\uffc6\042\uffc6\044\uffc6\046\uffc6\047" +
    "\uffc6\050\uffc6\051\uffc6\053\uffc6\054\uffc6\055\uffc6\057\uffc6" +
    "\060\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\076" +
    "\uffc6\110\uffc6\111\uffc6\112\uffc6\113\uffc6\001\002\000\064" +
    "\037\uffc0\041\uffc0\042\uffc0\044\uffc0\045\136\046\uffc0\047" +
    "\uffc0\050\uffc0\051\uffc0\053\uffc0\054\uffc0\055\uffc0\057\uffc0" +
    "\060\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\075" +
    "\137\076\uffc0\110\uffc0\111\uffc0\112\uffc0\113\uffc0\001\002" +
    "\000\060\037\uffbc\041\uffbc\042\uffbc\044\uffbc\046\uffbc\047" +
    "\uffbc\050\uffbc\051\uffbc\053\uffbc\054\uffbc\055\uffbc\057\uffbc" +
    "\060\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc\076" +
    "\uffbc\110\uffbc\111\uffbc\112\uffbc\113\uffbc\001\002\000\060" +
    "\037\uffc3\041\uffc3\042\uffc3\044\uffc3\046\uffc3\047\uffc3\050" +
    "\uffc3\051\uffc3\053\uffc3\054\uffc3\055\uffc3\057\uffc3\060\uffc3" +
    "\062\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3\076\uffc3\110" +
    "\uffc3\111\uffc3\112\uffc3\113\uffc3\001\002\000\060\037\uffc4" +
    "\041\uffc4\042\uffc4\044\uffc4\046\uffc4\047\uffc4\050\uffc4\051" +
    "\uffc4\053\uffc4\054\uffc4\055\uffc4\057\uffc4\060\uffc4\062\uffc4" +
    "\063\uffc4\064\uffc4\065\uffc4\066\uffc4\076\uffc4\110\uffc4\111" +
    "\uffc4\112\uffc4\113\uffc4\001\002\000\060\037\uffc2\041\uffc2" +
    "\042\uffc2\044\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\053" +
    "\uffc2\054\uffc2\055\uffc2\057\uffc2\060\uffc2\062\uffc2\063\uffc2" +
    "\064\uffc2\065\uffc2\066\uffc2\076\uffc2\110\uffc2\111\uffc2\112" +
    "\uffc2\113\uffc2\001\002\000\004\045\227\001\002\000\004" +
    "\045\224\001\002\000\036\030\122\032\121\033\124\034" +
    "\127\045\123\056\125\061\107\071\114\072\106\073\113" +
    "\074\116\077\110\100\117\101\120\001\002\000\004\045" +
    "\217\001\002\000\036\030\122\032\121\033\124\034\127" +
    "\045\123\056\125\061\107\071\114\072\106\073\113\074" +
    "\116\077\110\100\117\101\120\001\002\000\060\037\uffbe" +
    "\041\uffbe\042\uffbe\044\uffbe\046\uffbe\047\uffbe\050\uffbe\051" +
    "\uffbe\053\uffbe\054\uffbe\055\uffbe\057\uffbe\060\uffbe\062\uffbe" +
    "\063\uffbe\064\uffbe\065\uffbe\066\uffbe\076\uffbe\110\uffbe\111" +
    "\uffbe\112\uffbe\113\uffbe\001\002\000\004\045\131\001\002" +
    "\000\060\037\uffc1\041\uffc1\042\uffc1\044\uffc1\046\uffc1\047" +
    "\uffc1\050\uffc1\051\uffc1\053\uffc1\054\uffc1\055\uffc1\057\uffc1" +
    "\060\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\076" +
    "\uffc1\110\uffc1\111\uffc1\112\uffc1\113\uffc1\001\002\000\036" +
    "\030\122\032\121\033\124\034\127\045\123\056\125\061" +
    "\107\071\133\072\106\073\113\074\116\077\110\100\117" +
    "\101\120\001\002\000\046\046\215\047\145\050\151\051" +
    "\147\053\152\054\155\055\156\057\142\060\144\062\157" +
    "\063\150\064\160\065\141\066\153\110\162\111\143\112" +
    "\154\113\146\001\002\000\052\045\136\046\134\047\uffc0" +
    "\050\uffc0\051\uffc0\053\uffc0\054\uffc0\055\uffc0\057\uffc0\060" +
    "\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\075\137" +
    "\110\uffc0\111\uffc0\112\uffc0\113\uffc0\001\002\000\060\037" +
    "\uffa8\041\uffa8\042\uffa8\044\uffa8\046\uffa8\047\uffa8\050\uffa8" +
    "\051\uffa8\053\uffa8\054\uffa8\055\uffa8\057\uffa8\060\uffa8\062" +
    "\uffa8\063\uffa8\064\uffa8\065\uffa8\066\uffa8\076\uffa8\110\uffa8" +
    "\111\uffa8\112\uffa8\113\uffa8\001\002\000\062\037\uffba\041" +
    "\uffba\042\uffba\044\uffba\046\uffba\047\uffba\050\uffba\051\uffba" +
    "\053\uffba\054\uffba\055\uffba\057\uffba\060\uffba\062\uffba\063" +
    "\uffba\064\uffba\065\uffba\066\uffba\075\212\076\uffba\110\uffba" +
    "\111\uffba\112\uffba\113\uffba\001\002\000\040\030\122\032" +
    "\121\033\124\034\127\045\123\046\206\056\125\061\107" +
    "\071\114\072\106\073\113\074\116\077\110\100\117\101" +
    "\120\001\002\000\036\030\122\032\121\033\124\034\127" +
    "\045\123\056\125\061\107\071\114\072\106\073\113\074" +
    "\116\077\110\100\117\101\120\001\002\000\046\047\145" +
    "\050\151\051\147\053\152\054\155\055\156\057\142\060" +
    "\144\062\157\063\150\064\160\065\141\066\153\076\161" +
    "\110\162\111\143\112\154\113\146\001\002\000\036\030" +
    "\122\032\121\033\124\034\127\045\123\056\125\061\107" +
    "\071\114\072\106\073\113\074\116\077\110\100\117\101" +
    "\120\001\002\000\036\030\122\032\121\033\124\034\127" +
    "\045\123\056\125\061\107\071\114\072\106\073\113\074" +
    "\116\077\110\100\117\101\120\001\002\000\036\030\122" +
    "\032\121\033\124\034\127\045\123\056\125\061\107\071" +
    "\114\072\106\073\113\074\116\077\110\100\117\101\120" +
    "\001\002\000\036\030\122\032\121\033\124\034\127\045" +
    "\123\056\125\061\107\071\114\072\106\073\113\074\116" +
    "\077\110\100\117\101\120\001\002\000\036\030\122\032" +
    "\121\033\124\034\127\045\123\056\125\061\107\071\114" +
    "\072\106\073\113\074\116\077\110\100\117\101\120\001" +
    "\002\000\036\030\122\032\121\033\124\034\127\045\123" +
    "\056\125\061\107\071\114\072\106\073\113\074\116\077" +
    "\110\100\117\101\120\001\002\000\036\030\122\032\121" +
    "\033\124\034\127\045\123\056\125\061\107\071\114\072" +
    "\106\073\113\074\116\077\110\100\117\101\120\001\002" +
    "\000\036\030\122\032\121\033\124\034\127\045\123\056" +
    "\125\061\107\071\114\072\106\073\113\074\116\077\110" +
    "\100\117\101\120\001\002\000\036\030\122\032\121\033" +
    "\124\034\127\045\123\056\125\061\107\071\114\072\106" +
    "\073\113\074\116\077\110\100\117\101\120\001\002\000" +
    "\036\030\122\032\121\033\124\034\127\045\123\056\125" +
    "\061\107\071\114\072\106\073\113\074\116\077\110\100" +
    "\117\101\120\001\002\000\036\030\122\032\121\033\124" +
    "\034\127\045\123\056\125\061\107\071\114\072\106\073" +
    "\113\074\116\077\110\100\117\101\120\001\002\000\036" +
    "\030\122\032\121\033\124\034\127\045\123\056\125\061" +
    "\107\071\114\072\106\073\113\074\116\077\110\100\117" +
    "\101\120\001\002\000\036\030\122\032\121\033\124\034" +
    "\127\045\123\056\125\061\107\071\114\072\106\073\113" +
    "\074\116\077\110\100\117\101\120\001\002\000\036\030" +
    "\122\032\121\033\124\034\127\045\123\056\125\061\107" +
    "\071\114\072\106\073\113\074\116\077\110\100\117\101" +
    "\120\001\002\000\036\030\122\032\121\033\124\034\127" +
    "\045\123\056\125\061\107\071\114\072\106\073\113\074" +
    "\116\077\110\100\117\101\120\001\002\000\036\030\122" +
    "\032\121\033\124\034\127\045\123\056\125\061\107\071" +
    "\114\072\106\073\113\074\116\077\110\100\117\101\120" +
    "\001\002\000\064\037\uff75\041\uff75\042\uff75\044\uff75\046" +
    "\uff75\047\uff75\050\uff75\051\uff75\052\uff75\053\uff75\054\uff75" +
    "\055\uff75\057\uff75\060\uff75\062\uff75\063\uff75\064\uff75\065" +
    "\uff75\066\uff75\075\uff75\076\uff75\110\uff75\111\uff75\112\uff75" +
    "\113\uff75\001\002\000\036\030\122\032\121\033\124\034" +
    "\127\045\123\056\125\061\107\071\114\072\106\073\113" +
    "\074\116\077\110\100\117\101\120\001\002\000\060\037" +
    "\uffdb\041\uffdb\042\uffdb\044\uffdb\046\uffdb\047\uffdb\050\uffdb" +
    "\051\uffdb\053\uffdb\054\uffdb\055\uffdb\057\uffdb\060\uffdb\062" +
    "\uffdb\063\uffdb\064\uffdb\065\141\066\153\076\uffdb\110\uffdb" +
    "\111\uffdb\112\154\113\146\001\002\000\060\037\uffc9\041" +
    "\uffc9\042\uffc9\044\uffc9\046\uffc9\047\145\050\151\051\147" +
    "\053\152\054\155\055\156\057\uffc9\060\uffc9\062\uffc9\063" +
    "\uffc9\064\uffc9\065\141\066\153\076\uffc9\110\162\111\143" +
    "\112\154\113\146\001\002\000\060\037\uffcc\041\uffcc\042" +
    "\uffcc\044\uffcc\046\uffcc\047\145\050\151\051\147\053\152" +
    "\054\155\055\156\057\uffcc\060\144\062\uffcc\063\150\064" +
    "\160\065\141\066\153\076\uffcc\110\162\111\143\112\154" +
    "\113\146\001\002\000\060\037\uffcf\041\uffcf\042\uffcf\044" +
    "\uffcf\046\uffcf\047\uffcf\050\151\051\147\053\152\054\155" +
    "\055\uffcf\057\uffcf\060\uffcf\062\uffcf\063\uffcf\064\uffcf\065" +
    "\141\066\153\076\uffcf\110\162\111\143\112\154\113\146" +
    "\001\002\000\060\037\uffd3\041\uffd3\042\uffd3\044\uffd3\046" +
    "\uffd3\047\uffd3\050\uffd3\051\uffd3\053\uffd3\054\uffd3\055\uffd3" +
    "\057\uffd3\060\uffd3\062\uffd3\063\uffd3\064\uffd3\065\141\066" +
    "\153\076\uffd3\110\162\111\143\112\154\113\146\001\002" +
    "\000\060\037\uffd9\041\uffd9\042\uffd9\044\uffd9\046\uffd9\047" +
    "\uffd9\050\uffd9\051\uffd9\053\uffd9\054\uffd9\055\uffd9\057\uffd9" +
    "\060\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9\066\153\076" +
    "\uffd9\110\uffd9\111\uffd9\112\uffd9\113\uffd9\001\002\000\060" +
    "\037\uffd6\041\uffd6\042\uffd6\044\uffd6\046\uffd6\047\uffd6\050" +
    "\uffd6\051\uffd6\053\uffd6\054\uffd6\055\uffd6\057\uffd6\060\uffd6" +
    "\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066\153\076\uffd6\110" +
    "\uffd6\111\uffd6\112\uffd6\113\uffd6\001\002\000\060\037\uffd4" +
    "\041\uffd4\042\uffd4\044\uffd4\046\uffd4\047\uffd4\050\uffd4\051" +
    "\uffd4\053\uffd4\054\uffd4\055\uffd4\057\uffd4\060\uffd4\062\uffd4" +
    "\063\uffd4\064\uffd4\065\141\066\153\076\uffd4\110\162\111" +
    "\143\112\154\113\146\001\002\000\060\037\uffd2\041\uffd2" +
    "\042\uffd2\044\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\053" +
    "\uffd2\054\uffd2\055\uffd2\057\uffd2\060\uffd2\062\uffd2\063\uffd2" +
    "\064\uffd2\065\141\066\153\076\uffd2\110\162\111\143\112" +
    "\154\113\146\001\002\000\060\037\uffca\041\uffca\042\uffca" +
    "\044\uffca\046\uffca\047\145\050\151\051\147\053\152\054" +
    "\155\055\156\057\uffca\060\uffca\062\uffca\063\uffca\064\uffca" +
    "\065\141\066\153\076\uffca\110\162\111\143\112\154\113" +
    "\146\001\002\000\060\037\uffd1\041\uffd1\042\uffd1\044\uffd1" +
    "\046\uffd1\047\uffd1\050\uffd1\051\uffd1\053\uffd1\054\uffd1\055" +
    "\uffd1\057\uffd1\060\uffd1\062\uffd1\063\uffd1\064\uffd1\065\141" +
    "\066\153\076\uffd1\110\162\111\143\112\154\113\146\001" +
    "\002\000\060\037\uffd8\041\uffd8\042\uffd8\044\uffd8\046\uffd8" +
    "\047\uffd8\050\uffd8\051\uffd8\053\uffd8\054\uffd8\055\uffd8\057" +
    "\uffd8\060\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066\153" +
    "\076\uffd8\110\uffd8\111\uffd8\112\uffd8\113\uffd8\001\002\000" +
    "\060\037\uffd0\041\uffd0\042\uffd0\044\uffd0\046\uffd0\047\uffd0" +
    "\050\151\051\147\053\152\054\155\055\uffd0\057\uffd0\060" +
    "\uffd0\062\uffd0\063\uffd0\064\uffd0\065\141\066\153\076\uffd0" +
    "\110\162\111\143\112\154\113\146\001\002\000\060\037" +
    "\uffcb\041\uffcb\042\uffcb\044\uffcb\046\uffcb\047\145\050\151" +
    "\051\147\053\152\054\155\055\156\057\uffcb\060\uffcb\062" +
    "\uffcb\063\uffcb\064\uffcb\065\141\066\153\076\uffcb\110\162" +
    "\111\143\112\154\113\146\001\002\000\060\037\uffda\041" +
    "\uffda\042\uffda\044\uffda\046\uffda\047\uffda\050\uffda\051\uffda" +
    "\053\uffda\054\uffda\055\uffda\057\uffda\060\uffda\062\uffda\063" +
    "\uffda\064\uffda\065\141\066\153\076\uffda\110\uffda\111\uffda" +
    "\112\154\113\146\001\002\000\060\037\uffcd\041\uffcd\042" +
    "\uffcd\044\uffcd\046\uffcd\047\145\050\151\051\147\053\152" +
    "\054\155\055\156\057\uffcd\060\144\062\uffcd\063\150\064" +
    "\160\065\141\066\153\076\uffcd\110\162\111\143\112\154" +
    "\113\146\001\002\000\060\037\uffd7\041\uffd7\042\uffd7\044" +
    "\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\053\uffd7\054\uffd7" +
    "\055\uffd7\057\uffd7\060\uffd7\062\uffd7\063\uffd7\064\uffd7\065" +
    "\uffd7\066\153\076\uffd7\110\uffd7\111\uffd7\112\uffd7\113\uffd7" +
    "\001\002\000\006\041\207\046\210\001\002\000\052\041" +
    "\uffb7\044\uffb7\046\uffb7\047\145\050\151\051\147\053\152" +
    "\054\155\055\156\057\142\060\144\062\157\063\150\064" +
    "\160\065\141\066\153\110\162\111\143\112\154\113\146" +
    "\001\002\000\060\037\uffde\041\uffde\042\uffde\044\uffde\046" +
    "\uffde\047\uffde\050\uffde\051\uffde\053\uffde\054\uffde\055\uffde" +
    "\057\uffde\060\uffde\062\uffde\063\uffde\064\uffde\065\uffde\066" +
    "\uffde\076\uffde\110\uffde\111\uffde\112\uffde\113\uffde\001\002" +
    "\000\036\030\122\032\121\033\124\034\127\045\123\056" +
    "\125\061\107\071\114\072\106\073\113\074\116\077\110" +
    "\100\117\101\120\001\002\000\060\037\uffdd\041\uffdd\042" +
    "\uffdd\044\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\053\uffdd" +
    "\054\uffdd\055\uffdd\057\uffdd\060\uffdd\062\uffdd\063\uffdd\064" +
    "\uffdd\065\uffdd\066\uffdd\076\uffdd\110\uffdd\111\uffdd\112\uffdd" +
    "\113\uffdd\001\002\000\052\041\uffb8\044\uffb8\046\uffb8\047" +
    "\145\050\151\051\147\053\152\054\155\055\156\057\142" +
    "\060\144\062\157\063\150\064\160\065\141\066\153\110" +
    "\162\111\143\112\154\113\146\001\002\000\036\030\122" +
    "\032\121\033\124\034\127\045\123\056\125\061\107\071" +
    "\114\072\106\073\113\074\116\077\110\100\117\101\120" +
    "\001\002\000\046\047\145\050\151\051\147\053\152\054" +
    "\155\055\156\057\142\060\144\062\157\063\150\064\160" +
    "\065\141\066\153\076\214\110\162\111\143\112\154\113" +
    "\146\001\002\000\064\037\uff76\041\uff76\042\uff76\044\uff76" +
    "\046\uff76\047\uff76\050\uff76\051\uff76\052\uff76\053\uff76\054" +
    "\uff76\055\uff76\057\uff76\060\uff76\062\uff76\063\uff76\064\uff76" +
    "\065\uff76\066\uff76\075\uff76\076\uff76\110\uff76\111\uff76\112" +
    "\uff76\113\uff76\001\002\000\060\037\uffa7\041\uffa7\042\uffa7" +
    "\044\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\053\uffa7\054" +
    "\uffa7\055\uffa7\057\uffa7\060\uffa7\062\uffa7\063\uffa7\064\uffa7" +
    "\065\uffa7\066\uffa7\076\uffa7\110\uffa7\111\uffa7\112\uffa7\113" +
    "\uffa7\001\002\000\060\037\uffce\041\uffce\042\uffce\044\uffce" +
    "\046\uffce\047\145\050\151\051\147\053\152\054\155\055" +
    "\156\057\142\060\144\062\157\063\150\064\160\065\141" +
    "\066\153\076\uffce\110\162\111\143\112\154\113\146\001" +
    "\002\000\004\071\220\001\002\000\004\046\221\001\002" +
    "\000\060\037\uffac\041\uffac\042\uffac\044\uffac\046\uffac\047" +
    "\uffac\050\uffac\051\uffac\053\uffac\054\uffac\055\uffac\057\uffac" +
    "\060\uffac\062\uffac\063\uffac\064\uffac\065\uffac\066\uffac\076" +
    "\uffac\110\uffac\111\uffac\112\uffac\113\uffac\001\002\000\046" +
    "\046\223\047\145\050\151\051\147\053\152\054\155\055" +
    "\156\057\142\060\144\062\157\063\150\064\160\065\141" +
    "\066\153\110\162\111\143\112\154\113\146\001\002\000" +
    "\060\037\uffd5\041\uffd5\042\uffd5\044\uffd5\046\uffd5\047\uffd5" +
    "\050\uffd5\051\uffd5\053\uffd5\054\uffd5\055\uffd5\057\uffd5\060" +
    "\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\076\uffd5" +
    "\110\uffd5\111\uffd5\112\uffd5\113\uffd5\001\002\000\036\030" +
    "\122\032\121\033\124\034\127\045\123\056\125\061\107" +
    "\071\114\072\106\073\113\074\116\077\110\100\117\101" +
    "\120\001\002\000\006\041\207\046\226\001\002\000\060" +
    "\037\uffb5\041\uffb5\042\uffb5\044\uffb5\046\uffb5\047\uffb5\050" +
    "\uffb5\051\uffb5\053\uffb5\054\uffb5\055\uffb5\057\uffb5\060\uffb5" +
    "\062\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5\076\uffb5\110" +
    "\uffb5\111\uffb5\112\uffb5\113\uffb5\001\002\000\004\071\230" +
    "\001\002\000\004\041\231\001\002\000\014\103\234\104" +
    "\233\105\235\106\236\107\237\001\002\000\004\046\240" +
    "\001\002\000\004\046\uffb0\001\002\000\004\046\uffb1\001" +
    "\002\000\004\046\uffaf\001\002\000\004\046\uffae\001\002" +
    "\000\004\046\uffb2\001\002\000\060\037\uffb3\041\uffb3\042" +
    "\uffb3\044\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\053\uffb3" +
    "\054\uffb3\055\uffb3\057\uffb3\060\uffb3\062\uffb3\063\uffb3\064" +
    "\uffb3\065\uffb3\066\uffb3\076\uffb3\110\uffb3\111\uffb3\112\uffb3" +
    "\113\uffb3\001\002\000\060\037\uffc8\041\uffc8\042\uffc8\044" +
    "\uffc8\046\uffc8\047\145\050\151\051\147\053\152\054\155" +
    "\055\156\057\142\060\144\062\157\063\150\064\160\065" +
    "\141\066\153\076\uffc8\110\162\111\143\112\154\113\146" +
    "\001\002\000\010\037\uff98\052\uff98\075\uff98\001\002\000" +
    "\004\043\252\001\002\000\110\005\uff9b\006\uff9b\007\uff9b" +
    "\010\uff9b\011\uff9b\012\uff9b\013\uff9b\015\uff9b\017\uff9b\020" +
    "\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b" +
    "\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035" +
    "\uff9b\036\uff9b\044\uff9b\045\uff9b\056\uff9b\061\uff9b\071\uff9b" +
    "\072\uff9b\073\uff9b\074\uff9b\077\uff9b\100\uff9b\101\uff9b\001" +
    "\002\000\110\005\uff95\006\uff95\007\uff95\010\uff95\011\uff95" +
    "\012\uff95\013\uff95\015\uff95\017\uff95\020\uff95\021\uff95\022" +
    "\uff95\023\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95" +
    "\031\uff95\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95\044" +
    "\uff95\045\uff95\056\uff95\061\uff95\071\uff95\072\uff95\073\uff95" +
    "\074\uff95\077\uff95\100\uff95\101\uff95\001\002\000\040\030" +
    "\122\032\121\033\124\034\127\045\123\056\125\061\107" +
    "\071\114\072\106\073\113\074\116\076\uff96\077\110\100" +
    "\117\101\120\001\002\000\004\076\250\001\002\000\010" +
    "\037\uff99\052\uff99\075\uff99\001\002\000\006\037\263\041" +
    "\256\001\002\000\042\030\122\032\121\033\124\034\127" +
    "\043\252\044\uff8f\045\123\056\125\061\107\071\114\072" +
    "\106\073\113\074\116\077\110\100\117\101\120\001\002" +
    "\000\006\041\207\044\uff91\001\002\000\004\044\262\001" +
    "\002\000\006\041\256\044\uff90\001\002\000\004\043\257" +
    "\001\002\000\042\030\122\032\121\033\124\034\127\043" +
    "\252\044\uff8f\045\123\056\125\061\107\071\114\072\106" +
    "\073\113\074\116\077\110\100\117\101\120\001\002\000" +
    "\004\044\261\001\002\000\010\037\uff93\041\uff93\044\uff93" +
    "\001\002\000\010\037\uff92\041\uff92\044\uff92\001\002\000" +
    "\110\005\uff94\006\uff94\007\uff94\010\uff94\011\uff94\012\uff94" +
    "\013\uff94\015\uff94\017\uff94\020\uff94\021\uff94\022\uff94\023" +
    "\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94\031\uff94" +
    "\032\uff94\033\uff94\034\uff94\035\uff94\036\uff94\044\uff94\045" +
    "\uff94\056\uff94\061\uff94\071\uff94\072\uff94\073\uff94\074\uff94" +
    "\077\uff94\100\uff94\101\uff94\001\002\000\110\005\uff9a\006" +
    "\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a\015\uff9a" +
    "\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025" +
    "\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a" +
    "\034\uff9a\035\uff9a\036\uff9a\044\uff9a\045\uff9a\056\uff9a\061" +
    "\uff9a\071\uff9a\072\uff9a\073\uff9a\074\uff9a\077\uff9a\100\uff9a" +
    "\101\uff9a\001\002\000\004\071\072\001\002\000\036\030" +
    "\122\032\121\033\124\034\127\045\123\056\125\061\107" +
    "\071\114\072\106\073\113\074\116\077\110\100\117\101" +
    "\120\001\002\000\110\005\uff8e\006\uff8e\007\uff8e\010\uff8e" +
    "\011\uff8e\012\uff8e\013\uff8e\015\uff8e\017\uff8e\020\uff8e\021" +
    "\uff8e\022\uff8e\023\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e" +
    "\030\uff8e\031\uff8e\032\uff8e\033\uff8e\034\uff8e\035\uff8e\036" +
    "\uff8e\044\uff8e\045\uff8e\056\uff8e\061\uff8e\071\uff8e\072\uff8e" +
    "\073\uff8e\074\uff8e\077\uff8e\100\uff8e\101\uff8e\001\002\000" +
    "\110\005\uff8b\006\uff8b\007\uff8b\010\uff8b\011\uff8b\012\uff8b" +
    "\013\uff8b\015\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\023" +
    "\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b" +
    "\032\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b\044\uff8b\045" +
    "\uff8b\056\uff8b\061\uff8b\071\uff8b\072\uff8b\073\uff8b\074\uff8b" +
    "\077\uff8b\100\uff8b\101\uff8b\001\002\000\046\037\272\047" +
    "\145\050\151\051\147\053\152\054\155\055\156\057\142" +
    "\060\144\062\157\063\150\064\160\065\141\066\153\110" +
    "\162\111\143\112\154\113\146\001\002\000\110\005\uff8d" +
    "\006\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d\013\uff8d\015" +
    "\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d\024\uff8d" +
    "\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\033" +
    "\uff8d\034\uff8d\035\uff8d\036\uff8d\044\uff8d\045\uff8d\056\uff8d" +
    "\061\uff8d\071\uff8d\072\uff8d\073\uff8d\074\uff8d\077\uff8d\100" +
    "\uff8d\101\uff8d\001\002\000\110\005\uff8c\006\uff8c\007\uff8c" +
    "\010\uff8c\011\uff8c\012\uff8c\013\uff8c\015\uff8c\017\uff8c\020" +
    "\uff8c\021\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c" +
    "\027\uff8c\030\uff8c\031\uff8c\032\uff8c\033\uff8c\034\uff8c\035" +
    "\uff8c\036\uff8c\044\uff8c\045\uff8c\056\uff8c\061\uff8c\071\uff8c" +
    "\072\uff8c\073\uff8c\074\uff8c\077\uff8c\100\uff8c\101\uff8c\001" +
    "\002\000\004\045\275\001\002\000\016\005\017\006\050" +
    "\007\040\010\024\011\044\046\300\001\002\000\006\041" +
    "\uff84\046\uff84\001\002\000\004\071\314\001\002\000\004" +
    "\043\306\001\002\000\006\041\303\046\304\001\002\000" +
    "\066\005\uff89\006\uff89\007\uff89\010\uff89\011\uff89\012\uff89" +
    "\013\uff89\015\uff89\017\uff89\020\uff89\021\uff89\022\uff89\023" +
    "\uff89\024\uff89\025\uff89\026\uff89\027\uff89\030\uff89\031\uff89" +
    "\032\uff89\033\uff89\034\uff89\035\uff89\036\uff89\044\uff89\071" +
    "\uff89\001\002\000\014\005\017\006\050\007\040\010\024" +
    "\011\044\001\002\000\004\043\306\001\002\000\066\005" +
    "\uff87\006\uff87\007\uff87\010\uff87\011\uff87\012\uff87\013\uff87" +
    "\015\uff87\017\uff87\020\uff87\021\uff87\022\uff87\023\uff87\024" +
    "\uff87\025\uff87\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87" +
    "\033\uff87\034\uff87\035\uff87\036\uff87\044\uff87\071\uff87\001" +
    "\002\000\062\003\043\005\017\006\050\007\040\010\024" +
    "\011\044\012\034\013\070\015\020\017\051\021\037\023" +
    "\064\024\025\025\061\026\032\027\045\030\041\031\062" +
    "\032\015\033\055\034\053\035\014\036\023\071\036\001" +
    "\002\000\062\005\017\006\050\007\040\010\024\011\044" +
    "\012\034\013\070\015\020\017\051\021\037\023\064\024" +
    "\025\025\061\026\032\027\045\030\041\031\062\032\015" +
    "\033\055\034\053\035\014\036\023\044\310\071\036\001" +
    "\002\000\066\005\uff86\006\uff86\007\uff86\010\uff86\011\uff86" +
    "\012\uff86\013\uff86\015\uff86\017\uff86\020\uff86\021\uff86\022" +
    "\uff86\023\uff86\024\uff86\025\uff86\026\uff86\027\uff86\030\uff86" +
    "\031\uff86\032\uff86\033\uff86\034\uff86\035\uff86\036\uff86\044" +
    "\uff86\071\uff86\001\002\000\066\005\ufff9\006\ufff9\007\ufff9" +
    "\010\ufff9\011\ufff9\012\ufff9\013\ufff9\015\ufff9\017\ufff9\020" +
    "\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9" +
    "\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035" +
    "\ufff9\036\ufff9\044\ufff9\071\ufff9\001\002\000\006\041\uff85" +
    "\046\uff85\001\002\000\066\005\uff88\006\uff88\007\uff88\010" +
    "\uff88\011\uff88\012\uff88\013\uff88\015\uff88\017\uff88\020\uff88" +
    "\021\uff88\022\uff88\023\uff88\024\uff88\025\uff88\026\uff88\027" +
    "\uff88\030\uff88\031\uff88\032\uff88\033\uff88\034\uff88\035\uff88" +
    "\036\uff88\044\uff88\071\uff88\001\002\000\006\041\uff83\046" +
    "\uff83\001\002\000\010\012\320\013\070\071\316\001\002" +
    "\000\016\052\333\067\356\070\353\075\137\110\334\111" +
    "\335\001\002\000\036\030\122\032\121\033\124\034\127" +
    "\045\123\056\125\061\107\071\114\072\106\073\113\074" +
    "\116\077\110\100\117\101\120\001\002\000\004\013\070" +
    "\001\002\000\036\030\122\032\121\033\124\034\127\045" +
    "\123\056\125\061\107\071\114\072\106\073\113\074\116" +
    "\077\110\100\117\101\120\001\002\000\046\037\323\047" +
    "\145\050\151\051\147\053\152\054\155\055\156\057\142" +
    "\060\144\062\157\063\150\064\160\065\141\066\153\110" +
    "\162\111\143\112\154\113\146\001\002\000\004\071\324" +
    "\001\002\000\014\052\333\067\337\070\332\110\334\111" +
    "\335\001\002\000\004\046\326\001\002\000\004\043\327" +
    "\001\002\000\062\003\043\005\017\006\050\007\040\010" +
    "\024\011\044\012\034\013\070\015\020\017\051\021\037" +
    "\023\064\024\025\025\061\026\032\027\045\030\041\031" +
    "\062\032\015\033\055\034\053\035\014\036\023\071\036" +
    "\001\002\000\062\005\017\006\050\007\040\010\024\011" +
    "\044\012\034\013\070\015\020\017\051\021\037\023\064" +
    "\024\025\025\061\026\032\027\045\030\041\031\062\032" +
    "\015\033\055\034\053\035\014\036\023\044\331\071\036" +
    "\001\002\000\066\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011" +
    "\uffa1\012\uffa1\013\uffa1\015\uffa1\017\uffa1\020\uffa1\021\uffa1" +
    "\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030" +
    "\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1" +
    "\044\uffa1\071\uffa1\001\002\000\004\046\uff77\001\002\000" +
    "\036\030\uff7c\032\uff7c\033\uff7c\034\uff7c\045\uff7c\056\uff7c" +
    "\061\uff7c\071\uff7c\072\uff7c\073\uff7c\074\uff7c\077\uff7c\100" +
    "\uff7c\101\uff7c\001\002\000\004\052\342\001\002\000\004" +
    "\052\341\001\002\000\036\030\122\032\121\033\124\034" +
    "\127\045\123\056\125\061\107\071\114\072\106\073\113" +
    "\074\116\077\110\100\117\101\120\001\002\000\004\046" +
    "\uff78\001\002\000\046\046\uff79\047\145\050\151\051\147" +
    "\053\152\054\155\055\156\057\142\060\144\062\157\063" +
    "\150\064\160\065\141\066\153\110\162\111\143\112\154" +
    "\113\146\001\002\000\036\030\uff7a\032\uff7a\033\uff7a\034" +
    "\uff7a\045\uff7a\056\uff7a\061\uff7a\071\uff7a\072\uff7a\073\uff7a" +
    "\074\uff7a\077\uff7a\100\uff7a\101\uff7a\001\002\000\036\030" +
    "\uff7b\032\uff7b\033\uff7b\034\uff7b\045\uff7b\056\uff7b\061\uff7b" +
    "\071\uff7b\072\uff7b\073\uff7b\074\uff7b\077\uff7b\100\uff7b\101" +
    "\uff7b\001\002\000\110\005\uffa0\006\uffa0\007\uffa0\010\uffa0" +
    "\011\uffa0\012\uffa0\013\uffa0\015\uffa0\017\uffa0\020\uffa0\021" +
    "\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0" +
    "\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036" +
    "\uffa0\044\uffa0\045\uffa0\056\uffa0\061\uffa0\071\uffa0\072\uffa0" +
    "\073\uffa0\074\uffa0\077\uffa0\100\uffa0\101\uffa0\001\002\000" +
    "\046\037\345\047\145\050\151\051\147\053\152\054\155" +
    "\055\156\057\142\060\144\062\157\063\150\064\160\065" +
    "\141\066\153\110\162\111\143\112\154\113\146\001\002" +
    "\000\004\071\324\001\002\000\004\046\347\001\002\000" +
    "\004\043\350\001\002\000\062\003\043\005\017\006\050" +
    "\007\040\010\024\011\044\012\034\013\070\015\020\017" +
    "\051\021\037\023\064\024\025\025\061\026\032\027\045" +
    "\030\041\031\062\032\015\033\055\034\053\035\014\036" +
    "\023\071\036\001\002\000\062\005\017\006\050\007\040" +
    "\010\024\011\044\012\034\013\070\015\020\017\051\021" +
    "\037\023\064\024\025\025\061\026\032\027\045\030\041" +
    "\031\062\032\015\033\055\034\053\035\014\036\023\044" +
    "\352\071\036\001\002\000\066\005\uffa2\006\uffa2\007\uffa2" +
    "\010\uffa2\011\uffa2\012\uffa2\013\uffa2\015\uffa2\017\uffa2\020" +
    "\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2" +
    "\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035" +
    "\uffa2\036\uffa2\044\uffa2\071\uffa2\001\002\000\004\037\365" +
    "\001\002\000\012\052\333\075\212\110\334\111\335\001" +
    "\002\000\036\030\122\032\121\033\124\034\127\045\123" +
    "\056\125\061\107\071\114\072\106\073\113\074\116\077" +
    "\110\100\117\101\120\001\002\000\004\037\357\001\002" +
    "\000\110\005\uff72\006\uff72\007\uff72\010\uff72\011\uff72\012" +
    "\uff72\013\uff72\015\uff72\017\uff72\020\uff72\021\uff72\022\uff72" +
    "\023\uff72\024\uff72\025\uff72\026\uff72\027\uff72\030\uff72\031" +
    "\uff72\032\uff72\033\uff72\034\uff72\035\uff72\036\uff72\044\uff72" +
    "\045\uff72\056\uff72\061\uff72\071\uff72\072\uff72\073\uff72\074" +
    "\uff72\077\uff72\100\uff72\101\uff72\001\002\000\046\037\361" +
    "\047\145\050\151\051\147\053\152\054\155\055\156\057" +
    "\142\060\144\062\157\063\150\064\160\065\141\066\153" +
    "\110\162\111\143\112\154\113\146\001\002\000\110\005" +
    "\uff74\006\uff74\007\uff74\010\uff74\011\uff74\012\uff74\013\uff74" +
    "\015\uff74\017\uff74\020\uff74\021\uff74\022\uff74\023\uff74\024" +
    "\uff74\025\uff74\026\uff74\027\uff74\030\uff74\031\uff74\032\uff74" +
    "\033\uff74\034\uff74\035\uff74\036\uff74\044\uff74\045\uff74\056" +
    "\uff74\061\uff74\071\uff74\072\uff74\073\uff74\074\uff74\077\uff74" +
    "\100\uff74\101\uff74\001\002\000\036\030\122\032\121\033" +
    "\124\034\127\045\123\056\125\061\107\071\114\072\106" +
    "\073\113\074\116\077\110\100\117\101\120\001\002\000" +
    "\046\037\364\047\145\050\151\051\147\053\152\054\155" +
    "\055\156\057\142\060\144\062\157\063\150\064\160\065" +
    "\141\066\153\110\162\111\143\112\154\113\146\001\002" +
    "\000\110\005\uff73\006\uff73\007\uff73\010\uff73\011\uff73\012" +
    "\uff73\013\uff73\015\uff73\017\uff73\020\uff73\021\uff73\022\uff73" +
    "\023\uff73\024\uff73\025\uff73\026\uff73\027\uff73\030\uff73\031" +
    "\uff73\032\uff73\033\uff73\034\uff73\035\uff73\036\uff73\044\uff73" +
    "\045\uff73\056\uff73\061\uff73\071\uff73\072\uff73\073\uff73\074" +
    "\uff73\077\uff73\100\uff73\101\uff73\001\002\000\110\005\uff71" +
    "\006\uff71\007\uff71\010\uff71\011\uff71\012\uff71\013\uff71\015" +
    "\uff71\017\uff71\020\uff71\021\uff71\022\uff71\023\uff71\024\uff71" +
    "\025\uff71\026\uff71\027\uff71\030\uff71\031\uff71\032\uff71\033" +
    "\uff71\034\uff71\035\uff71\036\uff71\044\uff71\045\uff71\056\uff71" +
    "\061\uff71\071\uff71\072\uff71\073\uff71\074\uff71\077\uff71\100" +
    "\uff71\101\uff71\001\002\000\036\030\122\032\121\033\124" +
    "\034\127\045\123\056\125\061\107\071\114\072\106\073" +
    "\113\074\116\077\110\100\117\101\120\001\002\000\006" +
    "\041\207\046\370\001\002\000\004\037\371\001\002\000" +
    "\066\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab" +
    "\013\uffab\015\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023" +
    "\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab" +
    "\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab\044\uffab\071" +
    "\uffab\001\002\000\062\003\043\005\017\006\050\007\040" +
    "\010\024\011\044\012\034\013\070\015\020\017\051\021" +
    "\037\023\064\024\025\025\061\026\032\027\045\030\041" +
    "\031\062\032\015\033\055\034\053\035\014\036\023\071" +
    "\036\001\002\000\062\005\017\006\050\007\040\010\024" +
    "\011\044\012\034\013\070\015\020\017\051\021\037\023" +
    "\064\024\025\025\061\026\032\027\045\030\041\031\062" +
    "\032\015\033\055\034\053\035\014\036\023\044\374\071" +
    "\036\001\002\000\004\024\375\001\002\000\004\045\376" +
    "\001\002\000\036\030\122\032\121\033\124\034\127\045" +
    "\123\056\125\061\107\071\114\072\106\073\113\074\116" +
    "\077\110\100\117\101\120\001\002\000\046\046\u0100\047" +
    "\145\050\151\051\147\053\152\054\155\055\156\057\142" +
    "\060\144\062\157\063\150\064\160\065\141\066\153\110" +
    "\162\111\143\112\154\113\146\001\002\000\004\037\u0101" +
    "\001\002\000\066\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011" +
    "\uffa4\012\uffa4\013\uffa4\015\uffa4\017\uffa4\020\uffa4\021\uffa4" +
    "\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030" +
    "\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4" +
    "\044\uffa4\071\uffa4\001\002\000\004\071\u0103\001\002\000" +
    "\004\046\u0104\001\002\000\004\037\u0105\001\002\000\066" +
    "\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013" +
    "\uffad\015\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad" +
    "\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032" +
    "\uffad\033\uffad\034\uffad\035\uffad\036\uffad\044\uffad\071\uffad" +
    "\001\002\000\036\030\122\032\121\033\124\034\127\045" +
    "\123\056\125\061\107\071\u0108\072\106\073\113\074\116" +
    "\077\110\100\117\101\120\001\002\000\046\046\u010b\047" +
    "\145\050\151\051\147\053\152\054\155\055\156\057\142" +
    "\060\144\062\157\063\150\064\160\065\141\066\153\110" +
    "\162\111\143\112\154\113\146\001\002\000\052\045\136" +
    "\046\u0109\047\uffc0\050\uffc0\051\uffc0\053\uffc0\054\uffc0\055" +
    "\uffc0\057\uffc0\060\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0" +
    "\066\uffc0\075\137\110\uffc0\111\uffc0\112\uffc0\113\uffc0\001" +
    "\002\000\004\037\u010a\001\002\000\066\005\uffaa\006\uffaa" +
    "\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\015\uffaa\017" +
    "\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa" +
    "\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034" +
    "\uffaa\035\uffaa\036\uffaa\044\uffaa\071\uffaa\001\002\000\004" +
    "\037\u010c\001\002\000\066\005\uffa9\006\uffa9\007\uffa9\010" +
    "\uffa9\011\uffa9\012\uffa9\013\uffa9\015\uffa9\017\uffa9\020\uffa9" +
    "\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027" +
    "\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9" +
    "\036\uffa9\044\uffa9\071\uffa9\001\002\000\036\030\122\032" +
    "\121\033\124\034\127\045\123\056\125\061\107\071\114" +
    "\072\106\073\113\074\116\077\110\100\117\101\120\001" +
    "\002\000\046\046\u010f\047\145\050\151\051\147\053\152" +
    "\054\155\055\156\057\142\060\144\062\157\063\150\064" +
    "\160\065\141\066\153\110\162\111\143\112\154\113\146" +
    "\001\002\000\004\043\u0110\001\002\000\006\020\u0115\022" +
    "\u0111\001\002\000\004\042\u011c\001\002\000\010\020\u0115" +
    "\022\u0111\044\u011b\001\002\000\010\020\uff6d\022\uff6d\044" +
    "\uff6d\001\002\000\010\020\uff6e\022\uff6e\044\uff6e\001\002" +
    "\000\036\030\122\032\121\033\124\034\127\045\123\056" +
    "\125\061\107\071\114\072\106\073\113\074\116\077\110" +
    "\100\117\101\120\001\002\000\046\042\u0117\047\145\050" +
    "\151\051\147\053\152\054\155\055\156\057\142\060\144" +
    "\062\157\063\150\064\160\065\141\066\153\110\162\111" +
    "\143\112\154\113\146\001\002\000\062\003\043\005\017" +
    "\006\050\007\040\010\024\011\044\012\034\013\070\015" +
    "\020\017\051\021\037\023\064\024\025\025\061\026\032" +
    "\027\045\030\041\031\062\032\015\033\055\034\053\035" +
    "\014\036\023\071\036\001\002\000\066\005\017\006\050" +
    "\007\040\010\024\011\044\012\034\013\070\015\020\017" +
    "\051\020\uff6b\021\037\022\uff6b\023\064\024\025\025\061" +
    "\026\032\027\045\030\041\031\062\032\015\033\055\034" +
    "\053\035\014\036\023\044\uff6b\071\036\001\002\000\010" +
    "\020\uff6c\022\uff6c\044\uff6c\001\002\000\010\020\uff6f\022" +
    "\uff6f\044\uff6f\001\002\000\066\005\uff70\006\uff70\007\uff70" +
    "\010\uff70\011\uff70\012\uff70\013\uff70\015\uff70\017\uff70\020" +
    "\uff70\021\uff70\022\uff70\023\uff70\024\uff70\025\uff70\026\uff70" +
    "\027\uff70\030\uff70\031\uff70\032\uff70\033\uff70\034\uff70\035" +
    "\uff70\036\uff70\044\uff70\071\uff70\001\002\000\062\003\043" +
    "\005\017\006\050\007\040\010\024\011\044\012\034\013" +
    "\070\015\020\017\051\021\037\023\064\024\025\025\061" +
    "\026\032\027\045\030\041\031\062\032\015\033\055\034" +
    "\053\035\014\036\023\071\036\001\002\000\066\005\017" +
    "\006\050\007\040\010\024\011\044\012\034\013\070\015" +
    "\020\017\051\020\uff6a\021\037\022\uff6a\023\064\024\025" +
    "\025\061\026\032\027\045\030\041\031\062\032\015\033" +
    "\055\034\053\035\014\036\023\044\uff6a\071\036\001\002" +
    "\000\046\037\u0120\047\145\050\151\051\147\053\152\054" +
    "\155\055\156\057\142\060\144\062\157\063\150\064\160" +
    "\065\141\066\153\110\162\111\143\112\154\113\146\001" +
    "\002\000\066\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1" +
    "\012\uffe1\013\uffe1\015\uffe1\017\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1" +
    "\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\044" +
    "\uffe1\071\uffe1\001\002\000\066\005\uffe2\006\uffe2\007\uffe2" +
    "\010\uffe2\011\uffe2\012\uffe2\013\uffe2\015\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035" +
    "\uffe2\036\uffe2\044\uffe2\071\uffe2\001\002\000\066\005\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015" +
    "\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6" +
    "\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033" +
    "\ufff6\034\ufff6\035\ufff6\036\ufff6\044\ufff6\071\ufff6\001\002" +
    "\000\066\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\013\ufff7\015\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7" +
    "\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031" +
    "\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\044\ufff7" +
    "\071\ufff7\001\002\000\036\030\122\032\121\033\124\034" +
    "\127\045\123\056\125\061\107\071\114\072\106\073\113" +
    "\074\116\077\110\100\117\101\120\001\002\000\006\041" +
    "\207\046\u0125\001\002\000\004\037\u0126\001\002\000\066" +
    "\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013" +
    "\uffb6\015\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6" +
    "\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032" +
    "\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\044\uffb6\071\uffb6" +
    "\001\002\000\040\030\122\032\121\033\124\034\127\045" +
    "\123\046\u0129\056\125\061\107\071\114\072\106\073\113" +
    "\074\116\077\110\100\117\101\120\001\002\000\006\041" +
    "\207\046\u012b\001\002\000\004\037\u012a\001\002\000\066" +
    "\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013" +
    "\uffe0\015\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0" +
    "\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\044\uffe0\071\uffe0" +
    "\001\002\000\004\037\u012c\001\002\000\066\005\uffdf\006" +
    "\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\015\uffdf" +
    "\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf" +
    "\034\uffdf\035\uffdf\036\uffdf\044\uffdf\071\uffdf\001\002\000" +
    "\004\071\u012e\001\002\000\004\045\u012f\001\002\000\016" +
    "\005\017\006\050\007\040\010\024\011\044\046\300\001" +
    "\002\000\066\005\uff8a\006\uff8a\007\uff8a\010\uff8a\011\uff8a" +
    "\012\uff8a\013\uff8a\015\uff8a\017\uff8a\020\uff8a\021\uff8a\022" +
    "\uff8a\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a" +
    "\031\uff8a\032\uff8a\033\uff8a\034\uff8a\035\uff8a\036\uff8a\044" +
    "\uff8a\071\uff8a\001\002\000\070\005\uff67\006\uff67\007\uff67" +
    "\010\uff67\011\uff67\012\uff67\013\uff67\015\uff67\016\u0134\017" +
    "\uff67\020\uff67\021\uff67\022\uff67\023\uff67\024\uff67\025\uff67" +
    "\026\uff67\027\uff67\030\uff67\031\uff67\032\uff67\033\uff67\034" +
    "\uff67\035\uff67\036\uff67\044\uff67\071\uff67\001\002\000\066" +
    "\005\uff68\006\uff68\007\uff68\010\uff68\011\uff68\012\uff68\013" +
    "\uff68\015\uff68\017\uff68\020\uff68\021\uff68\022\uff68\023\uff68" +
    "\024\uff68\025\uff68\026\uff68\027\uff68\030\uff68\031\uff68\032" +
    "\uff68\033\uff68\034\uff68\035\uff68\036\uff68\044\uff68\071\uff68" +
    "\001\002\000\070\005\uff61\006\uff61\007\uff61\010\uff61\011" +
    "\uff61\012\uff61\013\uff61\015\uff61\016\uff61\017\uff61\020\uff61" +
    "\021\uff61\022\uff61\023\uff61\024\uff61\025\uff61\026\uff61\027" +
    "\uff61\030\uff61\031\uff61\032\uff61\033\uff61\034\uff61\035\uff61" +
    "\036\uff61\044\uff61\071\uff61\001\002\000\006\015\u0135\043" +
    "\u0136\001\002\000\004\045\u0139\001\002\000\062\003\043" +
    "\005\017\006\050\007\040\010\024\011\044\012\034\013" +
    "\070\015\020\017\051\021\037\023\064\024\025\025\061" +
    "\026\032\027\045\030\041\031\062\032\015\033\055\034" +
    "\053\035\014\036\023\071\036\001\002\000\062\005\017" +
    "\006\050\007\040\010\024\011\044\012\034\013\070\015" +
    "\020\017\051\021\037\023\064\024\025\025\061\026\032" +
    "\027\045\030\041\031\062\032\015\033\055\034\053\035" +
    "\014\036\023\044\u0138\071\036\001\002\000\066\005\uff64" +
    "\006\uff64\007\uff64\010\uff64\011\uff64\012\uff64\013\uff64\015" +
    "\uff64\017\uff64\020\uff64\021\uff64\022\uff64\023\uff64\024\uff64" +
    "\025\uff64\026\uff64\027\uff64\030\uff64\031\uff64\032\uff64\033" +
    "\uff64\034\uff64\035\uff64\036\uff64\044\uff64\071\uff64\001\002" +
    "\000\036\030\122\032\121\033\124\034\127\045\123\056" +
    "\125\061\107\071\114\072\106\073\113\074\116\077\110" +
    "\100\117\101\120\001\002\000\046\046\u013b\047\145\050" +
    "\151\051\147\053\152\054\155\055\156\057\142\060\144" +
    "\062\157\063\150\064\160\065\141\066\153\110\162\111" +
    "\143\112\154\113\146\001\002\000\004\043\u013c\001\002" +
    "\000\062\003\043\005\017\006\050\007\040\010\024\011" +
    "\044\012\034\013\070\015\020\017\051\021\037\023\064" +
    "\024\025\025\061\026\032\027\045\030\041\031\062\032" +
    "\015\033\055\034\053\035\014\036\023\071\036\001\002" +
    "\000\062\005\017\006\050\007\040\010\024\011\044\012" +
    "\034\013\070\015\020\017\051\021\037\023\064\024\025" +
    "\025\061\026\032\027\045\030\041\031\062\032\015\033" +
    "\055\034\053\035\014\036\023\044\u013e\071\036\001\002" +
    "\000\070\005\uff63\006\uff63\007\uff63\010\uff63\011\uff63\012" +
    "\uff63\013\uff63\015\uff63\016\uff63\017\uff63\020\uff63\021\uff63" +
    "\022\uff63\023\uff63\024\uff63\025\uff63\026\uff63\027\uff63\030" +
    "\uff63\031\uff63\032\uff63\033\uff63\034\uff63\035\uff63\036\uff63" +
    "\044\uff63\071\uff63\001\002\000\066\005\uff66\006\uff66\007" +
    "\uff66\010\uff66\011\uff66\012\uff66\013\uff66\015\uff66\017\uff66" +
    "\020\uff66\021\uff66\022\uff66\023\uff66\024\uff66\025\uff66\026" +
    "\uff66\027\uff66\030\uff66\031\uff66\032\uff66\033\uff66\034\uff66" +
    "\035\uff66\036\uff66\044\uff66\071\uff66\001\002\000\070\005" +
    "\uff62\006\uff62\007\uff62\010\uff62\011\uff62\012\uff62\013\uff62" +
    "\015\uff62\016\uff62\017\uff62\020\uff62\021\uff62\022\uff62\023" +
    "\uff62\024\uff62\025\uff62\026\uff62\027\uff62\030\uff62\031\uff62" +
    "\032\uff62\033\uff62\034\uff62\035\uff62\036\uff62\044\uff62\071" +
    "\uff62\001\002\000\036\030\122\032\121\033\124\034\127" +
    "\045\123\056\125\061\107\071\114\072\106\073\113\074" +
    "\116\077\110\100\117\101\120\001\002\000\046\046\u0143" +
    "\047\145\050\151\051\147\053\152\054\155\055\156\057" +
    "\142\060\144\062\157\063\150\064\160\065\141\066\153" +
    "\110\162\111\143\112\154\113\146\001\002\000\004\043" +
    "\u0144\001\002\000\062\003\043\005\017\006\050\007\040" +
    "\010\024\011\044\012\034\013\070\015\020\017\051\021" +
    "\037\023\064\024\025\025\061\026\032\027\045\030\041" +
    "\031\062\032\015\033\055\034\053\035\014\036\023\071" +
    "\036\001\002\000\062\005\017\006\050\007\040\010\024" +
    "\011\044\012\034\013\070\015\020\017\051\021\037\023" +
    "\064\024\025\025\061\026\032\027\045\030\041\031\062" +
    "\032\015\033\055\034\053\035\014\036\023\044\u0146\071" +
    "\036\001\002\000\066\005\uffa3\006\uffa3\007\uffa3\010\uffa3" +
    "\011\uffa3\012\uffa3\013\uffa3\015\uffa3\017\uffa3\020\uffa3\021" +
    "\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3" +
    "\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036" +
    "\uffa3\044\uffa3\071\uffa3\001\002\000\004\046\u0148\001\002" +
    "\000\004\043\u0149\001\002\000\062\003\043\005\017\006" +
    "\050\007\040\010\024\011\044\012\034\013\070\015\020" +
    "\017\051\021\037\023\064\024\025\025\061\026\032\027" +
    "\045\030\041\031\062\032\015\033\055\034\053\035\014" +
    "\036\023\071\036\001\002\000\062\005\017\006\050\007" +
    "\040\010\024\011\044\012\034\013\070\015\020\017\051" +
    "\021\037\023\064\024\025\025\061\026\032\027\045\030" +
    "\041\031\062\032\015\033\055\034\053\035\014\036\023" +
    "\044\u014b\071\036\001\002\000\066\005\uffdc\006\uffdc\007" +
    "\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\015\uffdc\017\uffdc" +
    "\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\044\uffdc\071\uffdc\001\002\000\004\002" +
    "\uffff\001\002\000\036\030\122\032\121\033\124\034\127" +
    "\045\123\056\125\061\107\071\114\072\106\073\113\074" +
    "\116\077\110\100\117\101\120\001\002\000\046\046\u014f" +
    "\047\145\050\151\051\147\053\152\054\155\055\156\057" +
    "\142\060\144\062\157\063\150\064\160\065\141\066\153" +
    "\110\162\111\143\112\154\113\146\001\002\000\004\043" +
    "\u0150\001\002\000\062\003\043\005\017\006\050\007\040" +
    "\010\024\011\044\012\034\013\070\015\020\017\051\021" +
    "\037\023\064\024\025\025\061\026\032\027\045\030\041" +
    "\031\062\032\015\033\055\034\053\035\014\036\023\071" +
    "\036\001\002\000\062\005\017\006\050\007\040\010\024" +
    "\011\044\012\034\013\070\015\020\017\051\021\037\023" +
    "\064\024\025\025\061\026\032\027\045\030\041\031\062" +
    "\032\015\033\055\034\053\035\014\036\023\044\u0152\071" +
    "\036\001\002\000\070\005\uff65\006\uff65\007\uff65\010\uff65" +
    "\011\uff65\012\uff65\013\uff65\015\uff65\016\uff65\017\uff65\020" +
    "\uff65\021\uff65\022\uff65\023\uff65\024\uff65\025\uff65\026\uff65" +
    "\027\uff65\030\uff65\031\uff65\032\uff65\033\uff65\034\uff65\035" +
    "\uff65\036\uff65\044\uff65\071\uff65\001\002\000\004\071\u0154" +
    "\001\002\000\004\041\u0155\001\002\000\014\103\234\104" +
    "\233\105\235\106\236\107\237\001\002\000\004\046\u0157" +
    "\001\002\000\004\037\u0158\001\002\000\066\005\uffb4\006" +
    "\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\015\uffb4" +
    "\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025" +
    "\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4" +
    "\034\uffb4\035\uffb4\036\uffb4\044\uffb4\071\uffb4\001\002\000" +
    "\036\030\122\032\121\033\124\034\127\045\123\056\125" +
    "\061\107\071\114\072\106\073\113\074\116\077\110\100" +
    "\117\101\120\001\002\000\006\041\207\046\u015b\001\002" +
    "\000\004\037\u015c\001\002\000\066\005\uffb9\006\uffb9\007" +
    "\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\015\uffb9\017\uffb9" +
    "\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026" +
    "\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9" +
    "\035\uffb9\036\uffb9\044\uffb9\071\uffb9\001\002\000\006\004" +
    "\u015e\043\ufffe\001\002\000\004\071\u0160\001\002\000\004" +
    "\043\ufffd\001\002\000\006\041\ufffa\043\ufffa\001\002\000" +
    "\006\041\u0162\043\ufffc\001\002\000\004\071\u0163\001\002" +
    "\000\006\041\ufffb\043\ufffb\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0162\000\010\002\003\101\004\102\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\003\020\004\034\005\064\006\045\007" +
    "\055\011\026\013\053\014\046\025\010\026\062\027\027" +
    "\036\012\042\021\045\056\046\030\047\041\051\057\052" +
    "\032\060\066\063\051\067\065\070\011\074\015\075\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\004\310\005" +
    "\064\006\045\007\055\011\026\013\053\014\046\025\010" +
    "\026\062\027\027\036\012\042\021\045\056\046\030\047" +
    "\041\051\057\052\032\060\066\063\051\067\065\070\011" +
    "\074\015\075\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\076\u0131" +
    "\077\u0132\100\u0130\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\060\u012c\063\342\001\001\000\002\001\001\000" +
    "\006\031\353\066\354\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\010\114\022\102\023\u011d" +
    "\034\103\040\127\043\125\044\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\060\070\001\001\000\004\064" +
    "\072\001\001\000\004\065\266\001\001\000\002\001\001" +
    "\000\004\015\075\001\001\000\006\016\077\017\100\001" +
    "\001\000\002\001\001\000\004\015\263\001\001\000\002" +
    "\001\001\000\004\020\243\001\001\000\022\010\114\021" +
    "\104\022\102\023\111\034\103\040\127\043\125\044\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\010\114\022\102\023\240" +
    "\034\103\040\127\043\125\044\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\010\114\022\102\023\221\034" +
    "\103\040\127\043\125\044\110\001\001\000\002\001\001" +
    "\000\020\010\114\022\102\023\215\034\103\040\127\043" +
    "\125\044\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\010\114\022\102\023\131\034" +
    "\103\040\127\043\125\044\110\001\001\000\002\001\001" +
    "\000\004\031\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\010\114\022\102\023\204\024\203\034\103" +
    "\040\127\043\125\044\110\001\001\000\020\010\114\022" +
    "\102\023\137\034\103\040\127\043\125\044\110\001\001" +
    "\000\002\001\001\000\020\010\114\022\102\023\202\034" +
    "\103\040\127\043\125\044\110\001\001\000\020\010\114" +
    "\022\102\023\201\034\103\040\127\043\125\044\110\001" +
    "\001\000\020\010\114\022\102\023\200\034\103\040\127" +
    "\043\125\044\110\001\001\000\020\010\114\022\102\023" +
    "\177\034\103\040\127\043\125\044\110\001\001\000\020" +
    "\010\114\022\102\023\176\034\103\040\127\043\125\044" +
    "\110\001\001\000\020\010\114\022\102\023\175\034\103" +
    "\040\127\043\125\044\110\001\001\000\020\010\114\022" +
    "\102\023\174\034\103\040\127\043\125\044\110\001\001" +
    "\000\020\010\114\022\102\023\173\034\103\040\127\043" +
    "\125\044\110\001\001\000\020\010\114\022\102\023\172" +
    "\034\103\040\127\043\125\044\110\001\001\000\020\010" +
    "\114\022\102\023\171\034\103\040\127\043\125\044\110" +
    "\001\001\000\020\010\114\022\102\023\170\034\103\040" +
    "\127\043\125\044\110\001\001\000\020\010\114\022\102" +
    "\023\167\034\103\040\127\043\125\044\110\001\001\000" +
    "\020\010\114\022\102\023\166\034\103\040\127\043\125" +
    "\044\110\001\001\000\020\010\114\022\102\023\165\034" +
    "\103\040\127\043\125\044\110\001\001\000\020\010\114" +
    "\022\102\023\164\034\103\040\127\043\125\044\110\001" +
    "\001\000\020\010\114\022\102\023\163\034\103\040\127" +
    "\043\125\044\110\001\001\000\002\001\001\000\020\010" +
    "\114\022\102\023\162\034\103\040\127\043\125\044\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\010\114\022\102\023\210\034" +
    "\103\040\127\043\125\044\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\010\114\022\102\023\212\034" +
    "\103\040\127\043\125\044\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\010\114\022\102\023" +
    "\204\024\224\034\103\040\127\043\125\044\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\231\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\010\114\021\246" +
    "\022\102\023\111\034\103\040\127\043\125\044\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\010\114\022\102\023\204\024\252\032\254\033" +
    "\253\034\103\040\127\043\125\044\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\010\114\022\102\023\204\024\252\032\254" +
    "\033\257\034\103\040\127\043\125\044\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\064\272\001\001\000" +
    "\020\010\114\022\102\023\270\034\103\040\127\043\125" +
    "\044\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\053\301\055\300\056\275\060\276\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\054\312" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\056" +
    "\311\060\276\001\001\000\004\054\304\001\001\000\002" +
    "\001\001\000\062\003\306\004\034\005\064\006\045\007" +
    "\055\011\026\013\053\014\046\025\010\026\062\027\027" +
    "\036\012\042\021\045\056\046\030\047\041\051\057\052" +
    "\032\060\066\063\051\067\065\070\011\074\015\075\025" +
    "\001\001\000\060\004\310\005\064\006\045\007\055\011" +
    "\026\013\053\014\046\025\010\026\062\027\027\036\012" +
    "\042\021\045\056\046\030\047\041\051\057\052\032\060" +
    "\066\063\051\067\065\070\011\074\015\075\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\051\316\063\051" +
    "\067\320\001\001\000\006\031\353\066\354\001\001\000" +
    "\020\010\114\022\102\023\343\034\103\040\127\043\125" +
    "\044\110\001\001\000\004\063\342\001\001\000\020\010" +
    "\114\022\102\023\321\034\103\040\127\043\125\044\110" +
    "\001\001\000\002\001\001\000\004\050\324\001\001\000" +
    "\004\066\335\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\003\327\004\034\005\064\006\045\007\055\011" +
    "\026\013\053\014\046\025\010\026\062\027\027\036\012" +
    "\042\021\045\056\046\030\047\041\051\057\052\032\060" +
    "\066\063\051\067\065\070\011\074\015\075\025\001\001" +
    "\000\060\004\310\005\064\006\045\007\055\011\026\013" +
    "\053\014\046\025\010\026\062\027\027\036\012\042\021" +
    "\045\056\046\030\047\041\051\057\052\032\060\066\063" +
    "\051\067\065\070\011\074\015\075\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\010\114\022\102\023\337" +
    "\034\103\040\127\043\125\044\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\345\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\003\350" +
    "\004\034\005\064\006\045\007\055\011\026\013\053\014" +
    "\046\025\010\026\062\027\027\036\012\042\021\045\056" +
    "\046\030\047\041\051\057\052\032\060\066\063\051\067" +
    "\065\070\011\074\015\075\025\001\001\000\060\004\310" +
    "\005\064\006\045\007\055\011\026\013\053\014\046\025" +
    "\010\026\062\027\027\036\012\042\021\045\056\046\030" +
    "\047\041\051\057\052\032\060\066\063\051\067\065\070" +
    "\011\074\015\075\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\066\361\001\001\000\020\010\114\022" +
    "\102\023\357\034\103\040\127\043\125\044\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\010\114\022\102\023\362\034\103" +
    "\040\127\043\125\044\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\010\114\022\102" +
    "\023\204\024\366\034\103\040\127\043\125\044\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\003\372\004\034\005\064\006\045\007\055\011" +
    "\026\013\053\014\046\025\010\026\062\027\027\036\012" +
    "\042\021\045\056\046\030\047\041\051\057\052\032\060" +
    "\066\063\051\067\065\070\011\074\015\075\025\001\001" +
    "\000\060\004\310\005\064\006\045\007\055\011\026\013" +
    "\053\014\046\025\010\026\062\027\027\036\012\042\021" +
    "\045\056\046\030\047\041\051\057\052\032\060\066\063" +
    "\051\067\065\070\011\074\015\075\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\010\114\022\102\023" +
    "\376\034\103\040\127\043\125\044\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\010\114\022\102\023\u0106\034\103\040\127\043" +
    "\125\044\110\001\001\000\002\001\001\000\004\031\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\010\114\022\102\023\u010d" +
    "\034\103\040\127\043\125\044\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\071\u0111\072\u0113\073\u0112" +
    "\001\001\000\002\001\001\000\006\072\u0119\073\u0118\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\010\114" +
    "\022\102\023\u0115\034\103\040\127\043\125\044\110\001" +
    "\001\000\002\001\001\000\062\003\u0117\004\034\005\064" +
    "\006\045\007\055\011\026\013\053\014\046\025\010\026" +
    "\062\027\027\036\012\042\021\045\056\046\030\047\041" +
    "\051\057\052\032\060\066\063\051\067\065\070\011\074" +
    "\015\075\025\001\001\000\060\004\310\005\064\006\045" +
    "\007\055\011\026\013\053\014\046\025\010\026\062\027" +
    "\027\036\012\042\021\045\056\046\030\047\041\051\057" +
    "\052\032\060\066\063\051\067\065\070\011\074\015\075" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\003\u011c\004\034\005\064\006\045\007" +
    "\055\011\026\013\053\014\046\025\010\026\062\027\027" +
    "\036\012\042\021\045\056\046\030\047\041\051\057\052" +
    "\032\060\066\063\051\067\065\070\011\074\015\075\025" +
    "\001\001\000\060\004\310\005\064\006\045\007\055\011" +
    "\026\013\053\014\046\025\010\026\062\027\027\036\012" +
    "\042\021\045\056\046\030\047\041\051\057\052\032\060" +
    "\066\063\051\067\065\070\011\074\015\075\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\010\114\022\102" +
    "\023\204\024\u0123\034\103\040\127\043\125\044\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\010\114\022\102\023\204\024\u0127\034\103\040" +
    "\127\043\125\044\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\053\u012f" +
    "\055\300\056\275\060\276\001\001\000\002\001\001\000" +
    "\006\076\u013e\077\u013f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\003" +
    "\u0136\004\034\005\064\006\045\007\055\011\026\013\053" +
    "\014\046\025\010\026\062\027\027\036\012\042\021\045" +
    "\056\046\030\047\041\051\057\052\032\060\066\063\051" +
    "\067\065\070\011\074\015\075\025\001\001\000\060\004" +
    "\310\005\064\006\045\007\055\011\026\013\053\014\046" +
    "\025\010\026\062\027\027\036\012\042\021\045\056\046" +
    "\030\047\041\051\057\052\032\060\066\063\051\067\065" +
    "\070\011\074\015\075\025\001\001\000\002\001\001\000" +
    "\020\010\114\022\102\023\u0139\034\103\040\127\043\125" +
    "\044\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\003\u013c\004\034\005\064\006\045\007\055\011\026" +
    "\013\053\014\046\025\010\026\062\027\027\036\012\042" +
    "\021\045\056\046\030\047\041\051\057\052\032\060\066" +
    "\063\051\067\065\070\011\074\015\075\025\001\001\000" +
    "\060\004\310\005\064\006\045\007\055\011\026\013\053" +
    "\014\046\025\010\026\062\027\027\036\012\042\021\045" +
    "\056\046\030\047\041\051\057\052\032\060\066\063\051" +
    "\067\065\070\011\074\015\075\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\010\114" +
    "\022\102\023\u0141\034\103\040\127\043\125\044\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\003\u0144" +
    "\004\034\005\064\006\045\007\055\011\026\013\053\014" +
    "\046\025\010\026\062\027\027\036\012\042\021\045\056" +
    "\046\030\047\041\051\057\052\032\060\066\063\051\067" +
    "\065\070\011\074\015\075\025\001\001\000\060\004\310" +
    "\005\064\006\045\007\055\011\026\013\053\014\046\025" +
    "\010\026\062\027\027\036\012\042\021\045\056\046\030" +
    "\047\041\051\057\052\032\060\066\063\051\067\065\070" +
    "\011\074\015\075\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\003\u0149\004\034\005" +
    "\064\006\045\007\055\011\026\013\053\014\046\025\010" +
    "\026\062\027\027\036\012\042\021\045\056\046\030\047" +
    "\041\051\057\052\032\060\066\063\051\067\065\070\011" +
    "\074\015\075\025\001\001\000\060\004\310\005\064\006" +
    "\045\007\055\011\026\013\053\014\046\025\010\026\062" +
    "\027\027\036\012\042\021\045\056\046\030\047\041\051" +
    "\057\052\032\060\066\063\051\067\065\070\011\074\015" +
    "\075\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\010\114\022\102\023\u014d\034\103\040\127\043\125" +
    "\044\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\003\u0150\004\034\005\064\006\045\007\055\011\026" +
    "\013\053\014\046\025\010\026\062\027\027\036\012\042" +
    "\021\045\056\046\030\047\041\051\057\052\032\060\066" +
    "\063\051\067\065\070\011\074\015\075\025\001\001\000" +
    "\060\004\310\005\064\006\045\007\055\011\026\013\053" +
    "\014\046\025\010\026\062\027\027\036\012\042\021\045" +
    "\056\046\030\047\041\051\057\052\032\060\066\063\051" +
    "\067\065\070\011\074\015\075\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\u0155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\010\114\022\102\023\204\024\u0159\034\103" +
    "\040\127\043\125\044\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\103\u015e\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\104\u0160\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    private NodoAST raiz;

    private ArrayList<Object> comList;
    private ArrayList<Object> comList2;

    public parser(java_cup.runtime.Scanner s, String param){
        this(s);
    }

    public void syntax_error(Symbol s){
        Errores.getInstance().push(new midik.Singletons.Error("Sintactico", String.valueOf(s.right), s.value.toString()));
        //System.out.println("Error sintactico: " + s.value.toString() + " Linea:" + s.right + " Columna:" + s.left + ". ");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        Errores.getInstance().push(new midik.Singletons.Error("Sintactico", String.valueOf(s.right), "No se pudo recuperar el analizador sintactico."));
        //System.out.println("No se pudo recuperar el analizador." + " Linea:" + s.right + " Columna:" + s.left + "\n");
    }

    public NodoAST getRaiz(){
        return this.raiz;
    }

    private ArrayList<Object> unirArrayList(ArrayList<Object> lista1, ArrayList<Object> lista2){
        ArrayList<Object> listaUnida = new ArrayList<>(lista1);
        listaUnida.addAll(lista2);
        return listaUnida;
    }

    private void cambiarRaiz(NodoAST nodo){
        this.raiz = nodo;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= definir_pista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // definir_pista ::= add_extender LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); cambiarRaiz(new NodoAST("S",comList,String.valueOf(h1left), String.valueOf(h1right))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definir_pista",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // add_extender ::= PISTA ID 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("ADD_EXTENDER", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_extender",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // add_extender ::= PISTA ID extender 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("ADD_EXTENDER", unirArrayList(comList, ((NodoAST)h2).getHijos()), String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_extender",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // extender ::= EXTIENDE ID lista_extiende 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("EXTENDER", unirArrayList(comList, ((NodoAST)h2).getHijos()), String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extender",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_extiende ::= lista_extiende COMA ID 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h2); RESULT = new NodoAST("LISTA_EXTIENDE", unirArrayList(comList, ((NodoAST)h1).getHijos()), String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_extiende",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista_extiende ::= 
            {
              Object RESULT =null;
		 comList=new ArrayList<>(); RESULT = new NodoAST("LISTA_EXTIENDE", comList, "---","---"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_extiende",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= instrucciones instruccion 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoAST("INSTRUCCIONES", unirArrayList(((NodoAST)h1).getHijos(), ((NodoAST)h2).getHijos()), String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instrucciones ::= instruccion 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoAST("INSTRUCCIONES", ((NodoAST)h1).getHijos(), String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instrucciones ::= error P_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instrucciones ::= error LLAVE_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= declaracion_variable 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= llamada_funcion 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= declaracion_funcion 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= asignacion 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= mensaje 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= instruccion_si 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= switch 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= para 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= mientras 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= hacer_mientras 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= continuar 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= reproducir 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= esperar 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= ordenar 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= sumarizarfun 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= longitud 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= principal 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion ::= retornar 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccion ::= salir 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // retornar ::= RETORNA exp P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("RETORNAR", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("retornar",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // retornar ::= RETORNA P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); RESULT=new NodoAST("RETORNAR", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("retornar",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // llamada_funcion ::= ID PARENTESIS_A PARENTESIS_C P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 comList=new ArrayList(); comList.add(h1); RESULT=new NodoAST("LLAMADA_FUNCION",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // llamada_funcion ::= ID PARENTESIS_A lista_expresiones PARENTESIS_C P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 comList=new ArrayList(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("LLAMADA_FUNCION",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // llamada_funcion_exp ::= ID PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 comList=new ArrayList(); comList.add(h1); RESULT=new NodoAST("LLAMADA_FUNCION_EXP",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion_exp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // llamada_funcion_exp ::= ID PARENTESIS_A lista_expresiones PARENTESIS_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("LLAMADA_FUNCION_EXP",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion_exp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // principal ::= PRINCIPAL PARENTESIS_A PARENTESIS_C LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList(); comList.add(h1); RESULT=new NodoAST("PRINCIPAL",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principal",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= exp MAS exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= exp MENOS exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= exp POR exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp DIVISION exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp MOD exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp POT exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= PARENTESIS_A exp PARENTESIS_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp MAYOR_QUE exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp MENOR_QUE exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp MAYOR_IGUAL exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp MENOR_IGUAL exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp IGUAL exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp DIFERENTE exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= IS_NULL exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp AND exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp NAND exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= exp OR exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= exp NOR exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= exp XOR exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= NOT exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= ENTERO_VAL 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList<>(); comList2.add(new NodoAST("ENTERO_VAL", comList, String.valueOf(h1left), String.valueOf(h1right))); RESULT = new NodoAST("EXP", comList2, String.valueOf(h1left), String.valueOf(h1right));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= DOBLE_VAL 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList<>(); comList2.add(new NodoAST("DOBLE_VAL", comList, String.valueOf(h1left), String.valueOf(h1right))); RESULT = new NodoAST("EXP", comList2, String.valueOf(h1left), String.valueOf(h1right));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= VERDADERO 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList<>(); comList2.add(new NodoAST("VERDADERO", comList, String.valueOf(h1left), String.valueOf(h1right))); RESULT = new NodoAST("EXP", comList2, String.valueOf(h1left), String.valueOf(h1right));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= FALSO 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList<>(); comList2.add(new NodoAST("FALSO", comList, String.valueOf(h1left), String.valueOf(h1right))); RESULT = new NodoAST("EXP", comList2, String.valueOf(h1left), String.valueOf(h1right));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= CADENA_VAL 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList<>(); comList2.add(new NodoAST("CADENA_VAL", comList, String.valueOf(h1left), String.valueOf(h1right))); RESULT = new NodoAST("EXP", comList2, String.valueOf(h1left), String.valueOf(h1right));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp ::= CARACTER_VAL 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList<>(); comList2.add(new NodoAST("CARACTER_VAL", comList, String.valueOf(h1left), String.valueOf(h1right))); RESULT = new NodoAST("EXP", comList2, String.valueOf(h1left), String.valueOf(h1right));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp ::= llamada_funcion_exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exp ::= ID 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList<>(); comList2.add(new NodoAST("ID", comList, String.valueOf(h1left), String.valueOf(h1right))); RESULT = new NodoAST("EXP", comList2, String.valueOf(h1left), String.valueOf(h1right));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exp ::= acceso_arreglo 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exp ::= longitud_exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exp ::= sumarizarfun_exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // exp ::= reproducir_exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exp ::= ordenar_exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // acceso_arreglo ::= ID lista_corchetes_asignacion 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("ACCESO_ARREGLO",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso_arreglo",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // mensaje ::= MENSAJE PARENTESIS_A lista_expresiones PARENTESIS_C P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("MENSAJE",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // lista_expresiones ::= lista_expresiones COMA exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h2); RESULT=new NodoAST("LISTA_EXPRESIONES",unirArrayList(((NodoAST)h1).getHijos(),comList),String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // lista_expresiones ::= exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("LISTA_EXPRESIONES",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // reproducir ::= REPRODUCIR PARENTESIS_A lista_expresiones PARENTESIS_C P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("REPRODUCIR",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reproducir",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // reproducir_exp ::= REPRODUCIR PARENTESIS_A lista_expresiones PARENTESIS_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("REPRODUCIR_EXP",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reproducir_exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ordenar ::= ORDENAR PARENTESIS_A ID COMA ordenes PARENTESIS_C P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("ORDENAR",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ordenar",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ordenar_exp ::= ORDENAR PARENTESIS_A ID COMA ordenes PARENTESIS_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("ORDENAR_EXP",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ordenar_exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ordenes ::= ASC_ORD 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("ORDENES",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ordenes",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ordenes ::= DESC_ORD 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("ORDENES",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ordenes",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ordenes ::= PAR_ORD 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("ORDENES",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ordenes",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ordenes ::= IMP_ORD 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("ORDENES",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ordenes",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ordenes ::= PRIM_ORD 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("ORDENES",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ordenes",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sumarizarfun ::= SUMARIZAR PARENTESIS_A ID PARENTESIS_C P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("SUMARIZARFUN",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumarizarfun",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sumarizarfun_exp ::= SUMARIZAR PARENTESIS_A ID PARENTESIS_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("SUMARIZARFUN_EXP",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumarizarfun_exp",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // esperar ::= ESPERAR PARENTESIS_A lista_expresiones PARENTESIS_C P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("ESPERAR",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("esperar",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // longitud ::= LONGITUD PARENTESIS_A ID PARENTESIS_C P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("LONGITUD",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("longitud",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // longitud ::= LONGITUD PARENTESIS_A exp PARENTESIS_C P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("LONGITUD",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("longitud",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // longitud_exp ::= LONGITUD PARENTESIS_A ID PARENTESIS_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("LONGITUD_EXP",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("longitud_exp",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // longitud_exp ::= LONGITUD PARENTESIS_A exp PARENTESIS_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("LONGITUD_EXP",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("longitud_exp",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // continuar ::= CONTINUAR 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("CONTINUAR",comList,String.valueOf(h1left), String.valueOf(h1right));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("continuar",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // salir ::= SALIR 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("SALIR",comList,String.valueOf(h1left), String.valueOf(h1right));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("salir",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // hacer_mientras ::= HACER LLAVE_A instrucciones LLAVE_C MIENTRAS PARENTESIS_A exp PARENTESIS_C P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("HACER_MIENTRAS",comList,String.valueOf(h1left), String.valueOf(h1right));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("hacer_mientras",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // mientras ::= MIENTRAS PARENTESIS_A exp PARENTESIS_C LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("MIENTRAS",comList,String.valueOf(h1left), String.valueOf(h1right));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mientras",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // para ::= PARA PARENTESIS_A declaracion_variable exp P_COMA asignacion_para PARENTESIS_C LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); comList.add(h4); RESULT=new NodoAST("PARA",comList,String.valueOf(h1left), String.valueOf(h1right));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("para",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // para ::= PARA PARENTESIS_A asignacion exp P_COMA asignacion_para PARENTESIS_C LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); comList.add(h4); comList.add(h5); RESULT=new NodoAST("PARA",comList,String.valueOf(h1left), String.valueOf(h1right));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("para",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // declaracion_variable ::= KEEP variable 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("DECLARACION_VARIABLE",comList,String.valueOf(h1left), String.valueOf(h1right));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // declaracion_variable ::= variable 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("DECLARACION_VARIABLE",comList,String.valueOf(h1left), String.valueOf(h1right));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // variable ::= VAR tipo_variable_nativa def_variables 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT= new NodoAST("VARIABLE", comList,String.valueOf(h1left), String.valueOf(h1right));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // variable ::= VAR tipo_variable_nativa ARREGLO def_arreglo 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); comList.add(h4); RESULT= new NodoAST("VARIABLE", comList,String.valueOf(h1left), String.valueOf(h1right));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // def_arreglo ::= ID lista_def_arreglo 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList = new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("DEF_ARREGLO", unirArrayList(comList, ((NodoAST)h2).getHijos()), String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_arreglo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // lista_def_arreglo ::= lista_corchetes def_arreglo_valores 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT = new NodoAST("LISTA_DEF_ARREGLO", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_def_arreglo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // lista_def_arreglo ::= COMA def_arreglo 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_def_arreglo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // lista_corchetes ::= lista_corchetes CORCHETE_A arreglo_lenght CORCHETE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h2); RESULT = new NodoAST("LISTA_CORCHETES", unirArrayList(((NodoAST)h1).getHijos(), comList), String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_corchetes",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // lista_corchetes ::= CORCHETE_A arreglo_lenght CORCHETE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("LISTA_CORCHETES",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_corchetes",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // arreglo_lenght ::= exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("ARREGLO_LENGHT",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo_lenght",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // arreglo_lenght ::= 
            {
              Object RESULT =null;
		 comList=new ArrayList<>(); RESULT=new NodoAST("ARREGLO_LENGHT",comList,"---","---"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo_lenght",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // def_arreglo_valores ::= P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); RESULT = new NodoAST("DEF_ARREGLO_VALORES", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_arreglo_valores",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // def_arreglo_valores ::= ASIGNACION lista_llaves P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("DEF_ARREGLO_VALORES", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_arreglo_valores",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // lista_llaves ::= lista_llaves COMA LLAVE_A valores_arreglo LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h2); RESULT = new NodoAST("LISTA_LLAVES", unirArrayList(((NodoAST)h1).getHijos(), comList), String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_llaves",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // lista_llaves ::= LLAVE_A valores_arreglo LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("LISTA_LLAVES",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_llaves",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // valores_arreglo ::= lista_expresiones 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("VALORES_ARREGLO", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores_arreglo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // valores_arreglo ::= lista_llaves 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores_arreglo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // valores_arreglo ::= 
            {
              Object RESULT =null;
		 comList=new ArrayList<>(); RESULT = new NodoAST("VALORES_ARREGLO", comList, "---","---"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores_arreglo",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // def_variables ::= ID lista_variables 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList = new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("DEF_VARIABLE", unirArrayList(comList, ((NodoAST)h2).getHijos()), String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_variables",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // lista_variables ::= ASIGNACION exp P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("LISTA_VARIABLES", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // lista_variables ::= COMA def_variables 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // lista_variables ::= P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList = new ArrayList<>(); RESULT= new NodoAST("LISTA_VARIABLES", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // declaracion_funcion ::= KEEP tipo_variable_nativa ID PARENTESIS_A s1 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); comList.add(h4); RESULT=new NodoAST("DECLARACION_FUNCION",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // declaracion_funcion ::= tipo_variable_nativa ID PARENTESIS_A s1 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT=new NodoAST("DECLARACION_FUNCION",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // s1 ::= PARENTESIS_C s2 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("S1",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // s1 ::= lista_parametros PARENTESIS_C s2 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("S1",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // s2 ::= LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("S2",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // lista_parametros ::= lista_parametros COMA parametro 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h2); RESULT = new NodoAST("LISTA_PARAMETROS", unirArrayList(((NodoAST)h1).getHijos(), comList), String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // lista_parametros ::= parametro 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("LISTA_PARAMETROS",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // parametro ::= tipo_variable_nativa ID 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("PARAMETRO",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // tipo_variable_nativa ::= ENTERO 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList(); comList2.add(new NodoAST("ENTERO", comList, String.valueOf(h1left), String.valueOf(h1right))); RESULT= new NodoAST("TIPOS_VARIABLE_NATIVA",comList2,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable_nativa",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // tipo_variable_nativa ::= DOBLE 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList(); comList2.add(new NodoAST("DOBLE", comList, String.valueOf(h1left), String.valueOf(h1right))); RESULT= new NodoAST("TIPOS_VARIABLE_NATIVA",comList2,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable_nativa",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // tipo_variable_nativa ::= CARACTER 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList(); comList2.add(new NodoAST("CARACTER", comList, String.valueOf(h1left), String.valueOf(h1right))); RESULT= new NodoAST("TIPOS_VARIABLE_NATIVA",comList2,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable_nativa",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // tipo_variable_nativa ::= CADENA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList(); comList2.add(new NodoAST("CADENA", comList, String.valueOf(h1left), String.valueOf(h1right))); RESULT= new NodoAST("TIPOS_VARIABLE_NATIVA",comList2,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable_nativa",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // tipo_variable_nativa ::= BOOLEAN 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList(); comList2.add(new NodoAST("BOOLEAN", comList, String.valueOf(h1left), String.valueOf(h1right))); RESULT= new NodoAST("TIPOS_VARIABLE_NATIVA",comList2,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable_nativa",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // dec_id ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_id",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // tipo_igual ::= ASIGNACION 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList(); comList2.add(new NodoAST("ASIGNACION_VAL", comList, String.valueOf(h1left), String.valueOf(h1right))); RESULT= new NodoAST("TIPO_IGUAL",comList2,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_igual",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // tipo_igual ::= MAS ASIGNACION 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1+""+h2); comList2=new ArrayList(); comList2.add(new NodoAST("MAS_ASIGNACION", comList, String.valueOf(h1left), String.valueOf(h1right))); RESULT= new NodoAST("TIPO_IGUAL",comList2,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_igual",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // tipo_igual ::= MENOS ASIGNACION 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1+""+h2); comList2=new ArrayList(); comList2.add(new NodoAST("MENOS_ASIGNACION", comList, String.valueOf(h1left), String.valueOf(h1right))); RESULT= new NodoAST("TIPO_IGUAL",comList2,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_igual",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // asignacion_para ::= ID tipo_igual exp 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("ASIGNACION_PARA", comList, String.valueOf(h1left), String.valueOf(h1right));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_para",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // asignacion_para ::= ID INCREMENTO 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2);  RESULT = new NodoAST("ASIGNACION_PARA", comList, String.valueOf(h1left), String.valueOf(h1right));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_para",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // asignacion_para ::= ID DECREMENTO 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2);  RESULT = new NodoAST("ASIGNACION_PARA", comList, String.valueOf(h1left), String.valueOf(h1right));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_para",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // lista_corchetes_asignacion ::= lista_corchetes_asignacion CORCHETE_A exp CORCHETE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h2); RESULT = new NodoAST("LISTA_CORCHETES_ASIGNACION", unirArrayList(((NodoAST)h1).getHijos(), comList), String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_corchetes_asignacion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // lista_corchetes_asignacion ::= CORCHETE_A exp CORCHETE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("LISTA_CORCHETES_ASIGNACION",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_corchetes_asignacion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // asignacion ::= ID tipo_igual exp P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("ASIGNACION", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // asignacion ::= ID lista_corchetes_asignacion tipo_igual exp P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); comList.add(h4); RESULT = new NodoAST("ASIGNACION", comList, String.valueOf(h1left), String.valueOf(h1right));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // asignacion ::= ID INCREMENTO P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2);  RESULT = new NodoAST("ASIGNACION", comList, String.valueOf(h1left), String.valueOf(h1right));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // asignacion ::= ID DECREMENTO P_COMA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2);  RESULT = new NodoAST("ASIGNACION", comList, String.valueOf(h1left), String.valueOf(h1right));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // switch ::= SWITCH PARENTESIS_A exp PARENTESIS_C LLAVE_A lista_casos LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList(); comList.add(h1); comList.add(h2); RESULT = new NodoAST("SWITCH", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // lista_casos ::= lista_casos caso 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h2); RESULT = new NodoAST("LISTA_CASOS", unirArrayList(((NodoAST)h1).getHijos(), comList), String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_casos",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // lista_casos ::= caso 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("LISTA_CASOS", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_casos",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // lista_casos ::= default 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("LISTA_CASOS", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_casos",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // lista_casos ::= lista_casos default 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h2); RESULT = new NodoAST("LISTA_CASOS", unirArrayList(((NodoAST)h1).getHijos(), comList), String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_casos",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // caso ::= CASO exp DOS_PUNTOS instrucciones 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT = new NodoAST("CASO", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // default ::= DEFAULT DOS_PUNTOS instrucciones 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("DEFAULT", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("default",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // instruccion_si ::= si 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("INSTRUCCION_SI", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_si",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // instruccion_si ::= si sino 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT = new NodoAST("INSTRUCCION_SI", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_si",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // instruccion_si ::= si lista_sino_si 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT = new NodoAST("INSTRUCCION_SI", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_si",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // instruccion_si ::= si lista_sino_si sino 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("INSTRUCCION_SI", comList, String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_si",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // si ::= SI PARENTESIS_A exp PARENTESIS_C LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("SI",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // sino ::= SINO LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("SINO",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sino",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // sino_si ::= SINO SI PARENTESIS_A exp PARENTESIS_C LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("SINO_SI",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sino_si",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // lista_sino_si ::= lista_sino_si sino_si 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h2); RESULT = new NodoAST("LISTA_SINO_SI", unirArrayList(((NodoAST)h1).getHijos(), comList), String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sino_si",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // lista_sino_si ::= sino_si 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("LISTA_SINO_SI",comList,String.valueOf(h1left), String.valueOf(h1right)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sino_si",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
