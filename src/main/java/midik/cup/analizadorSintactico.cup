package midik.cup;
import java_cup.runtime.Symbol;
import midik.arbol.NodoAST;
import java.util.ArrayList;
import midik.Singletons.Errores;

parser code
{:  
    private NodoAST raiz;

    private ArrayList<Object> comList;
    private ArrayList<Object> comList2;

    public parser(java_cup.runtime.Scanner s, String param){
        this(s);
    }

    public void syntax_error(Symbol s){
        Errores.getInstance().push(new midik.Singletons.Error("Sintactico", String.valueOf(s.right), s.value.toString()));
        //System.out.println("Error sintactico: " + s.value.toString() + " Linea:" + s.right + " Columna:" + s.left + ". ");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        Errores.getInstance().push(new midik.Singletons.Error("Sintactico", String.valueOf(s.right), "No se pudo recuperar el analizador sintactico."));
        //System.out.println("No se pudo recuperar el analizador." + " Linea:" + s.right + " Columna:" + s.left + "\n");
    }

    public NodoAST getRaiz(){
        return this.raiz;
    }

    private ArrayList<Object> unirArrayList(ArrayList<Object> lista1, ArrayList<Object> lista2){
        ArrayList<Object> listaUnida = new ArrayList<>(lista1);
        listaUnida.addAll(lista2);
        return listaUnida;
    }

    private void cambiarRaiz(NodoAST nodo){
        this.raiz = nodo;
    }
:};

terminal String EXTIENDE,ENTERO,DOBLE,BOOLEAN,CARACTER,CADENA,KEEP,VAR,ARREGLO,SI,
SINO,SWITCH,CASO,SALIR,DEFAULT,PARA,MIENTRAS,HACER,CONTINUAR,RETORNA,REPRODUCIR,
ESPERAR,ORDENAR,SUMARIZAR,LONGITUD,MENSAJE,PRINCIPAL,P_COMA,PUNTO,COMA,DOS_PUNTOS,
LLAVE_A,LLAVE_C,PARENTESIS_A,PARENTESIS_C,IGUAL,MAYOR_IGUAL,MENOR_IGUAL,ASIGNACION,
MAYOR_QUE,MENOR_QUE,DIFERENTE,IS_NULL,AND,OR,NOT,NAND,NOR,XOR,
MOD,POT,INCREMENTO,DECREMENTO,ID,ENTERO_VAL,DOBLE_VAL,CADENA_VAL, CORCHETE_A, CORCHETE_C,
VERDADERO,FALSO, CARACTER_VAL, PISTA, DESC_ORD,PAR_ORD,IMP_ORD,PRIM_ORD, ASC_ORD, MAS,MENOS,POR,DIVISION;

non terminal Object s; //inicio
non terminal Object instrucciones, instruccion; //instrucciones
non terminal Object principal, mensaje, reproducir,reproducir_exp,esperar,sumarizar,longitud,ordenar, def_arreglo,
lista_def_arreglo, lista_corchetes, def_arreglo_valores, arreglo_lenght, ordenar_exp; //funciones
non terminal Object exp, lista_expresiones, continuar, retornar, salir, comodin_retorna, lista_corchetes_asignacion,
lista_llaves, valores_arreglo, acceso_arreglo, ordenarfun,
llamada_funcion, dec, llamada_funcion_exp, ordenes, sumarizarfun, longitud_exp, sumarizarfun_exp; //varios
non terminal Object hacer_mientras; //hacer mientras
non terminal Object mientras; //mientras
non terminal Object para, asignacion_para; //para
non terminal Object declaracion_variable, declaracion_funcion, s1, s2,
lista_parametros,parametro,tipo_dec_variable,tipo_variable_nativa,
lista_declaraciones, dec_id, variable, def_variables, lista_variables; //declaraciones
non terminal Object tipo_igual, asignacion; //asignaciones
non terminal Object switch,lista_casos,caso,default; //switch
non terminal Object instruccion_si,si,sino,sino_si,lista_sino_si; //si
non terminal Object definir_pista, add_extender, extender, lista_extiende; //si

//Precedencia
precedence left NOT;
precedence left AND, NAND, OR, NOR, XOR;
precedence left OR, NOR, XOR;
precedence left IGUAL, DIFERENTE;
precedence left MAYOR_QUE, MENOR_QUE, MAYOR_IGUAL, MENOR_IGUAL;
precedence left MAS, MENOS;
precedence left POR, DIVISION, MOD;
precedence right POT;
precedence left INCREMENTO, DECREMENTO;
precedence left PARENTESIS_A, PARENTESIS_C;

start with s;
//INICIO
s ::= definir_pista 
;

definir_pista ::= add_extender:h1 LLAVE_A instrucciones:h2 LLAVE_C {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); cambiarRaiz(new NodoAST("S",comList,String.valueOf(h1left), String.valueOf(h1right))); :}
;

add_extender ::= PISTA ID:h1    {:comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("ADD_EXTENDER", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
| PISTA ID:h1 extender:h2       {:comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("ADD_EXTENDER", unirArrayList(comList, ((NodoAST)h2).getHijos()), String.valueOf(h1left), String.valueOf(h1right)); :}
;

extender ::= EXTIENDE ID:h1 lista_extiende:h2 {: comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("EXTENDER", unirArrayList(comList, ((NodoAST)h2).getHijos()), String.valueOf(h1left), String.valueOf(h1right)); :}
;

lista_extiende ::= lista_extiende:h1 COMA ID:h2 {: comList=new ArrayList<>(); comList.add(h2); RESULT = new NodoAST("LISTA_EXTIENDE", unirArrayList(comList, ((NodoAST)h1).getHijos()), String.valueOf(h1left), String.valueOf(h1right)); :}
|                                               {: comList=new ArrayList<>(); RESULT = new NodoAST("LISTA_EXTIENDE", comList, "---","---"); :}
;

instrucciones ::= instrucciones:h1 instruccion:h2   {: RESULT = new NodoAST("INSTRUCCIONES", unirArrayList(((NodoAST)h1).getHijos(), ((NodoAST)h2).getHijos()), String.valueOf(h1left), String.valueOf(h1right)); :}
| instruccion:h1                                    {: RESULT = new NodoAST("INSTRUCCIONES", ((NodoAST)h1).getHijos(), String.valueOf(h1left), String.valueOf(h1right)); :}
| error P_COMA
| error LLAVE_C  
;

instruccion ::= declaracion_variable:h1     {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
| llamada_funcion:h1                        {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
| declaracion_funcion:h1                    {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); :}        
| asignacion:h1                             {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); :}        
| mensaje:h1                                {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); :}           
| instruccion_si:h1                         {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); :}         
| switch:h1                                 {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); :}          
| para:h1                                   {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); :}                      
| mientras:h1                               {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); :}      
| hacer_mientras:h1                         {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); :}       
| continuar:h1                              {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); :}        
| reproducir:h1                             {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); :}    
| esperar:h1                                {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); :}               
| ordenar:h1                                {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); :}       
| sumarizarfun:h1                           {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); :}    
| longitud:h1                               {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); :}             
| principal:h1                              {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); :}          
| retornar:h1                               {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); :}       
| salir:h1                                  {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("INSTRUCCION",comList,String.valueOf(h1left), String.valueOf(h1right)); :} 
;

retornar ::= RETORNA exp:h1 P_COMA  {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("RETORNAR", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
| RETORNA:h1 P_COMA                    {: comList=new ArrayList<>(); RESULT=new NodoAST("RETORNAR", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
;

llamada_funcion ::= ID:h1 PARENTESIS_A PARENTESIS_C P_COMA          {: comList=new ArrayList(); comList.add(h1); RESULT=new NodoAST("LLAMADA_FUNCION",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
| ID:h1 PARENTESIS_A lista_expresiones:h2 PARENTESIS_C P_COMA       {: comList=new ArrayList(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("LLAMADA_FUNCION",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
;

llamada_funcion_exp ::= ID:h1 PARENTESIS_A PARENTESIS_C     {: comList=new ArrayList(); comList.add(h1); RESULT=new NodoAST("LLAMADA_FUNCION_EXP",comList,String.valueOf(h1left), String.valueOf(h1right)); :} 
| ID:h1 PARENTESIS_A lista_expresiones:h2 PARENTESIS_C      {: comList=new ArrayList(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("LLAMADA_FUNCION_EXP",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
;

principal ::= PRINCIPAL PARENTESIS_A PARENTESIS_C LLAVE_A instrucciones:h1 LLAVE_C {: comList=new ArrayList(); comList.add(h1); RESULT=new NodoAST("PRINCIPAL",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
;

exp ::= exp:h1 MAS:h2 exp:h3            {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); :}   
| exp:h1 MENOS:h2 exp:h3                {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); :}                             
| exp:h1 POR:h2 exp:h3                  {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
| exp:h1 DIVISION:h2 exp:h3             {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
| exp:h1 MOD:h2 exp:h3                  {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
| exp:h1 POT:h2 exp:h3                  {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
| PARENTESIS_A exp:h1 PARENTESIS_C      {: comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
| exp:h1 MAYOR_QUE:h2 exp:h3            {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
| exp:h1 MENOR_QUE:h2 exp:h3            {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
| exp:h1 MAYOR_IGUAL:h2 exp:h3          {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
| exp:h1 MENOR_IGUAL:h2 exp:h3          {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
| exp:h1 IGUAL:h2 exp:h3                {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
| exp:h1 DIFERENTE:h2 exp:h3            {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
| IS_NULL exp
| exp:h1 AND:h2 exp:h3                  {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
| exp:h1 NAND:h2 exp:h3                 {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
| exp:h1 OR:h2 exp:h3                   {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
| exp:h1 NOR:h2 exp:h3                  {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
| exp:h1 XOR:h2 exp:h3                  {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
| NOT exp
| ENTERO_VAL:h1                         {: comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList<>(); comList2.add(new NodoAST("ENTERO_VAL", comList, String.valueOf(h1left), String.valueOf(h1right))); RESULT = new NodoAST("EXP", comList2, String.valueOf(h1left), String.valueOf(h1right));:}
| DOBLE_VAL:h1                          {: comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList<>(); comList2.add(new NodoAST("DOBLE_VAL", comList, String.valueOf(h1left), String.valueOf(h1right))); RESULT = new NodoAST("EXP", comList2, String.valueOf(h1left), String.valueOf(h1right));:}
| VERDADERO:h1                          {: comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList<>(); comList2.add(new NodoAST("VERDADERO", comList, String.valueOf(h1left), String.valueOf(h1right))); RESULT = new NodoAST("EXP", comList2, String.valueOf(h1left), String.valueOf(h1right));:}
| FALSO:h1                              {: comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList<>(); comList2.add(new NodoAST("FALSO", comList, String.valueOf(h1left), String.valueOf(h1right))); RESULT = new NodoAST("EXP", comList2, String.valueOf(h1left), String.valueOf(h1right));:}
| CADENA_VAL:h1                         {: comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList<>(); comList2.add(new NodoAST("CADENA_VAL", comList, String.valueOf(h1left), String.valueOf(h1right))); RESULT = new NodoAST("EXP", comList2, String.valueOf(h1left), String.valueOf(h1right));:}
| CARACTER_VAL:h1                       {: comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList<>(); comList2.add(new NodoAST("CARACTER_VAL", comList, String.valueOf(h1left), String.valueOf(h1right))); RESULT = new NodoAST("EXP", comList2, String.valueOf(h1left), String.valueOf(h1right));:}
| llamada_funcion_exp:h1                {: comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
| ID:h1                                 {: comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList<>(); comList2.add(new NodoAST("ID", comList, String.valueOf(h1left), String.valueOf(h1right))); RESULT = new NodoAST("EXP", comList2, String.valueOf(h1left), String.valueOf(h1right));:}
| acceso_arreglo:h1                     {: comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
| longitud_exp:h1                       {: comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
| sumarizarfun_exp:h1                   {: comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
| reproducir_exp:h1                     {: comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
| ordenar_exp: h1                       {: comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("EXP", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
;

acceso_arreglo ::= ID:h1 lista_corchetes_asignacion:h2 {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("ACCESO_ARREGLO",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
;

mensaje ::= MENSAJE PARENTESIS_A lista_expresiones:h1 PARENTESIS_C P_COMA {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("MENSAJE",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
;

lista_expresiones ::= lista_expresiones:h1 COMA exp:h2  {: comList=new ArrayList<>(); comList.add(h2); RESULT=new NodoAST("LISTA_EXPRESIONES",unirArrayList(((NodoAST)h1).getHijos(),comList),String.valueOf(h1left), String.valueOf(h1right)); :}
| exp:h1                                                {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("LISTA_EXPRESIONES",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
;

reproducir ::= REPRODUCIR PARENTESIS_A lista_expresiones:h1 PARENTESIS_C P_COMA {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("REPRODUCIR",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
;

reproducir_exp ::= REPRODUCIR PARENTESIS_A lista_expresiones:h1 PARENTESIS_C   {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("REPRODUCIR_EXP",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
;

ordenar ::= ORDENAR PARENTESIS_A ID:h1 COMA ordenes:h2 PARENTESIS_C P_COMA   {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("ORDENAR",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
;

ordenar_exp ::= ORDENAR PARENTESIS_A ID:h1 COMA ordenes:h2 PARENTESIS_C      {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("ORDENAR_EXP",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
;

ordenes ::= ASC_ORD:h1  {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("ORDENES",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
|DESC_ORD:h1            {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("ORDENES",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
|PAR_ORD:h1             {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("ORDENES",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
|IMP_ORD:h1             {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("ORDENES",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
|PRIM_ORD:h1            {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("ORDENES",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
;

sumarizarfun ::= SUMARIZAR PARENTESIS_A ID:h1 PARENTESIS_C P_COMA      {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("SUMARIZARFUN",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
/*| SUMARIZAR PARENTESIS_A lista_llaves PARENTESIS_C P_COMA */
;

sumarizarfun_exp ::= SUMARIZAR PARENTESIS_A ID:h1 PARENTESIS_C         {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("SUMARIZARFUN_EXP",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
/*| SUMARIZAR PARENTESIS_A lista_llaves PARENTESIS_C */
;

esperar ::= ESPERAR PARENTESIS_A lista_expresiones:h1 PARENTESIS_C P_COMA {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("ESPERAR",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
;

longitud ::= LONGITUD PARENTESIS_A ID:h1 PARENTESIS_C P_COMA    {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("LONGITUD",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
|  LONGITUD PARENTESIS_A exp:h1 PARENTESIS_C:h2 P_COMA             {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("LONGITUD",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
; 

longitud_exp ::= LONGITUD PARENTESIS_A ID:h1 PARENTESIS_C       {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("LONGITUD_EXP",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
|  LONGITUD PARENTESIS_A exp:h1 PARENTESIS_C:h2                    {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("LONGITUD_EXP",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
; 

continuar ::= CONTINUAR:h1 {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("CONTINUAR",comList,String.valueOf(h1left), String.valueOf(h1right));:} 
;

salir ::= SALIR:h1 {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("SALIR",comList,String.valueOf(h1left), String.valueOf(h1right));:} 
; 

hacer_mientras ::= HACER LLAVE_A instrucciones:h1 LLAVE_C MIENTRAS PARENTESIS_A exp:h2 PARENTESIS_C P_COMA {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("HACER_MIENTRAS",comList,String.valueOf(h1left), String.valueOf(h1right));:}
;

mientras ::= MIENTRAS PARENTESIS_A exp:h1 PARENTESIS_C LLAVE_A instrucciones:h2 LLAVE_C {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("MIENTRAS",comList,String.valueOf(h1left), String.valueOf(h1right));:}
;

para ::= PARA PARENTESIS_A declaracion_variable:h1 exp:h2 P_COMA asignacion_para:h3 PARENTESIS_C LLAVE_A instrucciones:h4 LLAVE_C {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); comList.add(h4); RESULT=new NodoAST("PARA",comList,String.valueOf(h1left), String.valueOf(h1right));:}
| PARA PARENTESIS_A asignacion:h1 exp:h2 P_COMA asignacion_para:h3 PARENTESIS_C LLAVE_A instrucciones:h4 LLAVE_C:h5    {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); comList.add(h4); comList.add(h5); RESULT=new NodoAST("PARA",comList,String.valueOf(h1left), String.valueOf(h1right));:}
;

declaracion_variable ::= KEEP:h1 variable:h2    {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("DECLARACION_VARIABLE",comList,String.valueOf(h1left), String.valueOf(h1right));:}
| variable:h1                                   {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("DECLARACION_VARIABLE",comList,String.valueOf(h1left), String.valueOf(h1right));:} 
;

variable ::= VAR:h1 tipo_variable_nativa:h2 def_variables:h3    {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT= new NodoAST("VARIABLE", comList,String.valueOf(h1left), String.valueOf(h1right));:}
| VAR:h1 tipo_variable_nativa:h2 ARREGLO:h3 def_arreglo:h4  {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); comList.add(h4); RESULT= new NodoAST("VARIABLE", comList,String.valueOf(h1left), String.valueOf(h1right));:}
;

def_arreglo ::= ID:h1 lista_def_arreglo:h2 {: comList = new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("DEF_ARREGLO", unirArrayList(comList, ((NodoAST)h2).getHijos()), String.valueOf(h1left), String.valueOf(h1right)); :}
;

lista_def_arreglo ::= lista_corchetes:h1 def_arreglo_valores:h2   {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT = new NodoAST("LISTA_DEF_ARREGLO", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
| COMA def_arreglo:h1  {: RESULT=h1; :}
;

lista_corchetes ::= lista_corchetes:h1 CORCHETE_A arreglo_lenght:h2 CORCHETE_C {: comList=new ArrayList<>(); comList.add(h2); RESULT = new NodoAST("LISTA_CORCHETES", unirArrayList(((NodoAST)h1).getHijos(), comList), String.valueOf(h1left), String.valueOf(h1right)); :}
| CORCHETE_A arreglo_lenght:h1 CORCHETE_C {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("LISTA_CORCHETES",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
;

arreglo_lenght ::= exp:h1   {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("ARREGLO_LENGHT",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
|                           {: comList=new ArrayList<>(); RESULT=new NodoAST("ARREGLO_LENGHT",comList,"---","---"); :}
;

def_arreglo_valores ::= P_COMA:h1              {: comList=new ArrayList<>(); RESULT = new NodoAST("DEF_ARREGLO_VALORES", comList, String.valueOf(h1left), String.valueOf(h1right)); :}   
| ASIGNACION lista_llaves:h1 P_COMA         {: comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("DEF_ARREGLO_VALORES", comList, String.valueOf(h1left), String.valueOf(h1right)); :}       
;

lista_llaves ::= lista_llaves:h1 COMA LLAVE_A valores_arreglo:h2 LLAVE_C {: comList=new ArrayList<>(); comList.add(h2); RESULT = new NodoAST("LISTA_LLAVES", unirArrayList(((NodoAST)h1).getHijos(), comList), String.valueOf(h1left), String.valueOf(h1right)); :}
| LLAVE_A valores_arreglo:h1 LLAVE_C    {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("LISTA_LLAVES",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
;

valores_arreglo ::= lista_expresiones:h1   {: comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("VALORES_ARREGLO", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
| lista_llaves:h1  {: RESULT=h1; :}
|   {: comList=new ArrayList<>(); RESULT = new NodoAST("VALORES_ARREGLO", comList, "---","---"); :}
;

def_variables ::= ID:h1 lista_variables:h2      {: comList = new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("DEF_VARIABLE", unirArrayList(comList, ((NodoAST)h2).getHijos()), String.valueOf(h1left), String.valueOf(h1right)); :}
;

lista_variables ::= ASIGNACION exp:h1 P_COMA    {: comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("LISTA_VARIABLES", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
| COMA def_variables:h1                         {: RESULT=h1; :}
| P_COMA:h1                                     {: comList = new ArrayList<>(); RESULT= new NodoAST("LISTA_VARIABLES", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
;

declaracion_funcion ::= KEEP:h1 tipo_variable_nativa:h2 ID:h3 PARENTESIS_A s1:h4    {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); comList.add(h4); RESULT=new NodoAST("DECLARACION_FUNCION",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
| tipo_variable_nativa:h1 ID:h2 PARENTESIS_A s1:h3                                  {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT=new NodoAST("DECLARACION_FUNCION",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
;

s1 ::= PARENTESIS_C s2:h1                       {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("S1",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
| lista_parametros:h1 PARENTESIS_C s2:h2        {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("S1",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
;

s2 ::= LLAVE_A instrucciones:h1 LLAVE_C {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("S2",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
;   

lista_parametros ::= lista_parametros:h1 COMA parametro:h2 {: comList=new ArrayList<>(); comList.add(h2); RESULT = new NodoAST("LISTA_PARAMETROS", unirArrayList(((NodoAST)h1).getHijos(), comList), String.valueOf(h1left), String.valueOf(h1right)); :}
| parametro:h1 {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("LISTA_PARAMETROS",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
;

parametro ::= tipo_variable_nativa:h1 ID:h2 {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("PARAMETRO",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
;

tipo_variable_nativa ::= ENTERO:h1  {: comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList(); comList2.add(new NodoAST("ENTERO", comList, String.valueOf(h1left), String.valueOf(h1right))); RESULT= new NodoAST("TIPOS_VARIABLE_NATIVA",comList2,String.valueOf(h1left), String.valueOf(h1right)); :}
| DOBLE:h1                          {: comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList(); comList2.add(new NodoAST("DOBLE", comList, String.valueOf(h1left), String.valueOf(h1right))); RESULT= new NodoAST("TIPOS_VARIABLE_NATIVA",comList2,String.valueOf(h1left), String.valueOf(h1right)); :}
| CARACTER:h1                       {: comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList(); comList2.add(new NodoAST("CARACTER", comList, String.valueOf(h1left), String.valueOf(h1right))); RESULT= new NodoAST("TIPOS_VARIABLE_NATIVA",comList2,String.valueOf(h1left), String.valueOf(h1right)); :}
| CADENA:h1                         {: comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList(); comList2.add(new NodoAST("CADENA", comList, String.valueOf(h1left), String.valueOf(h1right))); RESULT= new NodoAST("TIPOS_VARIABLE_NATIVA",comList2,String.valueOf(h1left), String.valueOf(h1right)); :}
| BOOLEAN:h1                        {: comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList(); comList2.add(new NodoAST("BOOLEAN", comList, String.valueOf(h1left), String.valueOf(h1right))); RESULT= new NodoAST("TIPOS_VARIABLE_NATIVA",comList2,String.valueOf(h1left), String.valueOf(h1right)); :}
;

dec_id ::= ID
;

tipo_igual ::= ASIGNACION:h1                {: comList=new ArrayList<>(); comList.add(h1); comList2=new ArrayList(); comList2.add(new NodoAST("ASIGNACION_VAL", comList, String.valueOf(h1left), String.valueOf(h1right))); RESULT= new NodoAST("TIPO_IGUAL",comList2,String.valueOf(h1left), String.valueOf(h1right)); :}
| MAS:h1 ASIGNACION:h2                      {: comList=new ArrayList<>(); comList.add(h1+""+h2); comList2=new ArrayList(); comList2.add(new NodoAST("MAS_ASIGNACION", comList, String.valueOf(h1left), String.valueOf(h1right))); RESULT= new NodoAST("TIPO_IGUAL",comList2,String.valueOf(h1left), String.valueOf(h1right)); :}
| MENOS:h1 ASIGNACION:h2                    {: comList=new ArrayList<>(); comList.add(h1+""+h2); comList2=new ArrayList(); comList2.add(new NodoAST("MENOS_ASIGNACION", comList, String.valueOf(h1left), String.valueOf(h1right))); RESULT= new NodoAST("TIPO_IGUAL",comList2,String.valueOf(h1left), String.valueOf(h1right)); :}
;

asignacion_para ::= ID:h1 tipo_igual:h2 exp:h3      {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("ASIGNACION_PARA", comList, String.valueOf(h1left), String.valueOf(h1right));:}
|  ID:h1 INCREMENTO:h2                              {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2);  RESULT = new NodoAST("ASIGNACION_PARA", comList, String.valueOf(h1left), String.valueOf(h1right));:}
|  ID:h1 DECREMENTO:h2                              {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2);  RESULT = new NodoAST("ASIGNACION_PARA", comList, String.valueOf(h1left), String.valueOf(h1right));:}
;


lista_corchetes_asignacion ::= lista_corchetes_asignacion:h1 CORCHETE_A exp:h2 CORCHETE_C {: comList=new ArrayList<>(); comList.add(h2); RESULT = new NodoAST("LISTA_CORCHETES_ASIGNACION", unirArrayList(((NodoAST)h1).getHijos(), comList), String.valueOf(h1left), String.valueOf(h1right)); :}
| CORCHETE_A exp:h1 CORCHETE_C {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("LISTA_CORCHETES_ASIGNACION",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
;

asignacion ::= ID:h1 tipo_igual:h2 exp:h3 P_COMA     {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("ASIGNACION", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
|  ID:h1 lista_corchetes_asignacion:h2 tipo_igual:h3 exp:h4 P_COMA  {:comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); comList.add(h4); RESULT = new NodoAST("ASIGNACION", comList, String.valueOf(h1left), String.valueOf(h1right));:}
|  ID:h1 INCREMENTO:h2 P_COMA                              {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2);  RESULT = new NodoAST("ASIGNACION", comList, String.valueOf(h1left), String.valueOf(h1right));:}
|  ID:h1 DECREMENTO:h2 P_COMA                              {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2);  RESULT = new NodoAST("ASIGNACION", comList, String.valueOf(h1left), String.valueOf(h1right));:}
;

switch ::= SWITCH PARENTESIS_A exp:h1 PARENTESIS_C LLAVE_A lista_casos:h2 LLAVE_C {: comList=new ArrayList(); comList.add(h1); comList.add(h2); RESULT = new NodoAST("SWITCH", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
;

lista_casos ::= lista_casos:h1 caso:h2  {: comList=new ArrayList<>(); comList.add(h2); RESULT = new NodoAST("LISTA_CASOS", unirArrayList(((NodoAST)h1).getHijos(), comList), String.valueOf(h1left), String.valueOf(h1right)); :}
| caso:h1                               {: comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("LISTA_CASOS", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
| default:h1                            {: comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("LISTA_CASOS", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
| lista_casos:h1 default:h2             {: comList=new ArrayList<>(); comList.add(h2); RESULT = new NodoAST("LISTA_CASOS", unirArrayList(((NodoAST)h1).getHijos(), comList), String.valueOf(h1left), String.valueOf(h1right)); :}
;

caso ::= CASO exp:h1 DOS_PUNTOS instrucciones:h2    {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT = new NodoAST("CASO", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
;

default ::= DEFAULT DOS_PUNTOS instrucciones:h1     {: comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("DEFAULT", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
;

instruccion_si ::= si:h1            {: comList=new ArrayList<>(); comList.add(h1); RESULT = new NodoAST("INSTRUCCION_SI", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
| si:h1 sino:h2                     {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT = new NodoAST("INSTRUCCION_SI", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
| si:h1 lista_sino_si:h2            {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT = new NodoAST("INSTRUCCION_SI", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
| si:h1 lista_sino_si:h2 sino:h3    {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); comList.add(h3); RESULT = new NodoAST("INSTRUCCION_SI", comList, String.valueOf(h1left), String.valueOf(h1right)); :}
;

si ::= SI PARENTESIS_A exp:h1 PARENTESIS_C LLAVE_A instrucciones:h2 LLAVE_C {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("SI",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
;

sino ::= SINO LLAVE_A instrucciones:h1 LLAVE_C {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("SINO",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
;

sino_si ::= SINO SI PARENTESIS_A exp:h1 PARENTESIS_C  LLAVE_A instrucciones:h2 LLAVE_C {: comList=new ArrayList<>(); comList.add(h1); comList.add(h2); RESULT=new NodoAST("SINO_SI",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
;

lista_sino_si ::= lista_sino_si:h1 sino_si:h2 {: comList=new ArrayList<>(); comList.add(h2); RESULT = new NodoAST("LISTA_SINO_SI", unirArrayList(((NodoAST)h1).getHijos(), comList), String.valueOf(h1left), String.valueOf(h1right)); :}
| sino_si:h1 {: comList=new ArrayList<>(); comList.add(h1); RESULT=new NodoAST("LISTA_SINO_SI",comList,String.valueOf(h1left), String.valueOf(h1right)); :}
;
